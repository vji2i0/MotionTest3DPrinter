ARM GAS  /tmp/ccymXkh7.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"FunctionsForButtons.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.openDirectory_Menu,"ax",%progbits
  16              		.align	1
  17              		.global	openDirectory_Menu
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	openDirectory_Menu:
  24              	.LFB83:
  25              		.file 1 "Src/Menu/FunctionsForButtons.c"
   1:Src/Menu/FunctionsForButtons.c **** #include "FunctionsForButtons.h"
   2:Src/Menu/FunctionsForButtons.c **** 
   3:Src/Menu/FunctionsForButtons.c **** #include "Constructor_Menu.h"
   4:Src/Menu/FunctionsForButtons.c **** #include "TextConverter_LCD.h"
   5:Src/Menu/FunctionsForButtons.c **** #include "State_USBdrive.h"
   6:Src/Menu/FunctionsForButtons.c **** #include "Driver_USBdrive.h"
   7:Src/Menu/FunctionsForButtons.c **** 
   8:Src/Menu/FunctionsForButtons.c **** #include "GcodeConverter_Gcode.h"
   9:Src/Menu/FunctionsForButtons.c **** #include "Descritization_Gcode.h"
  10:Src/Menu/FunctionsForButtons.c **** #include "Buffer_Gcode.h"
  11:Src/Menu/FunctionsForButtons.c **** #include "VirtualPrinters_Gcode.h"
  12:Src/Menu/FunctionsForButtons.c **** #include "Config_Gcode.h"
  13:Src/Menu/FunctionsForButtons.c **** 
  14:Src/Menu/FunctionsForButtons.c **** #include "fatfs.h"
  15:Src/Menu/FunctionsForButtons.c **** 
  16:Src/Menu/FunctionsForButtons.c **** #include "stdint.h"
  17:Src/Menu/FunctionsForButtons.c **** #include <wchar.h>
  18:Src/Menu/FunctionsForButtons.c **** #include "stdbool.h"
  19:Src/Menu/FunctionsForButtons.c **** 
  20:Src/Menu/FunctionsForButtons.c **** void simpleNavigationDown_Menu(void)
  21:Src/Menu/FunctionsForButtons.c **** {
  22:Src/Menu/FunctionsForButtons.c ****     if (!ThereIsNodeBelow_Menu())
  23:Src/Menu/FunctionsForButtons.c ****         return;
  24:Src/Menu/FunctionsForButtons.c **** 
  25:Src/Menu/FunctionsForButtons.c ****     if (!ThereIsNodeAbove_Menu())
  26:Src/Menu/FunctionsForButtons.c ****     {
  27:Src/Menu/FunctionsForButtons.c ****         putLine_TextConverter_LCD(getName_Menu(), 2);   updateLine_TextConverter_LCD(2);
  28:Src/Menu/FunctionsForButtons.c ****         moveDown_Menu();
  29:Src/Menu/FunctionsForButtons.c ****         wchar_t* currName = (wchar_t*) getName_Menu();  currName[0] = *L">";
  30:Src/Menu/FunctionsForButtons.c ****         putLine_TextConverter_LCD(currName, 3);         updateLine_TextConverter_LCD(3);    currNam
  31:Src/Menu/FunctionsForButtons.c ****         return;
  32:Src/Menu/FunctionsForButtons.c ****     }
  33:Src/Menu/FunctionsForButtons.c **** 
ARM GAS  /tmp/ccymXkh7.s 			page 2


  34:Src/Menu/FunctionsForButtons.c ****     moveDown_Menu();
  35:Src/Menu/FunctionsForButtons.c ****     if (!ThereIsNodeBelow_Menu())
  36:Src/Menu/FunctionsForButtons.c ****     {
  37:Src/Menu/FunctionsForButtons.c ****         moveUp_Menu();
  38:Src/Menu/FunctionsForButtons.c ****         putLine_TextConverter_LCD(getName_Menu(), 3);   updateLine_TextConverter_LCD(3);
  39:Src/Menu/FunctionsForButtons.c ****         moveDown_Menu();
  40:Src/Menu/FunctionsForButtons.c ****         wchar_t* currName = (wchar_t*) getName_Menu();  currName[0] = *L">";
  41:Src/Menu/FunctionsForButtons.c ****         putLine_TextConverter_LCD(currName, 4);         updateLine_TextConverter_LCD(4);    currNam
  42:Src/Menu/FunctionsForButtons.c ****         return;
  43:Src/Menu/FunctionsForButtons.c ****     }
  44:Src/Menu/FunctionsForButtons.c **** 
  45:Src/Menu/FunctionsForButtons.c ****     moveUp_Menu();
  46:Src/Menu/FunctionsForButtons.c ****     putLine_TextConverter_LCD(getName_Menu(), 2);   updateLine_TextConverter_LCD(2);
  47:Src/Menu/FunctionsForButtons.c ****     moveDown_Menu();
  48:Src/Menu/FunctionsForButtons.c ****     wchar_t* currName = (wchar_t*) getName_Menu();  currName[0] = *L">";
  49:Src/Menu/FunctionsForButtons.c ****     putLine_TextConverter_LCD(currName, 3);         updateLine_TextConverter_LCD(3);    currName[0]
  50:Src/Menu/FunctionsForButtons.c ****     if (ThereIsNodeBelow_Menu())
  51:Src/Menu/FunctionsForButtons.c ****     {
  52:Src/Menu/FunctionsForButtons.c ****         moveDown_Menu();
  53:Src/Menu/FunctionsForButtons.c ****         putLine_TextConverter_LCD(getName_Menu(), 4);   updateLine_TextConverter_LCD(4);
  54:Src/Menu/FunctionsForButtons.c ****         moveUp_Menu();
  55:Src/Menu/FunctionsForButtons.c ****         return;
  56:Src/Menu/FunctionsForButtons.c ****     }
  57:Src/Menu/FunctionsForButtons.c **** }
  58:Src/Menu/FunctionsForButtons.c **** 
  59:Src/Menu/FunctionsForButtons.c **** void simpleNavigationUp_Menu(void)
  60:Src/Menu/FunctionsForButtons.c **** {
  61:Src/Menu/FunctionsForButtons.c ****     if (!ThereIsNodeAbove_Menu())
  62:Src/Menu/FunctionsForButtons.c ****         return;
  63:Src/Menu/FunctionsForButtons.c **** 
  64:Src/Menu/FunctionsForButtons.c ****     moveUp_Menu();
  65:Src/Menu/FunctionsForButtons.c ****     if (!ThereIsNodeAbove_Menu())
  66:Src/Menu/FunctionsForButtons.c ****     {
  67:Src/Menu/FunctionsForButtons.c ****         wchar_t* currName = (wchar_t*) getName_Menu();  currName[0] = *L">";
  68:Src/Menu/FunctionsForButtons.c ****         putLine_TextConverter_LCD(currName, 2);         updateLine_TextConverter_LCD(2);    currNam
  69:Src/Menu/FunctionsForButtons.c ****         moveDown_Menu();
  70:Src/Menu/FunctionsForButtons.c ****         putLine_TextConverter_LCD(getName_Menu(), 3);   updateLine_TextConverter_LCD(3);
  71:Src/Menu/FunctionsForButtons.c ****         moveUp_Menu();
  72:Src/Menu/FunctionsForButtons.c ****         return;
  73:Src/Menu/FunctionsForButtons.c ****     }
  74:Src/Menu/FunctionsForButtons.c **** 
  75:Src/Menu/FunctionsForButtons.c ****     moveUp_Menu();
  76:Src/Menu/FunctionsForButtons.c ****     putLine_TextConverter_LCD(getName_Menu(), 2);   updateLine_TextConverter_LCD(2);
  77:Src/Menu/FunctionsForButtons.c ****     moveDown_Menu();
  78:Src/Menu/FunctionsForButtons.c ****     wchar_t* currName = (wchar_t*) getName_Menu();  currName[0] = *L">";
  79:Src/Menu/FunctionsForButtons.c ****     putLine_TextConverter_LCD(currName, 3);         updateLine_TextConverter_LCD(3);    currName[0]
  80:Src/Menu/FunctionsForButtons.c ****     moveDown_Menu();
  81:Src/Menu/FunctionsForButtons.c ****     putLine_TextConverter_LCD(getName_Menu(), 4);   updateLine_TextConverter_LCD(4);
  82:Src/Menu/FunctionsForButtons.c ****     moveUp_Menu();
  83:Src/Menu/FunctionsForButtons.c **** }
  84:Src/Menu/FunctionsForButtons.c **** 
  85:Src/Menu/FunctionsForButtons.c **** void simpleNavigationOk_Menu(void)
  86:Src/Menu/FunctionsForButtons.c **** {
  87:Src/Menu/FunctionsForButtons.c ****     moveRight_Menu();
  88:Src/Menu/FunctionsForButtons.c ****     putLine_TextConverter_LCD(getTitle_Menu(), 1);   updateLine_TextConverter_LCD(1);
  89:Src/Menu/FunctionsForButtons.c **** 
  90:Src/Menu/FunctionsForButtons.c ****     wchar_t* currName = (wchar_t*) getName_Menu();  currName[0] = *L">";
ARM GAS  /tmp/ccymXkh7.s 			page 3


  91:Src/Menu/FunctionsForButtons.c ****     putLine_TextConverter_LCD(currName, 2);         updateLine_TextConverter_LCD(2);    currName[0]
  92:Src/Menu/FunctionsForButtons.c ****     if (!ThereIsNodeBelow_Menu())
  93:Src/Menu/FunctionsForButtons.c ****     {
  94:Src/Menu/FunctionsForButtons.c ****         putLine_TextConverter_LCD(EMPTY_STRING, 3);   updateLine_TextConverter_LCD(3);
  95:Src/Menu/FunctionsForButtons.c ****         putLine_TextConverter_LCD(EMPTY_STRING, 4);   updateLine_TextConverter_LCD(4);
  96:Src/Menu/FunctionsForButtons.c ****         return;
  97:Src/Menu/FunctionsForButtons.c ****     }
  98:Src/Menu/FunctionsForButtons.c ****     moveDown_Menu();
  99:Src/Menu/FunctionsForButtons.c ****     putLine_TextConverter_LCD(getName_Menu(), 3);   updateLine_TextConverter_LCD(3);
 100:Src/Menu/FunctionsForButtons.c ****     if (!ThereIsNodeBelow_Menu())
 101:Src/Menu/FunctionsForButtons.c ****     {
 102:Src/Menu/FunctionsForButtons.c ****         putLine_TextConverter_LCD(EMPTY_STRING, 4);   updateLine_TextConverter_LCD(4);
 103:Src/Menu/FunctionsForButtons.c ****         moveUp_Menu();
 104:Src/Menu/FunctionsForButtons.c ****         return;
 105:Src/Menu/FunctionsForButtons.c ****     }
 106:Src/Menu/FunctionsForButtons.c ****     moveDown_Menu();
 107:Src/Menu/FunctionsForButtons.c ****     putLine_TextConverter_LCD(getName_Menu(), 4);   updateLine_TextConverter_LCD(4);
 108:Src/Menu/FunctionsForButtons.c ****     moveUp_Menu();
 109:Src/Menu/FunctionsForButtons.c ****     moveUp_Menu();
 110:Src/Menu/FunctionsForButtons.c **** }
 111:Src/Menu/FunctionsForButtons.c **** 
 112:Src/Menu/FunctionsForButtons.c **** void simpleNavigationBack_Menu(void)
 113:Src/Menu/FunctionsForButtons.c **** {
 114:Src/Menu/FunctionsForButtons.c ****     moveLeft_Menu();    putLine_TextConverter_LCD(getTitle_Menu(), 1);   updateLine_TextConverter_L
 115:Src/Menu/FunctionsForButtons.c ****     if (!ThereIsNodeAbove_Menu())
 116:Src/Menu/FunctionsForButtons.c ****     {
 117:Src/Menu/FunctionsForButtons.c ****         wchar_t* currName = (wchar_t*) getName_Menu();  currName[0] = *L">";
 118:Src/Menu/FunctionsForButtons.c ****         putLine_TextConverter_LCD(currName, 2);         updateLine_TextConverter_LCD(2);    currNam
 119:Src/Menu/FunctionsForButtons.c ****         if (!ThereIsNodeBelow_Menu())
 120:Src/Menu/FunctionsForButtons.c ****         {
 121:Src/Menu/FunctionsForButtons.c ****             putLine_TextConverter_LCD(EMPTY_STRING, 3);   updateLine_TextConverter_LCD(3);
 122:Src/Menu/FunctionsForButtons.c ****             putLine_TextConverter_LCD(EMPTY_STRING, 4);   updateLine_TextConverter_LCD(4);
 123:Src/Menu/FunctionsForButtons.c ****             return;
 124:Src/Menu/FunctionsForButtons.c ****         }
 125:Src/Menu/FunctionsForButtons.c ****         moveDown_Menu();    putLine_TextConverter_LCD(getName_Menu(), 3);   updateLine_TextConverte
 126:Src/Menu/FunctionsForButtons.c ****         if (!ThereIsNodeBelow_Menu())
 127:Src/Menu/FunctionsForButtons.c ****         {
 128:Src/Menu/FunctionsForButtons.c ****             putLine_TextConverter_LCD(EMPTY_STRING, 4);   updateLine_TextConverter_LCD(4);
 129:Src/Menu/FunctionsForButtons.c ****             return;
 130:Src/Menu/FunctionsForButtons.c ****         }
 131:Src/Menu/FunctionsForButtons.c ****         moveDown_Menu();    putLine_TextConverter_LCD(getName_Menu(), 4);   updateLine_TextConverte
 132:Src/Menu/FunctionsForButtons.c ****         moveUp_Menu();      moveUp_Menu();
 133:Src/Menu/FunctionsForButtons.c ****         return;
 134:Src/Menu/FunctionsForButtons.c ****     }
 135:Src/Menu/FunctionsForButtons.c ****     moveUp_Menu();      putLine_TextConverter_LCD(getName_Menu(), 2);   updateLine_TextConverter_LC
 136:Src/Menu/FunctionsForButtons.c ****     moveDown_Menu();    wchar_t* currName = (wchar_t*) getName_Menu();  currName[0] = *L">";
 137:Src/Menu/FunctionsForButtons.c ****     putLine_TextConverter_LCD(currName, 3);         updateLine_TextConverter_LCD(3);    currName[0]
 138:Src/Menu/FunctionsForButtons.c ****     if (!ThereIsNodeBelow_Menu())
 139:Src/Menu/FunctionsForButtons.c ****     {
 140:Src/Menu/FunctionsForButtons.c ****         putLine_TextConverter_LCD(EMPTY_STRING, 4);   updateLine_TextConverter_LCD(4);
 141:Src/Menu/FunctionsForButtons.c ****         return;
 142:Src/Menu/FunctionsForButtons.c ****     }
 143:Src/Menu/FunctionsForButtons.c ****     moveDown_Menu();    putLine_TextConverter_LCD(getName_Menu(), 4);   updateLine_TextConverter_LC
 144:Src/Menu/FunctionsForButtons.c ****     moveUp_Menu();
 145:Src/Menu/FunctionsForButtons.c **** }
 146:Src/Menu/FunctionsForButtons.c **** 
 147:Src/Menu/FunctionsForButtons.c **** void printOk_Menu(void)
ARM GAS  /tmp/ccymXkh7.s 			page 4


 148:Src/Menu/FunctionsForButtons.c **** {
 149:Src/Menu/FunctionsForButtons.c ****     if (getState_USBdrive() == NOT_READY_USBDRIVE)  return;
 150:Src/Menu/FunctionsForButtons.c ****     if (getMountedStatus() == UNMOUNTED_USBDRIVE)   mount_USBdrive();
 151:Src/Menu/FunctionsForButtons.c ****     openDirectory_USBdrive(USBHPath);
 152:Src/Menu/FunctionsForButtons.c ****     destroyRightNode_Menu();
 153:Src/Menu/FunctionsForButtons.c **** 
 154:Src/Menu/FunctionsForButtons.c ****     readItem_USBdrive();
 155:Src/Menu/FunctionsForButtons.c ****     putLine_TextConverter_LCD(getWideLongName_USBdrive(), 2);  updateLine_TextConverter_LCD(2);
 156:Src/Menu/FunctionsForButtons.c ****     if(getItemType_USBdrive() == ITEM_IS_EMPTY)
 157:Src/Menu/FunctionsForButtons.c ****         return;
 158:Src/Menu/FunctionsForButtons.c ****     createRightNode_Menu(L"USB drive", getWideLongName_USBdrive());
 159:Src/Menu/FunctionsForButtons.c ****     moveRight_Menu();
 160:Src/Menu/FunctionsForButtons.c **** 
 161:Src/Menu/FunctionsForButtons.c ****     setFunctionUp(&simpleNavigationUp_Menu);
 162:Src/Menu/FunctionsForButtons.c ****     setFunctionDown(&simpleNavigationDown_Menu);
 163:Src/Menu/FunctionsForButtons.c ****     setFunctionBack(&simpleNavigationBack_Menu);
 164:Src/Menu/FunctionsForButtons.c ****     if (getItemType_USBdrive() == ITEM_IS_DIRECTORY) setFunctionOk(&openDirectory_Menu);
 165:Src/Menu/FunctionsForButtons.c ****     if (getItemType_USBdrive() == ITEM_IS_FILE)      setFunctionOk(&runGcode_Menu);
 166:Src/Menu/FunctionsForButtons.c **** 
 167:Src/Menu/FunctionsForButtons.c ****     readItem_USBdrive();
 168:Src/Menu/FunctionsForButtons.c ****     while(getItemType_USBdrive() != ITEM_IS_EMPTY)
 169:Src/Menu/FunctionsForButtons.c ****     {
 170:Src/Menu/FunctionsForButtons.c ****         createDownNode_Menu(getWideLongName_USBdrive());
 171:Src/Menu/FunctionsForButtons.c ****         moveDown_Menu();
 172:Src/Menu/FunctionsForButtons.c ****         setFunctionUp(&simpleNavigationUp_Menu);
 173:Src/Menu/FunctionsForButtons.c ****         setFunctionDown(&simpleNavigationDown_Menu);
 174:Src/Menu/FunctionsForButtons.c ****         setFunctionBack(&simpleNavigationBack_Menu);
 175:Src/Menu/FunctionsForButtons.c ****         if (getItemType_USBdrive() == ITEM_IS_DIRECTORY) setFunctionOk(&openDirectory_Menu);
 176:Src/Menu/FunctionsForButtons.c ****         if (getItemType_USBdrive() == ITEM_IS_FILE)      setFunctionOk(&runGcode_Menu);
 177:Src/Menu/FunctionsForButtons.c ****         readItem_USBdrive();
 178:Src/Menu/FunctionsForButtons.c ****     }
 179:Src/Menu/FunctionsForButtons.c **** 
 180:Src/Menu/FunctionsForButtons.c ****     while( ThereIsNodeAbove_Menu() )  moveUp_Menu();
 181:Src/Menu/FunctionsForButtons.c **** 
 182:Src/Menu/FunctionsForButtons.c ****     putLine_TextConverter_LCD(getTitle_Menu(), 1);  updateLine_TextConverter_LCD(1);
 183:Src/Menu/FunctionsForButtons.c ****     wchar_t* currName = (wchar_t*) getName_Menu();  currName[0] = *L">";
 184:Src/Menu/FunctionsForButtons.c ****     putLine_TextConverter_LCD(currName, 2);         updateLine_TextConverter_LCD(2);    currName[0]
 185:Src/Menu/FunctionsForButtons.c ****     if(!ThereIsNodeBelow_Menu())
 186:Src/Menu/FunctionsForButtons.c ****     {
 187:Src/Menu/FunctionsForButtons.c ****         putLine_TextConverter_LCD(EMPTY_STRING, 3); updateLine_TextConverter_LCD(3);
 188:Src/Menu/FunctionsForButtons.c ****         putLine_TextConverter_LCD(EMPTY_STRING, 4); updateLine_TextConverter_LCD(4);
 189:Src/Menu/FunctionsForButtons.c ****         return;
 190:Src/Menu/FunctionsForButtons.c ****     }
 191:Src/Menu/FunctionsForButtons.c ****     moveDown_Menu();    putLine_TextConverter_LCD(getName_Menu(), 3);   updateLine_TextConverter_LC
 192:Src/Menu/FunctionsForButtons.c ****     if(!ThereIsNodeBelow_Menu())
 193:Src/Menu/FunctionsForButtons.c ****     {
 194:Src/Menu/FunctionsForButtons.c ****         putLine_TextConverter_LCD(EMPTY_STRING, 4); updateLine_TextConverter_LCD(4);
 195:Src/Menu/FunctionsForButtons.c ****         moveUp_Menu();
 196:Src/Menu/FunctionsForButtons.c ****         return;
 197:Src/Menu/FunctionsForButtons.c ****     }
 198:Src/Menu/FunctionsForButtons.c ****     moveDown_Menu();    putLine_TextConverter_LCD(getName_Menu(), 4);   updateLine_TextConverter_LC
 199:Src/Menu/FunctionsForButtons.c ****     moveUp_Menu();      moveUp_Menu();
 200:Src/Menu/FunctionsForButtons.c **** }
 201:Src/Menu/FunctionsForButtons.c **** 
 202:Src/Menu/FunctionsForButtons.c **** 
 203:Src/Menu/FunctionsForButtons.c **** void changeFilamentOk_Menu(void) { moveRight_Menu(); }
 204:Src/Menu/FunctionsForButtons.c **** 
ARM GAS  /tmp/ccymXkh7.s 			page 5


 205:Src/Menu/FunctionsForButtons.c **** void setTheTemperatureOk_Menu(void) {}
 206:Src/Menu/FunctionsForButtons.c **** void setTheTemperatureBack_Menu(void) { moveLeft_Menu(); }
 207:Src/Menu/FunctionsForButtons.c **** void setTheTemperatureUp_Menu(void) {}
 208:Src/Menu/FunctionsForButtons.c **** void setTheTemperatureDown_Menu(void) {}
 209:Src/Menu/FunctionsForButtons.c **** 
 210:Src/Menu/FunctionsForButtons.c **** void englishOk_Menu(void) {}
 211:Src/Menu/FunctionsForButtons.c **** void englishBack_Menu(void) { moveLeft_Menu(); }
 212:Src/Menu/FunctionsForButtons.c **** void russianOk_Menu(void) {}
 213:Src/Menu/FunctionsForButtons.c **** void russianBack_Menu(void) { moveLeft_Menu(); }
 214:Src/Menu/FunctionsForButtons.c **** 
 215:Src/Menu/FunctionsForButtons.c **** void helpOk_Menu(void) {}
 216:Src/Menu/FunctionsForButtons.c **** void helpBack_Menu(void) {}
 217:Src/Menu/FunctionsForButtons.c **** 
 218:Src/Menu/FunctionsForButtons.c **** 
 219:Src/Menu/FunctionsForButtons.c **** 
 220:Src/Menu/FunctionsForButtons.c **** 
 221:Src/Menu/FunctionsForButtons.c **** 
 222:Src/Menu/FunctionsForButtons.c **** void emptyFunction_Menu(void) {}
 223:Src/Menu/FunctionsForButtons.c **** 
 224:Src/Menu/FunctionsForButtons.c **** void openDirectory_Menu(void) {}
  26              		.loc 1 224 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              		.loc 1 224 0
  32 0000 7047     		bx	lr
  33              		.cfi_endproc
  34              	.LFE83:
  36              		.section	.text.wchar_t2TCHAR,"ax",%progbits
  37              		.align	1
  38              		.syntax unified
  39              		.thumb
  40              		.thumb_func
  41              		.fpu softvfp
  43              	wchar_t2TCHAR:
  44              	.LFB88:
 225:Src/Menu/FunctionsForButtons.c **** void closeDirectory_Menu(void) {}
 226:Src/Menu/FunctionsForButtons.c **** 
 227:Src/Menu/FunctionsForButtons.c **** 
 228:Src/Menu/FunctionsForButtons.c **** static _Bool GcodeFormat()
 229:Src/Menu/FunctionsForButtons.c **** {
 230:Src/Menu/FunctionsForButtons.c ****     if(wcsstr(getName_Menu(), L".gcode\0") != NULL)
 231:Src/Menu/FunctionsForButtons.c ****         return true;
 232:Src/Menu/FunctionsForButtons.c ****     return false;
 233:Src/Menu/FunctionsForButtons.c **** }
 234:Src/Menu/FunctionsForButtons.c **** 
 235:Src/Menu/FunctionsForButtons.c **** static void wait()
 236:Src/Menu/FunctionsForButtons.c **** {
 237:Src/Menu/FunctionsForButtons.c ****     HAL_Delay(500);
 238:Src/Menu/FunctionsForButtons.c **** }
 239:Src/Menu/FunctionsForButtons.c **** 
 240:Src/Menu/FunctionsForButtons.c **** static void returnFirstLine()
 241:Src/Menu/FunctionsForButtons.c **** {
 242:Src/Menu/FunctionsForButtons.c **** 
 243:Src/Menu/FunctionsForButtons.c ****     putLine_TextConverter_LCD(getTitle_Menu(), 1);
 244:Src/Menu/FunctionsForButtons.c ****     updateLine_TextConverter_LCD(1);
ARM GAS  /tmp/ccymXkh7.s 			page 6


 245:Src/Menu/FunctionsForButtons.c **** }
 246:Src/Menu/FunctionsForButtons.c **** 
 247:Src/Menu/FunctionsForButtons.c **** 
 248:Src/Menu/FunctionsForButtons.c **** static TCHAR wchar_t2TCHAR(wchar_t character)
 249:Src/Menu/FunctionsForButtons.c **** {
  45              		.loc 1 249 0
  46              		.cfi_startproc
  47              		@ args = 0, pretend = 0, frame = 0
  48              		@ frame_needed = 0, uses_anonymous_args = 0
  49              		@ link register save eliminated.
  50              	.LVL0:
 250:Src/Menu/FunctionsForButtons.c ****     if(character == *L"а") return (TCHAR) 0xA0;
  51              		.loc 1 250 0
  52 0000 B34B     		ldr	r3, .L70
  53 0002 1B68     		ldr	r3, [r3]
  54 0004 8342     		cmp	r3, r0
  55 0006 00F04781 		beq	.L4
 251:Src/Menu/FunctionsForButtons.c ****     if(character == *L"б") return (TCHAR) 0xA1;
  56              		.loc 1 251 0
  57 000a B24B     		ldr	r3, .L70+4
  58 000c 1B68     		ldr	r3, [r3]
  59 000e 8342     		cmp	r3, r0
  60 0010 00F04481 		beq	.L5
 252:Src/Menu/FunctionsForButtons.c ****     if(character == *L"в") return (TCHAR) 0xA2;
  61              		.loc 1 252 0
  62 0014 B04B     		ldr	r3, .L70+8
  63 0016 1B68     		ldr	r3, [r3]
  64 0018 8342     		cmp	r3, r0
  65 001a 00F04181 		beq	.L6
 253:Src/Menu/FunctionsForButtons.c ****     if(character == *L"г") return (TCHAR) 0xA3;
  66              		.loc 1 253 0
  67 001e AF4B     		ldr	r3, .L70+12
  68 0020 1B68     		ldr	r3, [r3]
  69 0022 8342     		cmp	r3, r0
  70 0024 00F03E81 		beq	.L7
 254:Src/Menu/FunctionsForButtons.c ****     if(character == *L"д") return (TCHAR) 0xA4;
  71              		.loc 1 254 0
  72 0028 AD4B     		ldr	r3, .L70+16
  73 002a 1B68     		ldr	r3, [r3]
  74 002c 8342     		cmp	r3, r0
  75 002e 00F03B81 		beq	.L8
 255:Src/Menu/FunctionsForButtons.c ****     if(character == *L"е") return (TCHAR) 0xA5;
  76              		.loc 1 255 0
  77 0032 AC4B     		ldr	r3, .L70+20
  78 0034 1B68     		ldr	r3, [r3]
  79 0036 8342     		cmp	r3, r0
  80 0038 00F03881 		beq	.L9
 256:Src/Menu/FunctionsForButtons.c ****     if(character == *L"ё") return (TCHAR) 0xF1;
  81              		.loc 1 256 0
  82 003c AA4B     		ldr	r3, .L70+24
  83 003e 1B68     		ldr	r3, [r3]
  84 0040 8342     		cmp	r3, r0
  85 0042 00F03581 		beq	.L10
 257:Src/Menu/FunctionsForButtons.c ****     if(character == *L"ж") return (TCHAR) 0xA6;
  86              		.loc 1 257 0
  87 0046 A94B     		ldr	r3, .L70+28
  88 0048 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccymXkh7.s 			page 7


  89 004a 8342     		cmp	r3, r0
  90 004c 00F03281 		beq	.L11
 258:Src/Menu/FunctionsForButtons.c ****     if(character == *L"з") return (TCHAR) 0xA7;
  91              		.loc 1 258 0
  92 0050 A74B     		ldr	r3, .L70+32
  93 0052 1B68     		ldr	r3, [r3]
  94 0054 8342     		cmp	r3, r0
  95 0056 00F02F81 		beq	.L12
 259:Src/Menu/FunctionsForButtons.c ****     if(character == *L"и") return (TCHAR) 0xA8;
  96              		.loc 1 259 0
  97 005a A64B     		ldr	r3, .L70+36
  98 005c 1B68     		ldr	r3, [r3]
  99 005e 8342     		cmp	r3, r0
 100 0060 00F02C81 		beq	.L13
 260:Src/Menu/FunctionsForButtons.c ****     if(character == *L"й") return (TCHAR) 0xA9;
 101              		.loc 1 260 0
 102 0064 A44B     		ldr	r3, .L70+40
 103 0066 1B68     		ldr	r3, [r3]
 104 0068 8342     		cmp	r3, r0
 105 006a 00F02981 		beq	.L14
 261:Src/Menu/FunctionsForButtons.c ****     if(character == *L"к") return (TCHAR) 0xAA;
 106              		.loc 1 261 0
 107 006e A34B     		ldr	r3, .L70+44
 108 0070 1B68     		ldr	r3, [r3]
 109 0072 8342     		cmp	r3, r0
 110 0074 00F02681 		beq	.L15
 262:Src/Menu/FunctionsForButtons.c ****     if(character == *L"л") return (TCHAR) 0xAB;
 111              		.loc 1 262 0
 112 0078 A14B     		ldr	r3, .L70+48
 113 007a 1B68     		ldr	r3, [r3]
 114 007c 8342     		cmp	r3, r0
 115 007e 00F02381 		beq	.L16
 263:Src/Menu/FunctionsForButtons.c ****     if(character == *L"м") return (TCHAR) 0xAC;
 116              		.loc 1 263 0
 117 0082 A04B     		ldr	r3, .L70+52
 118 0084 1B68     		ldr	r3, [r3]
 119 0086 8342     		cmp	r3, r0
 120 0088 00F02081 		beq	.L17
 264:Src/Menu/FunctionsForButtons.c ****     if(character == *L"н") return (TCHAR) 0xAD;
 121              		.loc 1 264 0
 122 008c 9E4B     		ldr	r3, .L70+56
 123 008e 1B68     		ldr	r3, [r3]
 124 0090 8342     		cmp	r3, r0
 125 0092 00F0A181 		beq	.L18
 265:Src/Menu/FunctionsForButtons.c ****     if(character == *L"о") return (TCHAR) 0xAE;
 126              		.loc 1 265 0
 127 0096 9D4B     		ldr	r3, .L70+60
 128 0098 1B68     		ldr	r3, [r3]
 129 009a 8342     		cmp	r3, r0
 130 009c 00F09E81 		beq	.L19
 266:Src/Menu/FunctionsForButtons.c ****     if(character == *L"п") return (TCHAR) 0xAF;
 131              		.loc 1 266 0
 132 00a0 9B4B     		ldr	r3, .L70+64
 133 00a2 1B68     		ldr	r3, [r3]
 134 00a4 8342     		cmp	r3, r0
 135 00a6 00F09B81 		beq	.L20
 267:Src/Menu/FunctionsForButtons.c ****     if(character == *L"р") return (TCHAR) 0xE0;
ARM GAS  /tmp/ccymXkh7.s 			page 8


 136              		.loc 1 267 0
 137 00aa 9A4B     		ldr	r3, .L70+68
 138 00ac 1B68     		ldr	r3, [r3]
 139 00ae 8342     		cmp	r3, r0
 140 00b0 00F09881 		beq	.L21
 268:Src/Menu/FunctionsForButtons.c ****     if(character == *L"с") return (TCHAR) 0xE1;
 141              		.loc 1 268 0
 142 00b4 984B     		ldr	r3, .L70+72
 143 00b6 1B68     		ldr	r3, [r3]
 144 00b8 8342     		cmp	r3, r0
 145 00ba 00F09581 		beq	.L22
 269:Src/Menu/FunctionsForButtons.c ****     if(character == *L"т") return (TCHAR) 0xE2;
 146              		.loc 1 269 0
 147 00be 974B     		ldr	r3, .L70+76
 148 00c0 1B68     		ldr	r3, [r3]
 149 00c2 8342     		cmp	r3, r0
 150 00c4 00F09281 		beq	.L23
 270:Src/Menu/FunctionsForButtons.c ****     if(character == *L"у") return (TCHAR) 0xE3;
 151              		.loc 1 270 0
 152 00c8 954B     		ldr	r3, .L70+80
 153 00ca 1B68     		ldr	r3, [r3]
 154 00cc 8342     		cmp	r3, r0
 155 00ce 00F08F81 		beq	.L24
 271:Src/Menu/FunctionsForButtons.c ****     if(character == *L"ф") return (TCHAR) 0xE4;
 156              		.loc 1 271 0
 157 00d2 944B     		ldr	r3, .L70+84
 158 00d4 1B68     		ldr	r3, [r3]
 159 00d6 8342     		cmp	r3, r0
 160 00d8 00F08C81 		beq	.L25
 272:Src/Menu/FunctionsForButtons.c ****     if(character == *L"х") return (TCHAR) 0xE5;
 161              		.loc 1 272 0
 162 00dc 924B     		ldr	r3, .L70+88
 163 00de 1B68     		ldr	r3, [r3]
 164 00e0 8342     		cmp	r3, r0
 165 00e2 00F08981 		beq	.L26
 273:Src/Menu/FunctionsForButtons.c ****     if(character == *L"ц") return (TCHAR) 0xE6;
 166              		.loc 1 273 0
 167 00e6 914B     		ldr	r3, .L70+92
 168 00e8 1B68     		ldr	r3, [r3]
 169 00ea 8342     		cmp	r3, r0
 170 00ec 00F08681 		beq	.L27
 274:Src/Menu/FunctionsForButtons.c ****     if(character == *L"ч") return (TCHAR) 0xE7;
 171              		.loc 1 274 0
 172 00f0 8F4B     		ldr	r3, .L70+96
 173 00f2 1B68     		ldr	r3, [r3]
 174 00f4 8342     		cmp	r3, r0
 175 00f6 00F08381 		beq	.L28
 275:Src/Menu/FunctionsForButtons.c ****     if(character == *L"ш") return (TCHAR) 0xE8;
 176              		.loc 1 275 0
 177 00fa 8E4B     		ldr	r3, .L70+100
 178 00fc 1B68     		ldr	r3, [r3]
 179 00fe 8342     		cmp	r3, r0
 180 0100 00F08081 		beq	.L29
 276:Src/Menu/FunctionsForButtons.c ****     if(character == *L"щ") return (TCHAR) 0xE9;
 181              		.loc 1 276 0
 182 0104 8C4B     		ldr	r3, .L70+104
 183 0106 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccymXkh7.s 			page 9


 184 0108 8342     		cmp	r3, r0
 185 010a 00F07D81 		beq	.L30
 277:Src/Menu/FunctionsForButtons.c ****     if(character == *L"ъ") return (TCHAR) 0xEA;
 186              		.loc 1 277 0
 187 010e 8B4B     		ldr	r3, .L70+108
 188 0110 1B68     		ldr	r3, [r3]
 189 0112 8342     		cmp	r3, r0
 190 0114 00F07A81 		beq	.L31
 278:Src/Menu/FunctionsForButtons.c ****     if(character == *L"ы") return (TCHAR) 0xEB;
 191              		.loc 1 278 0
 192 0118 894B     		ldr	r3, .L70+112
 193 011a 1B68     		ldr	r3, [r3]
 194 011c 8342     		cmp	r3, r0
 195 011e 00F07781 		beq	.L32
 279:Src/Menu/FunctionsForButtons.c ****     if(character == *L"ь") return (TCHAR) 0xEC;
 196              		.loc 1 279 0
 197 0122 884B     		ldr	r3, .L70+116
 198 0124 1B68     		ldr	r3, [r3]
 199 0126 8342     		cmp	r3, r0
 200 0128 00F07481 		beq	.L33
 280:Src/Menu/FunctionsForButtons.c ****     if(character == *L"э") return (TCHAR) 0xED;
 201              		.loc 1 280 0
 202 012c 864B     		ldr	r3, .L70+120
 203 012e 1B68     		ldr	r3, [r3]
 204 0130 8342     		cmp	r3, r0
 205 0132 00F07181 		beq	.L34
 281:Src/Menu/FunctionsForButtons.c ****     if(character == *L"ю") return (TCHAR) 0xEE;
 206              		.loc 1 281 0
 207 0136 854B     		ldr	r3, .L70+124
 208 0138 1B68     		ldr	r3, [r3]
 209 013a 8342     		cmp	r3, r0
 210 013c 00F06E81 		beq	.L35
 282:Src/Menu/FunctionsForButtons.c ****     if(character == *L"я") return (TCHAR) 0xEF;
 211              		.loc 1 282 0
 212 0140 834B     		ldr	r3, .L70+128
 213 0142 1B68     		ldr	r3, [r3]
 214 0144 8342     		cmp	r3, r0
 215 0146 00F06B81 		beq	.L36
 283:Src/Menu/FunctionsForButtons.c ****     if(character == *L"А") return (TCHAR) 0x80;
 216              		.loc 1 283 0
 217 014a 824B     		ldr	r3, .L70+132
 218 014c 1B68     		ldr	r3, [r3]
 219 014e 8342     		cmp	r3, r0
 220 0150 00F06881 		beq	.L37
 284:Src/Menu/FunctionsForButtons.c ****     if(character == *L"Б") return (TCHAR) 0x81;
 221              		.loc 1 284 0
 222 0154 804B     		ldr	r3, .L70+136
 223 0156 1B68     		ldr	r3, [r3]
 224 0158 8342     		cmp	r3, r0
 225 015a 00F06581 		beq	.L38
 285:Src/Menu/FunctionsForButtons.c ****     if(character == *L"В") return (TCHAR) 0x82;
 226              		.loc 1 285 0
 227 015e 7F4B     		ldr	r3, .L70+140
 228 0160 1B68     		ldr	r3, [r3]
 229 0162 8342     		cmp	r3, r0
 230 0164 00F06281 		beq	.L39
 286:Src/Menu/FunctionsForButtons.c ****     if(character == *L"Г") return (TCHAR) 0x83;
ARM GAS  /tmp/ccymXkh7.s 			page 10


 231              		.loc 1 286 0
 232 0168 7D4B     		ldr	r3, .L70+144
 233 016a 1B68     		ldr	r3, [r3]
 234 016c 8342     		cmp	r3, r0
 235 016e 00F05F81 		beq	.L40
 287:Src/Menu/FunctionsForButtons.c ****     if(character == *L"Д") return (TCHAR) 0x84;
 236              		.loc 1 287 0
 237 0172 7C4B     		ldr	r3, .L70+148
 238 0174 1B68     		ldr	r3, [r3]
 239 0176 8342     		cmp	r3, r0
 240 0178 00F05C81 		beq	.L41
 288:Src/Menu/FunctionsForButtons.c ****     if(character == *L"Е") return (TCHAR) 0x85;
 241              		.loc 1 288 0
 242 017c 7A4B     		ldr	r3, .L70+152
 243 017e 1B68     		ldr	r3, [r3]
 244 0180 8342     		cmp	r3, r0
 245 0182 00F05981 		beq	.L42
 289:Src/Menu/FunctionsForButtons.c ****     if(character == *L"Ё") return (TCHAR) 0xF0;
 246              		.loc 1 289 0
 247 0186 794B     		ldr	r3, .L70+156
 248 0188 1B68     		ldr	r3, [r3]
 249 018a 8342     		cmp	r3, r0
 250 018c 00F05681 		beq	.L43
 290:Src/Menu/FunctionsForButtons.c ****     if(character == *L"Ж") return (TCHAR) 0x86;
 251              		.loc 1 290 0
 252 0190 774B     		ldr	r3, .L70+160
 253 0192 1B68     		ldr	r3, [r3]
 254 0194 8342     		cmp	r3, r0
 255 0196 00F05381 		beq	.L44
 291:Src/Menu/FunctionsForButtons.c ****     if(character == *L"З") return (TCHAR) 0x87;
 256              		.loc 1 291 0
 257 019a 764B     		ldr	r3, .L70+164
 258 019c 1B68     		ldr	r3, [r3]
 259 019e 8342     		cmp	r3, r0
 260 01a0 00F05081 		beq	.L45
 292:Src/Menu/FunctionsForButtons.c ****     if(character == *L"И") return (TCHAR) 0x88;
 261              		.loc 1 292 0
 262 01a4 744B     		ldr	r3, .L70+168
 263 01a6 1B68     		ldr	r3, [r3]
 264 01a8 8342     		cmp	r3, r0
 265 01aa 00F04D81 		beq	.L46
 293:Src/Menu/FunctionsForButtons.c ****     if(character == *L"Й") return (TCHAR) 0x89;
 266              		.loc 1 293 0
 267 01ae 734B     		ldr	r3, .L70+172
 268 01b0 1B68     		ldr	r3, [r3]
 269 01b2 8342     		cmp	r3, r0
 270 01b4 00F04A81 		beq	.L47
 294:Src/Menu/FunctionsForButtons.c ****     if(character == *L"К") return (TCHAR) 0x8A;
 271              		.loc 1 294 0
 272 01b8 714B     		ldr	r3, .L70+176
 273 01ba 1B68     		ldr	r3, [r3]
 274 01bc 8342     		cmp	r3, r0
 275 01be 00F04781 		beq	.L48
 295:Src/Menu/FunctionsForButtons.c ****     if(character == *L"Л") return (TCHAR) 0x8B;
 276              		.loc 1 295 0
 277 01c2 704B     		ldr	r3, .L70+180
 278 01c4 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccymXkh7.s 			page 11


 279 01c6 8342     		cmp	r3, r0
 280 01c8 00F04481 		beq	.L49
 296:Src/Menu/FunctionsForButtons.c ****     if(character == *L"М") return (TCHAR) 0x8C;
 281              		.loc 1 296 0
 282 01cc 6E4B     		ldr	r3, .L70+184
 283 01ce 1B68     		ldr	r3, [r3]
 284 01d0 8342     		cmp	r3, r0
 285 01d2 00F04181 		beq	.L50
 297:Src/Menu/FunctionsForButtons.c ****     if(character == *L"Н") return (TCHAR) 0x8D;
 286              		.loc 1 297 0
 287 01d6 6D4B     		ldr	r3, .L70+188
 288 01d8 1B68     		ldr	r3, [r3]
 289 01da 8342     		cmp	r3, r0
 290 01dc 00F03E81 		beq	.L51
 298:Src/Menu/FunctionsForButtons.c ****     if(character == *L"О") return (TCHAR) 0x8E;
 291              		.loc 1 298 0
 292 01e0 6B4B     		ldr	r3, .L70+192
 293 01e2 1B68     		ldr	r3, [r3]
 294 01e4 8342     		cmp	r3, r0
 295 01e6 00F03B81 		beq	.L52
 299:Src/Menu/FunctionsForButtons.c ****     if(character == *L"П") return (TCHAR) 0x8F;
 296              		.loc 1 299 0
 297 01ea 6A4B     		ldr	r3, .L70+196
 298 01ec 1B68     		ldr	r3, [r3]
 299 01ee 8342     		cmp	r3, r0
 300 01f0 00F03881 		beq	.L53
 300:Src/Menu/FunctionsForButtons.c ****     if(character == *L"Р") return (TCHAR) 0x90;
 301              		.loc 1 300 0
 302 01f4 684B     		ldr	r3, .L70+200
 303 01f6 1B68     		ldr	r3, [r3]
 304 01f8 8342     		cmp	r3, r0
 305 01fa 00F03581 		beq	.L54
 301:Src/Menu/FunctionsForButtons.c ****     if(character == *L"С") return (TCHAR) 0x91;
 306              		.loc 1 301 0
 307 01fe 674B     		ldr	r3, .L70+204
 308 0200 1B68     		ldr	r3, [r3]
 309 0202 8342     		cmp	r3, r0
 310 0204 00F03281 		beq	.L55
 302:Src/Menu/FunctionsForButtons.c ****     if(character == *L"Т") return (TCHAR) 0x92;
 311              		.loc 1 302 0
 312 0208 654B     		ldr	r3, .L70+208
 313 020a 1B68     		ldr	r3, [r3]
 314 020c 8342     		cmp	r3, r0
 315 020e 00F02F81 		beq	.L56
 303:Src/Menu/FunctionsForButtons.c ****     if(character == *L"У") return (TCHAR) 0x93;
 316              		.loc 1 303 0
 317 0212 644B     		ldr	r3, .L70+212
 318 0214 1B68     		ldr	r3, [r3]
 319 0216 8342     		cmp	r3, r0
 320 0218 00F02C81 		beq	.L57
 304:Src/Menu/FunctionsForButtons.c ****     if(character == *L"Ф") return (TCHAR) 0x94;
 321              		.loc 1 304 0
 322 021c 624B     		ldr	r3, .L70+216
 323 021e 1B68     		ldr	r3, [r3]
 324 0220 8342     		cmp	r3, r0
 325 0222 00F02981 		beq	.L58
 305:Src/Menu/FunctionsForButtons.c ****     if(character == *L"Х") return (TCHAR) 0x95;
ARM GAS  /tmp/ccymXkh7.s 			page 12


 326              		.loc 1 305 0
 327 0226 614B     		ldr	r3, .L70+220
 328 0228 1B68     		ldr	r3, [r3]
 329 022a 8342     		cmp	r3, r0
 330 022c 00F02681 		beq	.L59
 306:Src/Menu/FunctionsForButtons.c ****     if(character == *L"Ц") return (TCHAR) 0x96;
 331              		.loc 1 306 0
 332 0230 5F4B     		ldr	r3, .L70+224
 333 0232 1B68     		ldr	r3, [r3]
 334 0234 8342     		cmp	r3, r0
 335 0236 00F02381 		beq	.L60
 307:Src/Menu/FunctionsForButtons.c ****     if(character == *L"Ч") return (TCHAR) 0x97;
 336              		.loc 1 307 0
 337 023a 5E4B     		ldr	r3, .L70+228
 338 023c 1B68     		ldr	r3, [r3]
 339 023e 8342     		cmp	r3, r0
 340 0240 00F02081 		beq	.L61
 308:Src/Menu/FunctionsForButtons.c ****     if(character == *L"Ш") return (TCHAR) 0x98;
 341              		.loc 1 308 0
 342 0244 5C4B     		ldr	r3, .L70+232
 343 0246 1B68     		ldr	r3, [r3]
 344 0248 8342     		cmp	r3, r0
 345 024a 00F01D81 		beq	.L62
 309:Src/Menu/FunctionsForButtons.c ****     if(character == *L"Щ") return (TCHAR) 0x99;
 346              		.loc 1 309 0
 347 024e 5B4B     		ldr	r3, .L70+236
 348 0250 1B68     		ldr	r3, [r3]
 349 0252 8342     		cmp	r3, r0
 350 0254 00F01A81 		beq	.L63
 310:Src/Menu/FunctionsForButtons.c ****     if(character == *L"Ъ") return (TCHAR) 0x9A;
 351              		.loc 1 310 0
 352 0258 594B     		ldr	r3, .L70+240
 353 025a 1B68     		ldr	r3, [r3]
 354 025c 8342     		cmp	r3, r0
 355 025e 00F01781 		beq	.L64
 311:Src/Menu/FunctionsForButtons.c ****     if(character == *L"Ы") return (TCHAR) 0x9B;
 356              		.loc 1 311 0
 357 0262 584B     		ldr	r3, .L70+244
 358 0264 1B68     		ldr	r3, [r3]
 359 0266 8342     		cmp	r3, r0
 360 0268 00F01481 		beq	.L65
 312:Src/Menu/FunctionsForButtons.c ****     if(character == *L"Ь") return (TCHAR) 0x9C;
 361              		.loc 1 312 0
 362 026c 564B     		ldr	r3, .L70+248
 363 026e 1B68     		ldr	r3, [r3]
 364 0270 8342     		cmp	r3, r0
 365 0272 00F01181 		beq	.L66
 313:Src/Menu/FunctionsForButtons.c ****     if(character == *L"Э") return (TCHAR) 0x9D;
 366              		.loc 1 313 0
 367 0276 554B     		ldr	r3, .L70+252
 368 0278 1B68     		ldr	r3, [r3]
 369 027a 8342     		cmp	r3, r0
 370 027c 00F00E81 		beq	.L67
 314:Src/Menu/FunctionsForButtons.c ****     if(character == *L"Ю") return (TCHAR) 0x9E;
 371              		.loc 1 314 0
 372 0280 534B     		ldr	r3, .L70+256
 373 0282 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccymXkh7.s 			page 13


 374 0284 8342     		cmp	r3, r0
 375 0286 00F00B81 		beq	.L68
 315:Src/Menu/FunctionsForButtons.c ****     if(character == *L"Я") return (TCHAR) 0x9F;
 376              		.loc 1 315 0
 377 028a 524B     		ldr	r3, .L70+260
 378 028c 1B68     		ldr	r3, [r3]
 379 028e 8342     		cmp	r3, r0
 380 0290 00F00881 		beq	.L69
 316:Src/Menu/FunctionsForButtons.c ****     return (TCHAR) character;
 381              		.loc 1 316 0
 382 0294 C0B2     		uxtb	r0, r0
 383              	.LVL1:
 384 0296 7047     		bx	lr
 385              	.LVL2:
 386              	.L4:
 250:Src/Menu/FunctionsForButtons.c ****     if(character == *L"б") return (TCHAR) 0xA1;
 387              		.loc 1 250 0
 388 0298 A020     		movs	r0, #160
 389              	.LVL3:
 390 029a 7047     		bx	lr
 391              	.LVL4:
 392              	.L5:
 251:Src/Menu/FunctionsForButtons.c ****     if(character == *L"в") return (TCHAR) 0xA2;
 393              		.loc 1 251 0
 394 029c A120     		movs	r0, #161
 395              	.LVL5:
 396 029e 7047     		bx	lr
 397              	.LVL6:
 398              	.L6:
 252:Src/Menu/FunctionsForButtons.c ****     if(character == *L"г") return (TCHAR) 0xA3;
 399              		.loc 1 252 0
 400 02a0 A220     		movs	r0, #162
 401              	.LVL7:
 402 02a2 7047     		bx	lr
 403              	.LVL8:
 404              	.L7:
 253:Src/Menu/FunctionsForButtons.c ****     if(character == *L"д") return (TCHAR) 0xA4;
 405              		.loc 1 253 0
 406 02a4 A320     		movs	r0, #163
 407              	.LVL9:
 408 02a6 7047     		bx	lr
 409              	.LVL10:
 410              	.L8:
 254:Src/Menu/FunctionsForButtons.c ****     if(character == *L"е") return (TCHAR) 0xA5;
 411              		.loc 1 254 0
 412 02a8 A420     		movs	r0, #164
 413              	.LVL11:
 414 02aa 7047     		bx	lr
 415              	.LVL12:
 416              	.L9:
 255:Src/Menu/FunctionsForButtons.c ****     if(character == *L"ё") return (TCHAR) 0xF1;
 417              		.loc 1 255 0
 418 02ac A520     		movs	r0, #165
 419              	.LVL13:
 420 02ae 7047     		bx	lr
 421              	.LVL14:
 422              	.L10:
ARM GAS  /tmp/ccymXkh7.s 			page 14


 256:Src/Menu/FunctionsForButtons.c ****     if(character == *L"ж") return (TCHAR) 0xA6;
 423              		.loc 1 256 0
 424 02b0 F120     		movs	r0, #241
 425              	.LVL15:
 426 02b2 7047     		bx	lr
 427              	.LVL16:
 428              	.L11:
 257:Src/Menu/FunctionsForButtons.c ****     if(character == *L"з") return (TCHAR) 0xA7;
 429              		.loc 1 257 0
 430 02b4 A620     		movs	r0, #166
 431              	.LVL17:
 432 02b6 7047     		bx	lr
 433              	.LVL18:
 434              	.L12:
 258:Src/Menu/FunctionsForButtons.c ****     if(character == *L"и") return (TCHAR) 0xA8;
 435              		.loc 1 258 0
 436 02b8 A720     		movs	r0, #167
 437              	.LVL19:
 438 02ba 7047     		bx	lr
 439              	.LVL20:
 440              	.L13:
 259:Src/Menu/FunctionsForButtons.c ****     if(character == *L"й") return (TCHAR) 0xA9;
 441              		.loc 1 259 0
 442 02bc A820     		movs	r0, #168
 443              	.LVL21:
 444 02be 7047     		bx	lr
 445              	.LVL22:
 446              	.L14:
 260:Src/Menu/FunctionsForButtons.c ****     if(character == *L"к") return (TCHAR) 0xAA;
 447              		.loc 1 260 0
 448 02c0 A920     		movs	r0, #169
 449              	.LVL23:
 450 02c2 7047     		bx	lr
 451              	.LVL24:
 452              	.L15:
 261:Src/Menu/FunctionsForButtons.c ****     if(character == *L"л") return (TCHAR) 0xAB;
 453              		.loc 1 261 0
 454 02c4 AA20     		movs	r0, #170
 455              	.LVL25:
 456 02c6 7047     		bx	lr
 457              	.LVL26:
 458              	.L16:
 262:Src/Menu/FunctionsForButtons.c ****     if(character == *L"м") return (TCHAR) 0xAC;
 459              		.loc 1 262 0
 460 02c8 AB20     		movs	r0, #171
 461              	.LVL27:
 462 02ca 7047     		bx	lr
 463              	.LVL28:
 464              	.L17:
 263:Src/Menu/FunctionsForButtons.c ****     if(character == *L"н") return (TCHAR) 0xAD;
 465              		.loc 1 263 0
 466 02cc AC20     		movs	r0, #172
 467              	.LVL29:
 468 02ce 7047     		bx	lr
 469              	.L71:
 470              		.align	2
 471              	.L70:
ARM GAS  /tmp/ccymXkh7.s 			page 15


 472 02d0 00000000 		.word	.LC0
 473 02d4 08000000 		.word	.LC1
 474 02d8 10000000 		.word	.LC2
 475 02dc 18000000 		.word	.LC3
 476 02e0 20000000 		.word	.LC4
 477 02e4 28000000 		.word	.LC5
 478 02e8 30000000 		.word	.LC6
 479 02ec 38000000 		.word	.LC7
 480 02f0 40000000 		.word	.LC8
 481 02f4 48000000 		.word	.LC9
 482 02f8 50000000 		.word	.LC10
 483 02fc 58000000 		.word	.LC11
 484 0300 60000000 		.word	.LC12
 485 0304 68000000 		.word	.LC13
 486 0308 70000000 		.word	.LC14
 487 030c 78000000 		.word	.LC15
 488 0310 80000000 		.word	.LC16
 489 0314 88000000 		.word	.LC17
 490 0318 90000000 		.word	.LC18
 491 031c 98000000 		.word	.LC19
 492 0320 A0000000 		.word	.LC20
 493 0324 A8000000 		.word	.LC21
 494 0328 B0000000 		.word	.LC22
 495 032c B8000000 		.word	.LC23
 496 0330 C0000000 		.word	.LC24
 497 0334 C8000000 		.word	.LC25
 498 0338 D0000000 		.word	.LC26
 499 033c D8000000 		.word	.LC27
 500 0340 E0000000 		.word	.LC28
 501 0344 E8000000 		.word	.LC29
 502 0348 F0000000 		.word	.LC30
 503 034c F8000000 		.word	.LC31
 504 0350 00010000 		.word	.LC32
 505 0354 08010000 		.word	.LC33
 506 0358 10010000 		.word	.LC34
 507 035c 18010000 		.word	.LC35
 508 0360 20010000 		.word	.LC36
 509 0364 28010000 		.word	.LC37
 510 0368 30010000 		.word	.LC38
 511 036c 38010000 		.word	.LC39
 512 0370 40010000 		.word	.LC40
 513 0374 48010000 		.word	.LC41
 514 0378 50010000 		.word	.LC42
 515 037c 58010000 		.word	.LC43
 516 0380 60010000 		.word	.LC44
 517 0384 68010000 		.word	.LC45
 518 0388 70010000 		.word	.LC46
 519 038c 78010000 		.word	.LC47
 520 0390 80010000 		.word	.LC48
 521 0394 88010000 		.word	.LC49
 522 0398 90010000 		.word	.LC50
 523 039c 98010000 		.word	.LC51
 524 03a0 A0010000 		.word	.LC52
 525 03a4 A8010000 		.word	.LC53
 526 03a8 B0010000 		.word	.LC54
 527 03ac B8010000 		.word	.LC55
 528 03b0 C0010000 		.word	.LC56
ARM GAS  /tmp/ccymXkh7.s 			page 16


 529 03b4 C8010000 		.word	.LC57
 530 03b8 D0010000 		.word	.LC58
 531 03bc D8010000 		.word	.LC59
 532 03c0 E0010000 		.word	.LC60
 533 03c4 E8010000 		.word	.LC61
 534 03c8 F0010000 		.word	.LC62
 535 03cc F8010000 		.word	.LC63
 536 03d0 00020000 		.word	.LC64
 537 03d4 08020000 		.word	.LC65
 538              	.LVL30:
 539              	.L18:
 264:Src/Menu/FunctionsForButtons.c ****     if(character == *L"о") return (TCHAR) 0xAE;
 540              		.loc 1 264 0
 541 03d8 AD20     		movs	r0, #173
 542              	.LVL31:
 543 03da 7047     		bx	lr
 544              	.LVL32:
 545              	.L19:
 265:Src/Menu/FunctionsForButtons.c ****     if(character == *L"п") return (TCHAR) 0xAF;
 546              		.loc 1 265 0
 547 03dc AE20     		movs	r0, #174
 548              	.LVL33:
 549 03de 7047     		bx	lr
 550              	.LVL34:
 551              	.L20:
 266:Src/Menu/FunctionsForButtons.c ****     if(character == *L"р") return (TCHAR) 0xE0;
 552              		.loc 1 266 0
 553 03e0 AF20     		movs	r0, #175
 554              	.LVL35:
 555 03e2 7047     		bx	lr
 556              	.LVL36:
 557              	.L21:
 267:Src/Menu/FunctionsForButtons.c ****     if(character == *L"с") return (TCHAR) 0xE1;
 558              		.loc 1 267 0
 559 03e4 E020     		movs	r0, #224
 560              	.LVL37:
 561 03e6 7047     		bx	lr
 562              	.LVL38:
 563              	.L22:
 268:Src/Menu/FunctionsForButtons.c ****     if(character == *L"т") return (TCHAR) 0xE2;
 564              		.loc 1 268 0
 565 03e8 E120     		movs	r0, #225
 566              	.LVL39:
 567 03ea 7047     		bx	lr
 568              	.LVL40:
 569              	.L23:
 269:Src/Menu/FunctionsForButtons.c ****     if(character == *L"у") return (TCHAR) 0xE3;
 570              		.loc 1 269 0
 571 03ec E220     		movs	r0, #226
 572              	.LVL41:
 573 03ee 7047     		bx	lr
 574              	.LVL42:
 575              	.L24:
 270:Src/Menu/FunctionsForButtons.c ****     if(character == *L"ф") return (TCHAR) 0xE4;
 576              		.loc 1 270 0
 577 03f0 E320     		movs	r0, #227
 578              	.LVL43:
ARM GAS  /tmp/ccymXkh7.s 			page 17


 579 03f2 7047     		bx	lr
 580              	.LVL44:
 581              	.L25:
 271:Src/Menu/FunctionsForButtons.c ****     if(character == *L"х") return (TCHAR) 0xE5;
 582              		.loc 1 271 0
 583 03f4 E420     		movs	r0, #228
 584              	.LVL45:
 585 03f6 7047     		bx	lr
 586              	.LVL46:
 587              	.L26:
 272:Src/Menu/FunctionsForButtons.c ****     if(character == *L"ц") return (TCHAR) 0xE6;
 588              		.loc 1 272 0
 589 03f8 E520     		movs	r0, #229
 590              	.LVL47:
 591 03fa 7047     		bx	lr
 592              	.LVL48:
 593              	.L27:
 273:Src/Menu/FunctionsForButtons.c ****     if(character == *L"ч") return (TCHAR) 0xE7;
 594              		.loc 1 273 0
 595 03fc E620     		movs	r0, #230
 596              	.LVL49:
 597 03fe 7047     		bx	lr
 598              	.LVL50:
 599              	.L28:
 274:Src/Menu/FunctionsForButtons.c ****     if(character == *L"ш") return (TCHAR) 0xE8;
 600              		.loc 1 274 0
 601 0400 E720     		movs	r0, #231
 602              	.LVL51:
 603 0402 7047     		bx	lr
 604              	.LVL52:
 605              	.L29:
 275:Src/Menu/FunctionsForButtons.c ****     if(character == *L"щ") return (TCHAR) 0xE9;
 606              		.loc 1 275 0
 607 0404 E820     		movs	r0, #232
 608              	.LVL53:
 609 0406 7047     		bx	lr
 610              	.LVL54:
 611              	.L30:
 276:Src/Menu/FunctionsForButtons.c ****     if(character == *L"ъ") return (TCHAR) 0xEA;
 612              		.loc 1 276 0
 613 0408 E920     		movs	r0, #233
 614              	.LVL55:
 615 040a 7047     		bx	lr
 616              	.LVL56:
 617              	.L31:
 277:Src/Menu/FunctionsForButtons.c ****     if(character == *L"ы") return (TCHAR) 0xEB;
 618              		.loc 1 277 0
 619 040c EA20     		movs	r0, #234
 620              	.LVL57:
 621 040e 7047     		bx	lr
 622              	.LVL58:
 623              	.L32:
 278:Src/Menu/FunctionsForButtons.c ****     if(character == *L"ь") return (TCHAR) 0xEC;
 624              		.loc 1 278 0
 625 0410 EB20     		movs	r0, #235
 626              	.LVL59:
 627 0412 7047     		bx	lr
ARM GAS  /tmp/ccymXkh7.s 			page 18


 628              	.LVL60:
 629              	.L33:
 279:Src/Menu/FunctionsForButtons.c ****     if(character == *L"э") return (TCHAR) 0xED;
 630              		.loc 1 279 0
 631 0414 EC20     		movs	r0, #236
 632              	.LVL61:
 633 0416 7047     		bx	lr
 634              	.LVL62:
 635              	.L34:
 280:Src/Menu/FunctionsForButtons.c ****     if(character == *L"ю") return (TCHAR) 0xEE;
 636              		.loc 1 280 0
 637 0418 ED20     		movs	r0, #237
 638              	.LVL63:
 639 041a 7047     		bx	lr
 640              	.LVL64:
 641              	.L35:
 281:Src/Menu/FunctionsForButtons.c ****     if(character == *L"я") return (TCHAR) 0xEF;
 642              		.loc 1 281 0
 643 041c EE20     		movs	r0, #238
 644              	.LVL65:
 645 041e 7047     		bx	lr
 646              	.LVL66:
 647              	.L36:
 282:Src/Menu/FunctionsForButtons.c ****     if(character == *L"А") return (TCHAR) 0x80;
 648              		.loc 1 282 0
 649 0420 EF20     		movs	r0, #239
 650              	.LVL67:
 651 0422 7047     		bx	lr
 652              	.LVL68:
 653              	.L37:
 283:Src/Menu/FunctionsForButtons.c ****     if(character == *L"Б") return (TCHAR) 0x81;
 654              		.loc 1 283 0
 655 0424 8020     		movs	r0, #128
 656              	.LVL69:
 657 0426 7047     		bx	lr
 658              	.LVL70:
 659              	.L38:
 284:Src/Menu/FunctionsForButtons.c ****     if(character == *L"В") return (TCHAR) 0x82;
 660              		.loc 1 284 0
 661 0428 8120     		movs	r0, #129
 662              	.LVL71:
 663 042a 7047     		bx	lr
 664              	.LVL72:
 665              	.L39:
 285:Src/Menu/FunctionsForButtons.c ****     if(character == *L"Г") return (TCHAR) 0x83;
 666              		.loc 1 285 0
 667 042c 8220     		movs	r0, #130
 668              	.LVL73:
 669 042e 7047     		bx	lr
 670              	.LVL74:
 671              	.L40:
 286:Src/Menu/FunctionsForButtons.c ****     if(character == *L"Д") return (TCHAR) 0x84;
 672              		.loc 1 286 0
 673 0430 8320     		movs	r0, #131
 674              	.LVL75:
 675 0432 7047     		bx	lr
 676              	.LVL76:
ARM GAS  /tmp/ccymXkh7.s 			page 19


 677              	.L41:
 287:Src/Menu/FunctionsForButtons.c ****     if(character == *L"Е") return (TCHAR) 0x85;
 678              		.loc 1 287 0
 679 0434 8420     		movs	r0, #132
 680              	.LVL77:
 681 0436 7047     		bx	lr
 682              	.LVL78:
 683              	.L42:
 288:Src/Menu/FunctionsForButtons.c ****     if(character == *L"Ё") return (TCHAR) 0xF0;
 684              		.loc 1 288 0
 685 0438 8520     		movs	r0, #133
 686              	.LVL79:
 687 043a 7047     		bx	lr
 688              	.LVL80:
 689              	.L43:
 289:Src/Menu/FunctionsForButtons.c ****     if(character == *L"Ж") return (TCHAR) 0x86;
 690              		.loc 1 289 0
 691 043c F020     		movs	r0, #240
 692              	.LVL81:
 693 043e 7047     		bx	lr
 694              	.LVL82:
 695              	.L44:
 290:Src/Menu/FunctionsForButtons.c ****     if(character == *L"З") return (TCHAR) 0x87;
 696              		.loc 1 290 0
 697 0440 8620     		movs	r0, #134
 698              	.LVL83:
 699 0442 7047     		bx	lr
 700              	.LVL84:
 701              	.L45:
 291:Src/Menu/FunctionsForButtons.c ****     if(character == *L"И") return (TCHAR) 0x88;
 702              		.loc 1 291 0
 703 0444 8720     		movs	r0, #135
 704              	.LVL85:
 705 0446 7047     		bx	lr
 706              	.LVL86:
 707              	.L46:
 292:Src/Menu/FunctionsForButtons.c ****     if(character == *L"Й") return (TCHAR) 0x89;
 708              		.loc 1 292 0
 709 0448 8820     		movs	r0, #136
 710              	.LVL87:
 711 044a 7047     		bx	lr
 712              	.LVL88:
 713              	.L47:
 293:Src/Menu/FunctionsForButtons.c ****     if(character == *L"К") return (TCHAR) 0x8A;
 714              		.loc 1 293 0
 715 044c 8920     		movs	r0, #137
 716              	.LVL89:
 717 044e 7047     		bx	lr
 718              	.LVL90:
 719              	.L48:
 294:Src/Menu/FunctionsForButtons.c ****     if(character == *L"Л") return (TCHAR) 0x8B;
 720              		.loc 1 294 0
 721 0450 8A20     		movs	r0, #138
 722              	.LVL91:
 723 0452 7047     		bx	lr
 724              	.LVL92:
 725              	.L49:
ARM GAS  /tmp/ccymXkh7.s 			page 20


 295:Src/Menu/FunctionsForButtons.c ****     if(character == *L"М") return (TCHAR) 0x8C;
 726              		.loc 1 295 0
 727 0454 8B20     		movs	r0, #139
 728              	.LVL93:
 729 0456 7047     		bx	lr
 730              	.LVL94:
 731              	.L50:
 296:Src/Menu/FunctionsForButtons.c ****     if(character == *L"Н") return (TCHAR) 0x8D;
 732              		.loc 1 296 0
 733 0458 8C20     		movs	r0, #140
 734              	.LVL95:
 735 045a 7047     		bx	lr
 736              	.LVL96:
 737              	.L51:
 297:Src/Menu/FunctionsForButtons.c ****     if(character == *L"О") return (TCHAR) 0x8E;
 738              		.loc 1 297 0
 739 045c 8D20     		movs	r0, #141
 740              	.LVL97:
 741 045e 7047     		bx	lr
 742              	.LVL98:
 743              	.L52:
 298:Src/Menu/FunctionsForButtons.c ****     if(character == *L"П") return (TCHAR) 0x8F;
 744              		.loc 1 298 0
 745 0460 8E20     		movs	r0, #142
 746              	.LVL99:
 747 0462 7047     		bx	lr
 748              	.LVL100:
 749              	.L53:
 299:Src/Menu/FunctionsForButtons.c ****     if(character == *L"Р") return (TCHAR) 0x90;
 750              		.loc 1 299 0
 751 0464 8F20     		movs	r0, #143
 752              	.LVL101:
 753 0466 7047     		bx	lr
 754              	.LVL102:
 755              	.L54:
 300:Src/Menu/FunctionsForButtons.c ****     if(character == *L"С") return (TCHAR) 0x91;
 756              		.loc 1 300 0
 757 0468 9020     		movs	r0, #144
 758              	.LVL103:
 759 046a 7047     		bx	lr
 760              	.LVL104:
 761              	.L55:
 301:Src/Menu/FunctionsForButtons.c ****     if(character == *L"Т") return (TCHAR) 0x92;
 762              		.loc 1 301 0
 763 046c 9120     		movs	r0, #145
 764              	.LVL105:
 765 046e 7047     		bx	lr
 766              	.LVL106:
 767              	.L56:
 302:Src/Menu/FunctionsForButtons.c ****     if(character == *L"У") return (TCHAR) 0x93;
 768              		.loc 1 302 0
 769 0470 9220     		movs	r0, #146
 770              	.LVL107:
 771 0472 7047     		bx	lr
 772              	.LVL108:
 773              	.L57:
 303:Src/Menu/FunctionsForButtons.c ****     if(character == *L"Ф") return (TCHAR) 0x94;
ARM GAS  /tmp/ccymXkh7.s 			page 21


 774              		.loc 1 303 0
 775 0474 9320     		movs	r0, #147
 776              	.LVL109:
 777 0476 7047     		bx	lr
 778              	.LVL110:
 779              	.L58:
 304:Src/Menu/FunctionsForButtons.c ****     if(character == *L"Х") return (TCHAR) 0x95;
 780              		.loc 1 304 0
 781 0478 9420     		movs	r0, #148
 782              	.LVL111:
 783 047a 7047     		bx	lr
 784              	.LVL112:
 785              	.L59:
 305:Src/Menu/FunctionsForButtons.c ****     if(character == *L"Ц") return (TCHAR) 0x96;
 786              		.loc 1 305 0
 787 047c 9520     		movs	r0, #149
 788              	.LVL113:
 789 047e 7047     		bx	lr
 790              	.LVL114:
 791              	.L60:
 306:Src/Menu/FunctionsForButtons.c ****     if(character == *L"Ч") return (TCHAR) 0x97;
 792              		.loc 1 306 0
 793 0480 9620     		movs	r0, #150
 794              	.LVL115:
 795 0482 7047     		bx	lr
 796              	.LVL116:
 797              	.L61:
 307:Src/Menu/FunctionsForButtons.c ****     if(character == *L"Ш") return (TCHAR) 0x98;
 798              		.loc 1 307 0
 799 0484 9720     		movs	r0, #151
 800              	.LVL117:
 801 0486 7047     		bx	lr
 802              	.LVL118:
 803              	.L62:
 308:Src/Menu/FunctionsForButtons.c ****     if(character == *L"Щ") return (TCHAR) 0x99;
 804              		.loc 1 308 0
 805 0488 9820     		movs	r0, #152
 806              	.LVL119:
 807 048a 7047     		bx	lr
 808              	.LVL120:
 809              	.L63:
 309:Src/Menu/FunctionsForButtons.c ****     if(character == *L"Ъ") return (TCHAR) 0x9A;
 810              		.loc 1 309 0
 811 048c 9920     		movs	r0, #153
 812              	.LVL121:
 813 048e 7047     		bx	lr
 814              	.LVL122:
 815              	.L64:
 310:Src/Menu/FunctionsForButtons.c ****     if(character == *L"Ы") return (TCHAR) 0x9B;
 816              		.loc 1 310 0
 817 0490 9A20     		movs	r0, #154
 818              	.LVL123:
 819 0492 7047     		bx	lr
 820              	.LVL124:
 821              	.L65:
 311:Src/Menu/FunctionsForButtons.c ****     if(character == *L"Ь") return (TCHAR) 0x9C;
 822              		.loc 1 311 0
ARM GAS  /tmp/ccymXkh7.s 			page 22


 823 0494 9B20     		movs	r0, #155
 824              	.LVL125:
 825 0496 7047     		bx	lr
 826              	.LVL126:
 827              	.L66:
 312:Src/Menu/FunctionsForButtons.c ****     if(character == *L"Э") return (TCHAR) 0x9D;
 828              		.loc 1 312 0
 829 0498 9C20     		movs	r0, #156
 830              	.LVL127:
 831 049a 7047     		bx	lr
 832              	.LVL128:
 833              	.L67:
 313:Src/Menu/FunctionsForButtons.c ****     if(character == *L"Ю") return (TCHAR) 0x9E;
 834              		.loc 1 313 0
 835 049c 9D20     		movs	r0, #157
 836              	.LVL129:
 837 049e 7047     		bx	lr
 838              	.LVL130:
 839              	.L68:
 314:Src/Menu/FunctionsForButtons.c ****     if(character == *L"Я") return (TCHAR) 0x9F;
 840              		.loc 1 314 0
 841 04a0 9E20     		movs	r0, #158
 842              	.LVL131:
 843 04a2 7047     		bx	lr
 844              	.LVL132:
 845              	.L69:
 315:Src/Menu/FunctionsForButtons.c ****     return (TCHAR) character;
 846              		.loc 1 315 0
 847 04a4 9F20     		movs	r0, #159
 848              	.LVL133:
 317:Src/Menu/FunctionsForButtons.c **** }
 849              		.loc 1 317 0
 850 04a6 7047     		bx	lr
 851              		.cfi_endproc
 852              	.LFE88:
 854              		.section	.text.getFileNameTCHAR,"ax",%progbits
 855              		.align	1
 856              		.syntax unified
 857              		.thumb
 858              		.thumb_func
 859              		.fpu softvfp
 861              	getFileNameTCHAR:
 862              	.LFB89:
 318:Src/Menu/FunctionsForButtons.c **** 
 319:Src/Menu/FunctionsForButtons.c **** static void getFileNameTCHAR(TCHAR* nameTCHAR)
 320:Src/Menu/FunctionsForButtons.c **** {
 863              		.loc 1 320 0
 864              		.cfi_startproc
 865              		@ args = 0, pretend = 0, frame = 0
 866              		@ frame_needed = 0, uses_anonymous_args = 0
 867              	.LVL134:
 868 0000 70B5     		push	{r4, r5, r6, lr}
 869              	.LCFI0:
 870              		.cfi_def_cfa_offset 16
 871              		.cfi_offset 4, -16
 872              		.cfi_offset 5, -12
 873              		.cfi_offset 6, -8
ARM GAS  /tmp/ccymXkh7.s 			page 23


 874              		.cfi_offset 14, -4
 875 0002 0646     		mov	r6, r0
 876              	.LVL135:
 321:Src/Menu/FunctionsForButtons.c ****     int letterNember;
 322:Src/Menu/FunctionsForButtons.c ****     for (letterNember = 0; letterNember < MAX_WIDE_NAME_LENGTH-1; letterNember++)
 877              		.loc 1 322 0
 878 0004 0024     		movs	r4, #0
 879 0006 08E0     		b	.L73
 880              	.LVL136:
 881              	.L74:
 323:Src/Menu/FunctionsForButtons.c ****         nameTCHAR[letterNember] = wchar_t2TCHAR(getName_Menu()[letterNember+1]);
 882              		.loc 1 323 0 discriminator 3
 883 0008 FFF7FEFF 		bl	getName_Menu
 884              	.LVL137:
 885 000c 651C     		adds	r5, r4, #1
 886 000e 50F82500 		ldr	r0, [r0, r5, lsl #2]
 887 0012 FFF7FEFF 		bl	wchar_t2TCHAR
 888              	.LVL138:
 889 0016 3055     		strb	r0, [r6, r4]
 322:Src/Menu/FunctionsForButtons.c ****         nameTCHAR[letterNember] = wchar_t2TCHAR(getName_Menu()[letterNember+1]);
 890              		.loc 1 322 0 discriminator 3
 891 0018 2C46     		mov	r4, r5
 892              	.LVL139:
 893              	.L73:
 322:Src/Menu/FunctionsForButtons.c ****         nameTCHAR[letterNember] = wchar_t2TCHAR(getName_Menu()[letterNember+1]);
 894              		.loc 1 322 0 is_stmt 0 discriminator 1
 895 001a 622C     		cmp	r4, #98
 896 001c F4DD     		ble	.L74
 324:Src/Menu/FunctionsForButtons.c **** }
 897              		.loc 1 324 0 is_stmt 1
 898 001e 70BD     		pop	{r4, r5, r6, pc}
 899              		.cfi_endproc
 900              	.LFE89:
 902              		.section	.text.simpleNavigationDown_Menu,"ax",%progbits
 903              		.align	1
 904              		.global	simpleNavigationDown_Menu
 905              		.syntax unified
 906              		.thumb
 907              		.thumb_func
 908              		.fpu softvfp
 910              	simpleNavigationDown_Menu:
 911              	.LFB66:
  21:Src/Menu/FunctionsForButtons.c ****     if (!ThereIsNodeBelow_Menu())
 912              		.loc 1 21 0
 913              		.cfi_startproc
 914              		@ args = 0, pretend = 0, frame = 0
 915              		@ frame_needed = 0, uses_anonymous_args = 0
 916 0000 10B5     		push	{r4, lr}
 917              	.LCFI1:
 918              		.cfi_def_cfa_offset 8
 919              		.cfi_offset 4, -8
 920              		.cfi_offset 14, -4
  22:Src/Menu/FunctionsForButtons.c ****         return;
 921              		.loc 1 22 0
 922 0002 FFF7FEFF 		bl	ThereIsNodeBelow_Menu
 923              	.LVL140:
 924 0006 00B9     		cbnz	r0, .L81
ARM GAS  /tmp/ccymXkh7.s 			page 24


 925              	.L76:
  57:Src/Menu/FunctionsForButtons.c **** 
 926              		.loc 1 57 0
 927 0008 10BD     		pop	{r4, pc}
 928              	.L81:
  25:Src/Menu/FunctionsForButtons.c ****     {
 929              		.loc 1 25 0
 930 000a FFF7FEFF 		bl	ThereIsNodeAbove_Menu
 931              	.LVL141:
 932 000e 88B3     		cbz	r0, .L82
  34:Src/Menu/FunctionsForButtons.c ****     if (!ThereIsNodeBelow_Menu())
 933              		.loc 1 34 0
 934 0010 FFF7FEFF 		bl	moveDown_Menu
 935              	.LVL142:
  35:Src/Menu/FunctionsForButtons.c ****     {
 936              		.loc 1 35 0
 937 0014 FFF7FEFF 		bl	ThereIsNodeBelow_Menu
 938              	.LVL143:
 939 0018 0028     		cmp	r0, #0
 940 001a 45D0     		beq	.L83
  45:Src/Menu/FunctionsForButtons.c ****     putLine_TextConverter_LCD(getName_Menu(), 2);   updateLine_TextConverter_LCD(2);
 941              		.loc 1 45 0
 942 001c FFF7FEFF 		bl	moveUp_Menu
 943              	.LVL144:
  46:Src/Menu/FunctionsForButtons.c ****     moveDown_Menu();
 944              		.loc 1 46 0
 945 0020 FFF7FEFF 		bl	getName_Menu
 946              	.LVL145:
 947 0024 0221     		movs	r1, #2
 948 0026 FFF7FEFF 		bl	putLine_TextConverter_LCD
 949              	.LVL146:
 950 002a 0220     		movs	r0, #2
 951 002c FFF7FEFF 		bl	updateLine_TextConverter_LCD
 952              	.LVL147:
  47:Src/Menu/FunctionsForButtons.c ****     wchar_t* currName = (wchar_t*) getName_Menu();  currName[0] = *L">";
 953              		.loc 1 47 0
 954 0030 FFF7FEFF 		bl	moveDown_Menu
 955              	.LVL148:
  48:Src/Menu/FunctionsForButtons.c ****     putLine_TextConverter_LCD(currName, 3);         updateLine_TextConverter_LCD(3);    currName[0]
 956              		.loc 1 48 0
 957 0034 FFF7FEFF 		bl	getName_Menu
 958              	.LVL149:
 959 0038 0446     		mov	r4, r0
 960              	.LVL150:
 961 003a 294B     		ldr	r3, .L84
 962 003c 1B68     		ldr	r3, [r3]
 963 003e 0360     		str	r3, [r0]
  49:Src/Menu/FunctionsForButtons.c ****     if (ThereIsNodeBelow_Menu())
 964              		.loc 1 49 0
 965 0040 0321     		movs	r1, #3
 966 0042 FFF7FEFF 		bl	putLine_TextConverter_LCD
 967              	.LVL151:
 968 0046 0320     		movs	r0, #3
 969 0048 FFF7FEFF 		bl	updateLine_TextConverter_LCD
 970              	.LVL152:
 971 004c 254B     		ldr	r3, .L84+4
 972 004e 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccymXkh7.s 			page 25


 973 0050 2360     		str	r3, [r4]
  50:Src/Menu/FunctionsForButtons.c ****     {
 974              		.loc 1 50 0
 975 0052 FFF7FEFF 		bl	ThereIsNodeBelow_Menu
 976              	.LVL153:
 977 0056 0028     		cmp	r0, #0
 978 0058 D6D0     		beq	.L76
  52:Src/Menu/FunctionsForButtons.c ****         putLine_TextConverter_LCD(getName_Menu(), 4);   updateLine_TextConverter_LCD(4);
 979              		.loc 1 52 0
 980 005a FFF7FEFF 		bl	moveDown_Menu
 981              	.LVL154:
  53:Src/Menu/FunctionsForButtons.c ****         moveUp_Menu();
 982              		.loc 1 53 0
 983 005e FFF7FEFF 		bl	getName_Menu
 984              	.LVL155:
 985 0062 0421     		movs	r1, #4
 986 0064 FFF7FEFF 		bl	putLine_TextConverter_LCD
 987              	.LVL156:
 988 0068 0420     		movs	r0, #4
 989 006a FFF7FEFF 		bl	updateLine_TextConverter_LCD
 990              	.LVL157:
  54:Src/Menu/FunctionsForButtons.c ****         return;
 991              		.loc 1 54 0
 992 006e FFF7FEFF 		bl	moveUp_Menu
 993              	.LVL158:
  55:Src/Menu/FunctionsForButtons.c ****     }
 994              		.loc 1 55 0
 995 0072 C9E7     		b	.L76
 996              	.LVL159:
 997              	.L82:
 998              	.LBB2:
  27:Src/Menu/FunctionsForButtons.c ****         moveDown_Menu();
 999              		.loc 1 27 0
 1000 0074 FFF7FEFF 		bl	getName_Menu
 1001              	.LVL160:
 1002 0078 0221     		movs	r1, #2
 1003 007a FFF7FEFF 		bl	putLine_TextConverter_LCD
 1004              	.LVL161:
 1005 007e 0220     		movs	r0, #2
 1006 0080 FFF7FEFF 		bl	updateLine_TextConverter_LCD
 1007              	.LVL162:
  28:Src/Menu/FunctionsForButtons.c ****         wchar_t* currName = (wchar_t*) getName_Menu();  currName[0] = *L">";
 1008              		.loc 1 28 0
 1009 0084 FFF7FEFF 		bl	moveDown_Menu
 1010              	.LVL163:
  29:Src/Menu/FunctionsForButtons.c ****         putLine_TextConverter_LCD(currName, 3);         updateLine_TextConverter_LCD(3);    currNam
 1011              		.loc 1 29 0
 1012 0088 FFF7FEFF 		bl	getName_Menu
 1013              	.LVL164:
 1014 008c 0446     		mov	r4, r0
 1015              	.LVL165:
 1016 008e 144B     		ldr	r3, .L84
 1017 0090 1B68     		ldr	r3, [r3]
 1018 0092 0360     		str	r3, [r0]
  30:Src/Menu/FunctionsForButtons.c ****         return;
 1019              		.loc 1 30 0
 1020 0094 0321     		movs	r1, #3
ARM GAS  /tmp/ccymXkh7.s 			page 26


 1021 0096 FFF7FEFF 		bl	putLine_TextConverter_LCD
 1022              	.LVL166:
 1023 009a 0320     		movs	r0, #3
 1024 009c FFF7FEFF 		bl	updateLine_TextConverter_LCD
 1025              	.LVL167:
 1026 00a0 104B     		ldr	r3, .L84+4
 1027 00a2 1B68     		ldr	r3, [r3]
 1028 00a4 2360     		str	r3, [r4]
  31:Src/Menu/FunctionsForButtons.c ****     }
 1029              		.loc 1 31 0
 1030 00a6 AFE7     		b	.L76
 1031              	.LVL168:
 1032              	.L83:
 1033              	.LBE2:
 1034              	.LBB3:
  37:Src/Menu/FunctionsForButtons.c ****         putLine_TextConverter_LCD(getName_Menu(), 3);   updateLine_TextConverter_LCD(3);
 1035              		.loc 1 37 0
 1036 00a8 FFF7FEFF 		bl	moveUp_Menu
 1037              	.LVL169:
  38:Src/Menu/FunctionsForButtons.c ****         moveDown_Menu();
 1038              		.loc 1 38 0
 1039 00ac FFF7FEFF 		bl	getName_Menu
 1040              	.LVL170:
 1041 00b0 0321     		movs	r1, #3
 1042 00b2 FFF7FEFF 		bl	putLine_TextConverter_LCD
 1043              	.LVL171:
 1044 00b6 0320     		movs	r0, #3
 1045 00b8 FFF7FEFF 		bl	updateLine_TextConverter_LCD
 1046              	.LVL172:
  39:Src/Menu/FunctionsForButtons.c ****         wchar_t* currName = (wchar_t*) getName_Menu();  currName[0] = *L">";
 1047              		.loc 1 39 0
 1048 00bc FFF7FEFF 		bl	moveDown_Menu
 1049              	.LVL173:
  40:Src/Menu/FunctionsForButtons.c ****         putLine_TextConverter_LCD(currName, 4);         updateLine_TextConverter_LCD(4);    currNam
 1050              		.loc 1 40 0
 1051 00c0 FFF7FEFF 		bl	getName_Menu
 1052              	.LVL174:
 1053 00c4 0446     		mov	r4, r0
 1054              	.LVL175:
 1055 00c6 064B     		ldr	r3, .L84
 1056 00c8 1B68     		ldr	r3, [r3]
 1057 00ca 0360     		str	r3, [r0]
  41:Src/Menu/FunctionsForButtons.c ****         return;
 1058              		.loc 1 41 0
 1059 00cc 0421     		movs	r1, #4
 1060 00ce FFF7FEFF 		bl	putLine_TextConverter_LCD
 1061              	.LVL176:
 1062 00d2 0420     		movs	r0, #4
 1063 00d4 FFF7FEFF 		bl	updateLine_TextConverter_LCD
 1064              	.LVL177:
 1065 00d8 024B     		ldr	r3, .L84+4
 1066 00da 1B68     		ldr	r3, [r3]
 1067 00dc 2360     		str	r3, [r4]
  42:Src/Menu/FunctionsForButtons.c ****     }
 1068              		.loc 1 42 0
 1069 00de 93E7     		b	.L76
 1070              	.L85:
ARM GAS  /tmp/ccymXkh7.s 			page 27


 1071              		.align	2
 1072              	.L84:
 1073 00e0 00000000 		.word	.LC66
 1074 00e4 08000000 		.word	.LC67
 1075              	.LBE3:
 1076              		.cfi_endproc
 1077              	.LFE66:
 1079              		.section	.text.simpleNavigationUp_Menu,"ax",%progbits
 1080              		.align	1
 1081              		.global	simpleNavigationUp_Menu
 1082              		.syntax unified
 1083              		.thumb
 1084              		.thumb_func
 1085              		.fpu softvfp
 1087              	simpleNavigationUp_Menu:
 1088              	.LFB67:
  60:Src/Menu/FunctionsForButtons.c ****     if (!ThereIsNodeAbove_Menu())
 1089              		.loc 1 60 0
 1090              		.cfi_startproc
 1091              		@ args = 0, pretend = 0, frame = 0
 1092              		@ frame_needed = 0, uses_anonymous_args = 0
 1093 0000 10B5     		push	{r4, lr}
 1094              	.LCFI2:
 1095              		.cfi_def_cfa_offset 8
 1096              		.cfi_offset 4, -8
 1097              		.cfi_offset 14, -4
  61:Src/Menu/FunctionsForButtons.c ****         return;
 1098              		.loc 1 61 0
 1099 0002 FFF7FEFF 		bl	ThereIsNodeAbove_Menu
 1100              	.LVL178:
 1101 0006 00B9     		cbnz	r0, .L90
 1102              	.L86:
  83:Src/Menu/FunctionsForButtons.c **** 
 1103              		.loc 1 83 0
 1104 0008 10BD     		pop	{r4, pc}
 1105              	.L90:
  64:Src/Menu/FunctionsForButtons.c ****     if (!ThereIsNodeAbove_Menu())
 1106              		.loc 1 64 0
 1107 000a FFF7FEFF 		bl	moveUp_Menu
 1108              	.LVL179:
  65:Src/Menu/FunctionsForButtons.c ****     {
 1109              		.loc 1 65 0
 1110 000e FFF7FEFF 		bl	ThereIsNodeAbove_Menu
 1111              	.LVL180:
 1112 0012 38B3     		cbz	r0, .L91
  75:Src/Menu/FunctionsForButtons.c ****     putLine_TextConverter_LCD(getName_Menu(), 2);   updateLine_TextConverter_LCD(2);
 1113              		.loc 1 75 0
 1114 0014 FFF7FEFF 		bl	moveUp_Menu
 1115              	.LVL181:
  76:Src/Menu/FunctionsForButtons.c ****     moveDown_Menu();
 1116              		.loc 1 76 0
 1117 0018 FFF7FEFF 		bl	getName_Menu
 1118              	.LVL182:
 1119 001c 0221     		movs	r1, #2
 1120 001e FFF7FEFF 		bl	putLine_TextConverter_LCD
 1121              	.LVL183:
 1122 0022 0220     		movs	r0, #2
ARM GAS  /tmp/ccymXkh7.s 			page 28


 1123 0024 FFF7FEFF 		bl	updateLine_TextConverter_LCD
 1124              	.LVL184:
  77:Src/Menu/FunctionsForButtons.c ****     wchar_t* currName = (wchar_t*) getName_Menu();  currName[0] = *L">";
 1125              		.loc 1 77 0
 1126 0028 FFF7FEFF 		bl	moveDown_Menu
 1127              	.LVL185:
  78:Src/Menu/FunctionsForButtons.c ****     putLine_TextConverter_LCD(currName, 3);         updateLine_TextConverter_LCD(3);    currName[0]
 1128              		.loc 1 78 0
 1129 002c FFF7FEFF 		bl	getName_Menu
 1130              	.LVL186:
 1131 0030 0446     		mov	r4, r0
 1132              	.LVL187:
 1133 0032 1A4B     		ldr	r3, .L92
 1134 0034 1B68     		ldr	r3, [r3]
 1135 0036 0360     		str	r3, [r0]
  79:Src/Menu/FunctionsForButtons.c ****     moveDown_Menu();
 1136              		.loc 1 79 0
 1137 0038 0321     		movs	r1, #3
 1138 003a FFF7FEFF 		bl	putLine_TextConverter_LCD
 1139              	.LVL188:
 1140 003e 0320     		movs	r0, #3
 1141 0040 FFF7FEFF 		bl	updateLine_TextConverter_LCD
 1142              	.LVL189:
 1143 0044 164B     		ldr	r3, .L92+4
 1144 0046 1B68     		ldr	r3, [r3]
 1145 0048 2360     		str	r3, [r4]
  80:Src/Menu/FunctionsForButtons.c ****     putLine_TextConverter_LCD(getName_Menu(), 4);   updateLine_TextConverter_LCD(4);
 1146              		.loc 1 80 0
 1147 004a FFF7FEFF 		bl	moveDown_Menu
 1148              	.LVL190:
  81:Src/Menu/FunctionsForButtons.c ****     moveUp_Menu();
 1149              		.loc 1 81 0
 1150 004e FFF7FEFF 		bl	getName_Menu
 1151              	.LVL191:
 1152 0052 0421     		movs	r1, #4
 1153 0054 FFF7FEFF 		bl	putLine_TextConverter_LCD
 1154              	.LVL192:
 1155 0058 0420     		movs	r0, #4
 1156 005a FFF7FEFF 		bl	updateLine_TextConverter_LCD
 1157              	.LVL193:
  82:Src/Menu/FunctionsForButtons.c **** }
 1158              		.loc 1 82 0
 1159 005e FFF7FEFF 		bl	moveUp_Menu
 1160              	.LVL194:
 1161 0062 D1E7     		b	.L86
 1162              	.LVL195:
 1163              	.L91:
 1164              	.LBB4:
  67:Src/Menu/FunctionsForButtons.c ****         putLine_TextConverter_LCD(currName, 2);         updateLine_TextConverter_LCD(2);    currNam
 1165              		.loc 1 67 0
 1166 0064 FFF7FEFF 		bl	getName_Menu
 1167              	.LVL196:
 1168 0068 0446     		mov	r4, r0
 1169              	.LVL197:
 1170 006a 0C4B     		ldr	r3, .L92
 1171 006c 1B68     		ldr	r3, [r3]
 1172 006e 0360     		str	r3, [r0]
ARM GAS  /tmp/ccymXkh7.s 			page 29


  68:Src/Menu/FunctionsForButtons.c ****         moveDown_Menu();
 1173              		.loc 1 68 0
 1174 0070 0221     		movs	r1, #2
 1175 0072 FFF7FEFF 		bl	putLine_TextConverter_LCD
 1176              	.LVL198:
 1177 0076 0220     		movs	r0, #2
 1178 0078 FFF7FEFF 		bl	updateLine_TextConverter_LCD
 1179              	.LVL199:
 1180 007c 084B     		ldr	r3, .L92+4
 1181 007e 1B68     		ldr	r3, [r3]
 1182 0080 2360     		str	r3, [r4]
  69:Src/Menu/FunctionsForButtons.c ****         putLine_TextConverter_LCD(getName_Menu(), 3);   updateLine_TextConverter_LCD(3);
 1183              		.loc 1 69 0
 1184 0082 FFF7FEFF 		bl	moveDown_Menu
 1185              	.LVL200:
  70:Src/Menu/FunctionsForButtons.c ****         moveUp_Menu();
 1186              		.loc 1 70 0
 1187 0086 FFF7FEFF 		bl	getName_Menu
 1188              	.LVL201:
 1189 008a 0321     		movs	r1, #3
 1190 008c FFF7FEFF 		bl	putLine_TextConverter_LCD
 1191              	.LVL202:
 1192 0090 0320     		movs	r0, #3
 1193 0092 FFF7FEFF 		bl	updateLine_TextConverter_LCD
 1194              	.LVL203:
  71:Src/Menu/FunctionsForButtons.c ****         return;
 1195              		.loc 1 71 0
 1196 0096 FFF7FEFF 		bl	moveUp_Menu
 1197              	.LVL204:
  72:Src/Menu/FunctionsForButtons.c ****     }
 1198              		.loc 1 72 0
 1199 009a B5E7     		b	.L86
 1200              	.L93:
 1201              		.align	2
 1202              	.L92:
 1203 009c 00000000 		.word	.LC66
 1204 00a0 08000000 		.word	.LC67
 1205              	.LBE4:
 1206              		.cfi_endproc
 1207              	.LFE67:
 1209              		.section	.text.returnFirstLine,"ax",%progbits
 1210              		.align	1
 1211              		.syntax unified
 1212              		.thumb
 1213              		.thumb_func
 1214              		.fpu softvfp
 1216              	returnFirstLine:
 1217              	.LFB87:
 241:Src/Menu/FunctionsForButtons.c **** 
 1218              		.loc 1 241 0
 1219              		.cfi_startproc
 1220              		@ args = 0, pretend = 0, frame = 0
 1221              		@ frame_needed = 0, uses_anonymous_args = 0
 1222 0000 08B5     		push	{r3, lr}
 1223              	.LCFI3:
 1224              		.cfi_def_cfa_offset 8
 1225              		.cfi_offset 3, -8
ARM GAS  /tmp/ccymXkh7.s 			page 30


 1226              		.cfi_offset 14, -4
 243:Src/Menu/FunctionsForButtons.c ****     updateLine_TextConverter_LCD(1);
 1227              		.loc 1 243 0
 1228 0002 FFF7FEFF 		bl	getTitle_Menu
 1229              	.LVL205:
 1230 0006 0121     		movs	r1, #1
 1231 0008 FFF7FEFF 		bl	putLine_TextConverter_LCD
 1232              	.LVL206:
 244:Src/Menu/FunctionsForButtons.c **** }
 1233              		.loc 1 244 0
 1234 000c 0120     		movs	r0, #1
 1235 000e FFF7FEFF 		bl	updateLine_TextConverter_LCD
 1236              	.LVL207:
 245:Src/Menu/FunctionsForButtons.c **** 
 1237              		.loc 1 245 0
 1238 0012 08BD     		pop	{r3, pc}
 1239              		.cfi_endproc
 1240              	.LFE87:
 1242              		.section	.text.simpleNavigationBack_Menu,"ax",%progbits
 1243              		.align	1
 1244              		.global	simpleNavigationBack_Menu
 1245              		.syntax unified
 1246              		.thumb
 1247              		.thumb_func
 1248              		.fpu softvfp
 1250              	simpleNavigationBack_Menu:
 1251              	.LFB69:
 113:Src/Menu/FunctionsForButtons.c ****     moveLeft_Menu();    putLine_TextConverter_LCD(getTitle_Menu(), 1);   updateLine_TextConverter_L
 1252              		.loc 1 113 0
 1253              		.cfi_startproc
 1254              		@ args = 0, pretend = 0, frame = 0
 1255              		@ frame_needed = 0, uses_anonymous_args = 0
 1256 0000 10B5     		push	{r4, lr}
 1257              	.LCFI4:
 1258              		.cfi_def_cfa_offset 8
 1259              		.cfi_offset 4, -8
 1260              		.cfi_offset 14, -4
 114:Src/Menu/FunctionsForButtons.c ****     if (!ThereIsNodeAbove_Menu())
 1261              		.loc 1 114 0
 1262 0002 FFF7FEFF 		bl	moveLeft_Menu
 1263              	.LVL208:
 1264 0006 FFF7FEFF 		bl	getTitle_Menu
 1265              	.LVL209:
 1266 000a 0121     		movs	r1, #1
 1267 000c FFF7FEFF 		bl	putLine_TextConverter_LCD
 1268              	.LVL210:
 1269 0010 0120     		movs	r0, #1
 1270 0012 FFF7FEFF 		bl	updateLine_TextConverter_LCD
 1271              	.LVL211:
 115:Src/Menu/FunctionsForButtons.c ****     {
 1272              		.loc 1 115 0
 1273 0016 FFF7FEFF 		bl	ThereIsNodeAbove_Menu
 1274              	.LVL212:
 1275 001a 0028     		cmp	r0, #0
 1276 001c 45D1     		bne	.L97
 1277              	.LBB5:
 117:Src/Menu/FunctionsForButtons.c ****         putLine_TextConverter_LCD(currName, 2);         updateLine_TextConverter_LCD(2);    currNam
ARM GAS  /tmp/ccymXkh7.s 			page 31


 1278              		.loc 1 117 0
 1279 001e FFF7FEFF 		bl	getName_Menu
 1280              	.LVL213:
 1281 0022 0446     		mov	r4, r0
 1282              	.LVL214:
 1283 0024 3A4B     		ldr	r3, .L105
 1284 0026 1B68     		ldr	r3, [r3]
 1285 0028 0360     		str	r3, [r0]
 118:Src/Menu/FunctionsForButtons.c ****         if (!ThereIsNodeBelow_Menu())
 1286              		.loc 1 118 0
 1287 002a 0221     		movs	r1, #2
 1288 002c FFF7FEFF 		bl	putLine_TextConverter_LCD
 1289              	.LVL215:
 1290 0030 0220     		movs	r0, #2
 1291 0032 FFF7FEFF 		bl	updateLine_TextConverter_LCD
 1292              	.LVL216:
 1293 0036 374B     		ldr	r3, .L105+4
 1294 0038 1B68     		ldr	r3, [r3]
 1295 003a 2360     		str	r3, [r4]
 119:Src/Menu/FunctionsForButtons.c ****         {
 1296              		.loc 1 119 0
 1297 003c FFF7FEFF 		bl	ThereIsNodeBelow_Menu
 1298              	.LVL217:
 1299 0040 A0B1     		cbz	r0, .L103
 125:Src/Menu/FunctionsForButtons.c ****         if (!ThereIsNodeBelow_Menu())
 1300              		.loc 1 125 0
 1301 0042 FFF7FEFF 		bl	moveDown_Menu
 1302              	.LVL218:
 1303 0046 FFF7FEFF 		bl	getName_Menu
 1304              	.LVL219:
 1305 004a 0321     		movs	r1, #3
 1306 004c FFF7FEFF 		bl	putLine_TextConverter_LCD
 1307              	.LVL220:
 1308 0050 0320     		movs	r0, #3
 1309 0052 FFF7FEFF 		bl	updateLine_TextConverter_LCD
 1310              	.LVL221:
 126:Src/Menu/FunctionsForButtons.c ****         {
 1311              		.loc 1 126 0
 1312 0056 FFF7FEFF 		bl	ThereIsNodeBelow_Menu
 1313              	.LVL222:
 1314 005a B8B9     		cbnz	r0, .L100
 128:Src/Menu/FunctionsForButtons.c ****             return;
 1315              		.loc 1 128 0
 1316 005c 0421     		movs	r1, #4
 1317 005e 2E48     		ldr	r0, .L105+8
 1318 0060 FFF7FEFF 		bl	putLine_TextConverter_LCD
 1319              	.LVL223:
 1320 0064 0420     		movs	r0, #4
 1321 0066 FFF7FEFF 		bl	updateLine_TextConverter_LCD
 1322              	.LVL224:
 129:Src/Menu/FunctionsForButtons.c ****         }
 1323              		.loc 1 129 0
 1324 006a 48E0     		b	.L96
 1325              	.L103:
 121:Src/Menu/FunctionsForButtons.c ****             putLine_TextConverter_LCD(EMPTY_STRING, 4);   updateLine_TextConverter_LCD(4);
 1326              		.loc 1 121 0
 1327 006c 2A4C     		ldr	r4, .L105+8
ARM GAS  /tmp/ccymXkh7.s 			page 32


 1328              	.LVL225:
 1329 006e 0321     		movs	r1, #3
 1330 0070 2046     		mov	r0, r4
 1331 0072 FFF7FEFF 		bl	putLine_TextConverter_LCD
 1332              	.LVL226:
 1333 0076 0320     		movs	r0, #3
 1334 0078 FFF7FEFF 		bl	updateLine_TextConverter_LCD
 1335              	.LVL227:
 122:Src/Menu/FunctionsForButtons.c ****             return;
 1336              		.loc 1 122 0
 1337 007c 0421     		movs	r1, #4
 1338 007e 2046     		mov	r0, r4
 1339 0080 FFF7FEFF 		bl	putLine_TextConverter_LCD
 1340              	.LVL228:
 1341 0084 0420     		movs	r0, #4
 1342 0086 FFF7FEFF 		bl	updateLine_TextConverter_LCD
 1343              	.LVL229:
 123:Src/Menu/FunctionsForButtons.c ****         }
 1344              		.loc 1 123 0
 1345 008a 38E0     		b	.L96
 1346              	.LVL230:
 1347              	.L100:
 131:Src/Menu/FunctionsForButtons.c ****         moveUp_Menu();      moveUp_Menu();
 1348              		.loc 1 131 0
 1349 008c FFF7FEFF 		bl	moveDown_Menu
 1350              	.LVL231:
 1351 0090 FFF7FEFF 		bl	getName_Menu
 1352              	.LVL232:
 1353 0094 0421     		movs	r1, #4
 1354 0096 FFF7FEFF 		bl	putLine_TextConverter_LCD
 1355              	.LVL233:
 1356 009a 0420     		movs	r0, #4
 1357 009c FFF7FEFF 		bl	updateLine_TextConverter_LCD
 1358              	.LVL234:
 132:Src/Menu/FunctionsForButtons.c ****         return;
 1359              		.loc 1 132 0
 1360 00a0 FFF7FEFF 		bl	moveUp_Menu
 1361              	.LVL235:
 1362 00a4 FFF7FEFF 		bl	moveUp_Menu
 1363              	.LVL236:
 133:Src/Menu/FunctionsForButtons.c ****     }
 1364              		.loc 1 133 0
 1365 00a8 29E0     		b	.L96
 1366              	.LVL237:
 1367              	.L97:
 1368              	.LBE5:
 135:Src/Menu/FunctionsForButtons.c ****     moveDown_Menu();    wchar_t* currName = (wchar_t*) getName_Menu();  currName[0] = *L">";
 1369              		.loc 1 135 0
 1370 00aa FFF7FEFF 		bl	moveUp_Menu
 1371              	.LVL238:
 1372 00ae FFF7FEFF 		bl	getName_Menu
 1373              	.LVL239:
 1374 00b2 0221     		movs	r1, #2
 1375 00b4 FFF7FEFF 		bl	putLine_TextConverter_LCD
 1376              	.LVL240:
 1377 00b8 0220     		movs	r0, #2
 1378 00ba FFF7FEFF 		bl	updateLine_TextConverter_LCD
ARM GAS  /tmp/ccymXkh7.s 			page 33


 1379              	.LVL241:
 136:Src/Menu/FunctionsForButtons.c ****     putLine_TextConverter_LCD(currName, 3);         updateLine_TextConverter_LCD(3);    currName[0]
 1380              		.loc 1 136 0
 1381 00be FFF7FEFF 		bl	moveDown_Menu
 1382              	.LVL242:
 1383 00c2 FFF7FEFF 		bl	getName_Menu
 1384              	.LVL243:
 1385 00c6 0446     		mov	r4, r0
 1386              	.LVL244:
 1387 00c8 114B     		ldr	r3, .L105
 1388 00ca 1B68     		ldr	r3, [r3]
 1389 00cc 0360     		str	r3, [r0]
 137:Src/Menu/FunctionsForButtons.c ****     if (!ThereIsNodeBelow_Menu())
 1390              		.loc 1 137 0
 1391 00ce 0321     		movs	r1, #3
 1392 00d0 FFF7FEFF 		bl	putLine_TextConverter_LCD
 1393              	.LVL245:
 1394 00d4 0320     		movs	r0, #3
 1395 00d6 FFF7FEFF 		bl	updateLine_TextConverter_LCD
 1396              	.LVL246:
 1397 00da 0E4B     		ldr	r3, .L105+4
 1398 00dc 1B68     		ldr	r3, [r3]
 1399 00de 2360     		str	r3, [r4]
 138:Src/Menu/FunctionsForButtons.c ****     {
 1400              		.loc 1 138 0
 1401 00e0 FFF7FEFF 		bl	ThereIsNodeBelow_Menu
 1402              	.LVL247:
 1403 00e4 60B1     		cbz	r0, .L104
 143:Src/Menu/FunctionsForButtons.c ****     moveUp_Menu();
 1404              		.loc 1 143 0
 1405 00e6 FFF7FEFF 		bl	moveDown_Menu
 1406              	.LVL248:
 1407 00ea FFF7FEFF 		bl	getName_Menu
 1408              	.LVL249:
 1409 00ee 0421     		movs	r1, #4
 1410 00f0 FFF7FEFF 		bl	putLine_TextConverter_LCD
 1411              	.LVL250:
 1412 00f4 0420     		movs	r0, #4
 1413 00f6 FFF7FEFF 		bl	updateLine_TextConverter_LCD
 1414              	.LVL251:
 144:Src/Menu/FunctionsForButtons.c **** }
 1415              		.loc 1 144 0
 1416 00fa FFF7FEFF 		bl	moveUp_Menu
 1417              	.LVL252:
 1418              	.L96:
 145:Src/Menu/FunctionsForButtons.c **** 
 1419              		.loc 1 145 0
 1420 00fe 10BD     		pop	{r4, pc}
 1421              	.LVL253:
 1422              	.L104:
 140:Src/Menu/FunctionsForButtons.c ****         return;
 1423              		.loc 1 140 0
 1424 0100 0421     		movs	r1, #4
 1425 0102 0548     		ldr	r0, .L105+8
 1426 0104 FFF7FEFF 		bl	putLine_TextConverter_LCD
 1427              	.LVL254:
 1428 0108 0420     		movs	r0, #4
ARM GAS  /tmp/ccymXkh7.s 			page 34


 1429 010a FFF7FEFF 		bl	updateLine_TextConverter_LCD
 1430              	.LVL255:
 141:Src/Menu/FunctionsForButtons.c ****     }
 1431              		.loc 1 141 0
 1432 010e F6E7     		b	.L96
 1433              	.L106:
 1434              		.align	2
 1435              	.L105:
 1436 0110 00000000 		.word	.LC66
 1437 0114 08000000 		.word	.LC67
 1438 0118 00000000 		.word	EMPTY_STRING
 1439              		.cfi_endproc
 1440              	.LFE69:
 1442              		.section	.text.GcodeFormat,"ax",%progbits
 1443              		.align	1
 1444              		.syntax unified
 1445              		.thumb
 1446              		.thumb_func
 1447              		.fpu softvfp
 1449              	GcodeFormat:
 1450              	.LFB85:
 229:Src/Menu/FunctionsForButtons.c ****     if(wcsstr(getName_Menu(), L".gcode\0") != NULL)
 1451              		.loc 1 229 0
 1452              		.cfi_startproc
 1453              		@ args = 0, pretend = 0, frame = 0
 1454              		@ frame_needed = 0, uses_anonymous_args = 0
 1455 0000 08B5     		push	{r3, lr}
 1456              	.LCFI5:
 1457              		.cfi_def_cfa_offset 8
 1458              		.cfi_offset 3, -8
 1459              		.cfi_offset 14, -4
 230:Src/Menu/FunctionsForButtons.c ****         return true;
 1460              		.loc 1 230 0
 1461 0002 FFF7FEFF 		bl	getName_Menu
 1462              	.LVL256:
 1463 0006 0449     		ldr	r1, .L111
 1464 0008 FFF7FEFF 		bl	wcsstr
 1465              	.LVL257:
 1466 000c 08B1     		cbz	r0, .L109
 231:Src/Menu/FunctionsForButtons.c ****     return false;
 1467              		.loc 1 231 0
 1468 000e 0120     		movs	r0, #1
 1469              	.L108:
 233:Src/Menu/FunctionsForButtons.c **** 
 1470              		.loc 1 233 0
 1471 0010 08BD     		pop	{r3, pc}
 1472              	.L109:
 232:Src/Menu/FunctionsForButtons.c **** }
 1473              		.loc 1 232 0
 1474 0012 0020     		movs	r0, #0
 1475 0014 FCE7     		b	.L108
 1476              	.L112:
 1477 0016 00BF     		.align	2
 1478              	.L111:
 1479 0018 00000000 		.word	.LANCHOR0
 1480              		.cfi_endproc
 1481              	.LFE85:
ARM GAS  /tmp/ccymXkh7.s 			page 35


 1483              		.section	.text.wait,"ax",%progbits
 1484              		.align	1
 1485              		.syntax unified
 1486              		.thumb
 1487              		.thumb_func
 1488              		.fpu softvfp
 1490              	wait:
 1491              	.LFB86:
 236:Src/Menu/FunctionsForButtons.c ****     HAL_Delay(500);
 1492              		.loc 1 236 0
 1493              		.cfi_startproc
 1494              		@ args = 0, pretend = 0, frame = 0
 1495              		@ frame_needed = 0, uses_anonymous_args = 0
 1496 0000 08B5     		push	{r3, lr}
 1497              	.LCFI6:
 1498              		.cfi_def_cfa_offset 8
 1499              		.cfi_offset 3, -8
 1500              		.cfi_offset 14, -4
 237:Src/Menu/FunctionsForButtons.c **** }
 1501              		.loc 1 237 0
 1502 0002 4FF4FA70 		mov	r0, #500
 1503 0006 FFF7FEFF 		bl	HAL_Delay
 1504              	.LVL258:
 238:Src/Menu/FunctionsForButtons.c **** 
 1505              		.loc 1 238 0
 1506 000a 08BD     		pop	{r3, pc}
 1507              		.cfi_endproc
 1508              	.LFE86:
 1510              		.section	.text.runGcode_Menu,"ax",%progbits
 1511              		.align	1
 1512              		.global	runGcode_Menu
 1513              		.syntax unified
 1514              		.thumb
 1515              		.thumb_func
 1516              		.fpu softvfp
 1518              	runGcode_Menu:
 1519              	.LFB90:
 325:Src/Menu/FunctionsForButtons.c **** 
 326:Src/Menu/FunctionsForButtons.c **** void runGcode_Menu(void)
 327:Src/Menu/FunctionsForButtons.c **** {
 1520              		.loc 1 327 0
 1521              		.cfi_startproc
 1522              		@ args = 0, pretend = 0, frame = 272
 1523              		@ frame_needed = 0, uses_anonymous_args = 0
 1524 0000 70B5     		push	{r4, r5, r6, lr}
 1525              	.LCFI7:
 1526              		.cfi_def_cfa_offset 16
 1527              		.cfi_offset 4, -16
 1528              		.cfi_offset 5, -12
 1529              		.cfi_offset 6, -8
 1530              		.cfi_offset 14, -4
 1531 0002 CAB0     		sub	sp, sp, #296
 1532              	.LCFI8:
 1533              		.cfi_def_cfa_offset 312
 328:Src/Menu/FunctionsForButtons.c ****     if(GcodeFormat())
 1534              		.loc 1 328 0
 1535 0004 FFF7FEFF 		bl	GcodeFormat
ARM GAS  /tmp/ccymXkh7.s 			page 36


 1536              	.LVL259:
 1537 0008 0028     		cmp	r0, #0
 1538 000a 5DD0     		beq	.L116
 1539              	.LBB6:
 329:Src/Menu/FunctionsForButtons.c ****     {
 330:Src/Menu/FunctionsForButtons.c ****         putLine_TextConverter_LCD(L"Gcode file", 1);
 1540              		.loc 1 330 0
 1541 000c 0121     		movs	r1, #1
 1542 000e 3448     		ldr	r0, .L124
 1543 0010 FFF7FEFF 		bl	putLine_TextConverter_LCD
 1544              	.LVL260:
 331:Src/Menu/FunctionsForButtons.c ****         updateLine_TextConverter_LCD(1);
 1545              		.loc 1 331 0
 1546 0014 0120     		movs	r0, #1
 1547 0016 FFF7FEFF 		bl	updateLine_TextConverter_LCD
 1548              	.LVL261:
 332:Src/Menu/FunctionsForButtons.c **** 
 333:Src/Menu/FunctionsForButtons.c **** 
 334:Src/Menu/FunctionsForButtons.c ****         TCHAR fileNameTCHAR[MAX_WIDE_NAME_LENGTH], pathToFile[PATH_LENGTH];
 335:Src/Menu/FunctionsForButtons.c **** 
 336:Src/Menu/FunctionsForButtons.c ****         getFileNameTCHAR(fileNameTCHAR);    sprintf(pathToFile, "%s/%s", getPath_USBdrive(), fileNa
 1549              		.loc 1 336 0
 1550 001a 18A8     		add	r0, sp, #96
 1551 001c FFF7FEFF 		bl	getFileNameTCHAR
 1552              	.LVL262:
 1553 0020 FFF7FEFF 		bl	getPath_USBdrive
 1554              	.LVL263:
 1555 0024 18AB     		add	r3, sp, #96
 1556 0026 0246     		mov	r2, r0
 1557 0028 2E49     		ldr	r1, .L124+4
 1558 002a 31A8     		add	r0, sp, #196
 1559 002c FFF7FEFF 		bl	sprintf
 1560              	.LVL264:
 1561 0030 31A8     		add	r0, sp, #196
 1562 0032 FFF7FEFF 		bl	openFile_USBdrive
 1563              	.LVL265:
 337:Src/Menu/FunctionsForButtons.c **** 
 338:Src/Menu/FunctionsForButtons.c ****         //wchar_t stringFromFile[LINELENGTH_TEXTCONVERTER_LCD];
 339:Src/Menu/FunctionsForButtons.c ****         while(!endOfFile_USBdrive())
 1564              		.loc 1 339 0
 1565 0036 25E0     		b	.L117
 1566              	.L119:
 340:Src/Menu/FunctionsForButtons.c ****         {
 341:Src/Menu/FunctionsForButtons.c ****             convertCommand_Gcode((const char*)getStringFromFile_USBdrive());
 1567              		.loc 1 341 0
 1568 0038 FFF7FEFF 		bl	getStringFromFile_USBdrive
 1569              	.LVL266:
 1570 003c FFF7FEFF 		bl	convertCommand_Gcode
 1571              	.LVL267:
 342:Src/Menu/FunctionsForButtons.c ****             setDescreteCommand_Gcode(getConvertedCommand_Gcode());
 1572              		.loc 1 342 0
 1573 0040 06AC     		add	r4, sp, #24
 1574 0042 2046     		mov	r0, r4
 1575 0044 FFF7FEFF 		bl	getConvertedCommand_Gcode
 1576              	.LVL268:
 1577 0048 0AAB     		add	r3, sp, #40
 1578 004a 0FCB     		ldm	r3, {r0, r1, r2, r3}
ARM GAS  /tmp/ccymXkh7.s 			page 37


 1579 004c 8DE80F00 		stm	sp, {r0, r1, r2, r3}
 1580 0050 94E80F00 		ldm	r4, {r0, r1, r2, r3}
 1581 0054 FFF7FEFF 		bl	setDescreteCommand_Gcode
 1582              	.LVL269:
 1583              	.L118:
 343:Src/Menu/FunctionsForButtons.c ****             while(!enoghSpaceIsReservedCommandBuffer_Gcode()) {}
 1584              		.loc 1 343 0 discriminator 1
 1585 0058 FFF7FEFF 		bl	enoghSpaceIsReservedCommandBuffer_Gcode
 1586              	.LVL270:
 1587 005c 0028     		cmp	r0, #0
 1588 005e FBD0     		beq	.L118
 344:Src/Menu/FunctionsForButtons.c ****             addElementToDescreteCommandBuffer_Gcode(getDescreteCommand_Gcode());
 1589              		.loc 1 344 0
 1590 0060 0EAE     		add	r6, sp, #56
 1591 0062 3046     		mov	r0, r6
 1592 0064 FFF7FEFF 		bl	getDescreteCommand_Gcode
 1593              	.LVL271:
 1594 0068 6C46     		mov	r4, sp
 1595 006a 12AD     		add	r5, sp, #72
 1596 006c 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1597 006e 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1598 0070 95E80300 		ldm	r5, {r0, r1}
 1599 0074 84E80300 		stm	r4, {r0, r1}
 1600 0078 96E80F00 		ldm	r6, {r0, r1, r2, r3}
 1601 007c FFF7FEFF 		bl	addElementToDescreteCommandBuffer_Gcode
 1602              	.LVL272:
 345:Src/Menu/FunctionsForButtons.c ****             descreteCommandAnalyser_Gcode();
 1603              		.loc 1 345 0
 1604 0080 FFF7FEFF 		bl	descreteCommandAnalyser_Gcode
 1605              	.LVL273:
 1606              	.L117:
 339:Src/Menu/FunctionsForButtons.c ****         {
 1607              		.loc 1 339 0
 1608 0084 FFF7FEFF 		bl	endOfFile_USBdrive
 1609              	.LVL274:
 1610 0088 0028     		cmp	r0, #0
 1611 008a D5D0     		beq	.L119
 346:Src/Menu/FunctionsForButtons.c **** 
 347:Src/Menu/FunctionsForButtons.c ****             /*
 348:Src/Menu/FunctionsForButtons.c ****             wait();
 349:Src/Menu/FunctionsForButtons.c ****             swprintf(stringFromFile, LINELENGTH_TEXTCONVERTER_LCD, L"%s", getStringFromFile_USBdriv
 350:Src/Menu/FunctionsForButtons.c ****             putLine_TextConverter_LCD(stringFromFile, 1);   updateLine_TextConverter_LCD(1);
 351:Src/Menu/FunctionsForButtons.c ****             */
 352:Src/Menu/FunctionsForButtons.c ****         }
 353:Src/Menu/FunctionsForButtons.c ****         addElementToDescreteCommandBuffer_Gcode(defaultDescreteCommand);
 1612              		.loc 1 353 0
 1613 008c 164E     		ldr	r6, .L124+8
 1614 008e 6C46     		mov	r4, sp
 1615 0090 06F11005 		add	r5, r6, #16
 1616 0094 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1617 0096 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1618 0098 95E80300 		ldm	r5, {r0, r1}
 1619 009c 84E80300 		stm	r4, {r0, r1}
 1620 00a0 96E80F00 		ldm	r6, {r0, r1, r2, r3}
 1621 00a4 FFF7FEFF 		bl	addElementToDescreteCommandBuffer_Gcode
 1622              	.LVL275:
 354:Src/Menu/FunctionsForButtons.c ****         descreteCommandAnalyser_Gcode();
ARM GAS  /tmp/ccymXkh7.s 			page 38


 1623              		.loc 1 354 0
 1624 00a8 FFF7FEFF 		bl	descreteCommandAnalyser_Gcode
 1625              	.LVL276:
 1626              	.L120:
 355:Src/Menu/FunctionsForButtons.c **** 
 356:Src/Menu/FunctionsForButtons.c ****         while( (checkFreeSpaceCommandBuffer_Gcode()!=COMMAND_BUFFER_LENGTH) || (!moveComleted()) ) 
 1627              		.loc 1 356 0 discriminator 3
 1628 00ac FFF7FEFF 		bl	checkFreeSpaceCommandBuffer_Gcode
 1629              	.LVL277:
 1630 00b0 3228     		cmp	r0, #50
 1631 00b2 FBD1     		bne	.L120
 1632              		.loc 1 356 0 is_stmt 0 discriminator 2
 1633 00b4 FFF7FEFF 		bl	moveComleted
 1634              	.LVL278:
 1635 00b8 0028     		cmp	r0, #0
 1636 00ba F7D0     		beq	.L120
 357:Src/Menu/FunctionsForButtons.c **** 
 358:Src/Menu/FunctionsForButtons.c ****         wait(); returnFirstLine();
 1637              		.loc 1 358 0 is_stmt 1
 1638 00bc FFF7FEFF 		bl	wait
 1639              	.LVL279:
 1640 00c0 FFF7FEFF 		bl	returnFirstLine
 1641              	.LVL280:
 1642              	.L115:
 1643              	.LBE6:
 359:Src/Menu/FunctionsForButtons.c ****     }
 360:Src/Menu/FunctionsForButtons.c ****     else
 361:Src/Menu/FunctionsForButtons.c ****     {
 362:Src/Menu/FunctionsForButtons.c ****         putLine_TextConverter_LCD(L"not a Gcode file", 1);
 363:Src/Menu/FunctionsForButtons.c ****         updateLine_TextConverter_LCD(1);
 364:Src/Menu/FunctionsForButtons.c ****         wait(); returnFirstLine();
 365:Src/Menu/FunctionsForButtons.c ****     }
 366:Src/Menu/FunctionsForButtons.c **** }
 1644              		.loc 1 366 0
 1645 00c4 4AB0     		add	sp, sp, #296
 1646              	.LCFI9:
 1647              		.cfi_remember_state
 1648              		.cfi_def_cfa_offset 16
 1649              		@ sp needed
 1650 00c6 70BD     		pop	{r4, r5, r6, pc}
 1651              	.L116:
 1652              	.LCFI10:
 1653              		.cfi_restore_state
 362:Src/Menu/FunctionsForButtons.c ****         updateLine_TextConverter_LCD(1);
 1654              		.loc 1 362 0
 1655 00c8 0121     		movs	r1, #1
 1656 00ca 0848     		ldr	r0, .L124+12
 1657 00cc FFF7FEFF 		bl	putLine_TextConverter_LCD
 1658              	.LVL281:
 363:Src/Menu/FunctionsForButtons.c ****         wait(); returnFirstLine();
 1659              		.loc 1 363 0
 1660 00d0 0120     		movs	r0, #1
 1661 00d2 FFF7FEFF 		bl	updateLine_TextConverter_LCD
 1662              	.LVL282:
 364:Src/Menu/FunctionsForButtons.c ****     }
 1663              		.loc 1 364 0
 1664 00d6 FFF7FEFF 		bl	wait
ARM GAS  /tmp/ccymXkh7.s 			page 39


 1665              	.LVL283:
 1666 00da FFF7FEFF 		bl	returnFirstLine
 1667              	.LVL284:
 1668              		.loc 1 366 0
 1669 00de F1E7     		b	.L115
 1670              	.L125:
 1671              		.align	2
 1672              	.L124:
 1673 00e0 00000000 		.word	.LC69
 1674 00e4 00000000 		.word	.LC70
 1675 00e8 00000000 		.word	defaultDescreteCommand
 1676 00ec 2C000000 		.word	.LC71
 1677              		.cfi_endproc
 1678              	.LFE90:
 1680              		.section	.text.simpleNavigationOk_Menu,"ax",%progbits
 1681              		.align	1
 1682              		.global	simpleNavigationOk_Menu
 1683              		.syntax unified
 1684              		.thumb
 1685              		.thumb_func
 1686              		.fpu softvfp
 1688              	simpleNavigationOk_Menu:
 1689              	.LFB68:
  86:Src/Menu/FunctionsForButtons.c ****     moveRight_Menu();
 1690              		.loc 1 86 0
 1691              		.cfi_startproc
 1692              		@ args = 0, pretend = 0, frame = 0
 1693              		@ frame_needed = 0, uses_anonymous_args = 0
 1694 0000 10B5     		push	{r4, lr}
 1695              	.LCFI11:
 1696              		.cfi_def_cfa_offset 8
 1697              		.cfi_offset 4, -8
 1698              		.cfi_offset 14, -4
  87:Src/Menu/FunctionsForButtons.c ****     putLine_TextConverter_LCD(getTitle_Menu(), 1);   updateLine_TextConverter_LCD(1);
 1699              		.loc 1 87 0
 1700 0002 FFF7FEFF 		bl	moveRight_Menu
 1701              	.LVL285:
  88:Src/Menu/FunctionsForButtons.c **** 
 1702              		.loc 1 88 0
 1703 0006 FFF7FEFF 		bl	getTitle_Menu
 1704              	.LVL286:
 1705 000a 0121     		movs	r1, #1
 1706 000c FFF7FEFF 		bl	putLine_TextConverter_LCD
 1707              	.LVL287:
 1708 0010 0120     		movs	r0, #1
 1709 0012 FFF7FEFF 		bl	updateLine_TextConverter_LCD
 1710              	.LVL288:
  90:Src/Menu/FunctionsForButtons.c ****     putLine_TextConverter_LCD(currName, 2);         updateLine_TextConverter_LCD(2);    currName[0]
 1711              		.loc 1 90 0
 1712 0016 FFF7FEFF 		bl	getName_Menu
 1713              	.LVL289:
 1714 001a 0446     		mov	r4, r0
 1715              	.LVL290:
 1716 001c 224B     		ldr	r3, .L133
 1717 001e 1B68     		ldr	r3, [r3]
 1718 0020 0360     		str	r3, [r0]
  91:Src/Menu/FunctionsForButtons.c ****     if (!ThereIsNodeBelow_Menu())
ARM GAS  /tmp/ccymXkh7.s 			page 40


 1719              		.loc 1 91 0
 1720 0022 0221     		movs	r1, #2
 1721 0024 FFF7FEFF 		bl	putLine_TextConverter_LCD
 1722              	.LVL291:
 1723 0028 0220     		movs	r0, #2
 1724 002a FFF7FEFF 		bl	updateLine_TextConverter_LCD
 1725              	.LVL292:
 1726 002e 1F4B     		ldr	r3, .L133+4
 1727 0030 1B68     		ldr	r3, [r3]
 1728 0032 2360     		str	r3, [r4]
  92:Src/Menu/FunctionsForButtons.c ****     {
 1729              		.loc 1 92 0
 1730 0034 FFF7FEFF 		bl	ThereIsNodeBelow_Menu
 1731              	.LVL293:
 1732 0038 D8B1     		cbz	r0, .L131
  98:Src/Menu/FunctionsForButtons.c ****     putLine_TextConverter_LCD(getName_Menu(), 3);   updateLine_TextConverter_LCD(3);
 1733              		.loc 1 98 0
 1734 003a FFF7FEFF 		bl	moveDown_Menu
 1735              	.LVL294:
  99:Src/Menu/FunctionsForButtons.c ****     if (!ThereIsNodeBelow_Menu())
 1736              		.loc 1 99 0
 1737 003e FFF7FEFF 		bl	getName_Menu
 1738              	.LVL295:
 1739 0042 0321     		movs	r1, #3
 1740 0044 FFF7FEFF 		bl	putLine_TextConverter_LCD
 1741              	.LVL296:
 1742 0048 0320     		movs	r0, #3
 1743 004a FFF7FEFF 		bl	updateLine_TextConverter_LCD
 1744              	.LVL297:
 100:Src/Menu/FunctionsForButtons.c ****     {
 1745              		.loc 1 100 0
 1746 004e FFF7FEFF 		bl	ThereIsNodeBelow_Menu
 1747              	.LVL298:
 1748 0052 F0B1     		cbz	r0, .L132
 106:Src/Menu/FunctionsForButtons.c ****     putLine_TextConverter_LCD(getName_Menu(), 4);   updateLine_TextConverter_LCD(4);
 1749              		.loc 1 106 0
 1750 0054 FFF7FEFF 		bl	moveDown_Menu
 1751              	.LVL299:
 107:Src/Menu/FunctionsForButtons.c ****     moveUp_Menu();
 1752              		.loc 1 107 0
 1753 0058 FFF7FEFF 		bl	getName_Menu
 1754              	.LVL300:
 1755 005c 0421     		movs	r1, #4
 1756 005e FFF7FEFF 		bl	putLine_TextConverter_LCD
 1757              	.LVL301:
 1758 0062 0420     		movs	r0, #4
 1759 0064 FFF7FEFF 		bl	updateLine_TextConverter_LCD
 1760              	.LVL302:
 108:Src/Menu/FunctionsForButtons.c ****     moveUp_Menu();
 1761              		.loc 1 108 0
 1762 0068 FFF7FEFF 		bl	moveUp_Menu
 1763              	.LVL303:
 109:Src/Menu/FunctionsForButtons.c **** }
 1764              		.loc 1 109 0
 1765 006c FFF7FEFF 		bl	moveUp_Menu
 1766              	.LVL304:
 1767 0070 0EE0     		b	.L126
ARM GAS  /tmp/ccymXkh7.s 			page 41


 1768              	.L131:
  94:Src/Menu/FunctionsForButtons.c ****         putLine_TextConverter_LCD(EMPTY_STRING, 4);   updateLine_TextConverter_LCD(4);
 1769              		.loc 1 94 0
 1770 0072 0F4C     		ldr	r4, .L133+8
 1771              	.LVL305:
 1772 0074 0321     		movs	r1, #3
 1773 0076 2046     		mov	r0, r4
 1774 0078 FFF7FEFF 		bl	putLine_TextConverter_LCD
 1775              	.LVL306:
 1776 007c 0320     		movs	r0, #3
 1777 007e FFF7FEFF 		bl	updateLine_TextConverter_LCD
 1778              	.LVL307:
  95:Src/Menu/FunctionsForButtons.c ****         return;
 1779              		.loc 1 95 0
 1780 0082 0421     		movs	r1, #4
 1781 0084 2046     		mov	r0, r4
 1782 0086 FFF7FEFF 		bl	putLine_TextConverter_LCD
 1783              	.LVL308:
 1784 008a 0420     		movs	r0, #4
 1785 008c FFF7FEFF 		bl	updateLine_TextConverter_LCD
 1786              	.LVL309:
 1787              	.L126:
 110:Src/Menu/FunctionsForButtons.c **** 
 1788              		.loc 1 110 0
 1789 0090 10BD     		pop	{r4, pc}
 1790              	.LVL310:
 1791              	.L132:
 102:Src/Menu/FunctionsForButtons.c ****         moveUp_Menu();
 1792              		.loc 1 102 0
 1793 0092 0421     		movs	r1, #4
 1794 0094 0648     		ldr	r0, .L133+8
 1795 0096 FFF7FEFF 		bl	putLine_TextConverter_LCD
 1796              	.LVL311:
 1797 009a 0420     		movs	r0, #4
 1798 009c FFF7FEFF 		bl	updateLine_TextConverter_LCD
 1799              	.LVL312:
 103:Src/Menu/FunctionsForButtons.c ****         return;
 1800              		.loc 1 103 0
 1801 00a0 FFF7FEFF 		bl	moveUp_Menu
 1802              	.LVL313:
 104:Src/Menu/FunctionsForButtons.c ****     }
 1803              		.loc 1 104 0
 1804 00a4 F4E7     		b	.L126
 1805              	.L134:
 1806 00a6 00BF     		.align	2
 1807              	.L133:
 1808 00a8 00000000 		.word	.LC66
 1809 00ac 08000000 		.word	.LC67
 1810 00b0 00000000 		.word	EMPTY_STRING
 1811              		.cfi_endproc
 1812              	.LFE68:
 1814              		.section	.text.printOk_Menu,"ax",%progbits
 1815              		.align	1
 1816              		.global	printOk_Menu
 1817              		.syntax unified
 1818              		.thumb
 1819              		.thumb_func
ARM GAS  /tmp/ccymXkh7.s 			page 42


 1820              		.fpu softvfp
 1822              	printOk_Menu:
 1823              	.LFB70:
 148:Src/Menu/FunctionsForButtons.c ****     if (getState_USBdrive() == NOT_READY_USBDRIVE)  return;
 1824              		.loc 1 148 0
 1825              		.cfi_startproc
 1826              		@ args = 0, pretend = 0, frame = 0
 1827              		@ frame_needed = 0, uses_anonymous_args = 0
 1828 0000 10B5     		push	{r4, lr}
 1829              	.LCFI12:
 1830              		.cfi_def_cfa_offset 8
 1831              		.cfi_offset 4, -8
 1832              		.cfi_offset 14, -4
 149:Src/Menu/FunctionsForButtons.c ****     if (getMountedStatus() == UNMOUNTED_USBDRIVE)   mount_USBdrive();
 1833              		.loc 1 149 0
 1834 0002 FFF7FEFF 		bl	getState_USBdrive
 1835              	.LVL314:
 1836 0006 00B9     		cbnz	r0, .L149
 1837              	.L135:
 200:Src/Menu/FunctionsForButtons.c **** 
 1838              		.loc 1 200 0
 1839 0008 10BD     		pop	{r4, pc}
 1840              	.L149:
 150:Src/Menu/FunctionsForButtons.c ****     openDirectory_USBdrive(USBHPath);
 1841              		.loc 1 150 0
 1842 000a FFF7FEFF 		bl	getMountedStatus
 1843              	.LVL315:
 1844 000e 70B3     		cbz	r0, .L150
 1845              	.L137:
 151:Src/Menu/FunctionsForButtons.c ****     destroyRightNode_Menu();
 1846              		.loc 1 151 0
 1847 0010 5948     		ldr	r0, .L157
 1848 0012 FFF7FEFF 		bl	openDirectory_USBdrive
 1849              	.LVL316:
 152:Src/Menu/FunctionsForButtons.c **** 
 1850              		.loc 1 152 0
 1851 0016 FFF7FEFF 		bl	destroyRightNode_Menu
 1852              	.LVL317:
 154:Src/Menu/FunctionsForButtons.c ****     putLine_TextConverter_LCD(getWideLongName_USBdrive(), 2);  updateLine_TextConverter_LCD(2);
 1853              		.loc 1 154 0
 1854 001a FFF7FEFF 		bl	readItem_USBdrive
 1855              	.LVL318:
 155:Src/Menu/FunctionsForButtons.c ****     if(getItemType_USBdrive() == ITEM_IS_EMPTY)
 1856              		.loc 1 155 0
 1857 001e FFF7FEFF 		bl	getWideLongName_USBdrive
 1858              	.LVL319:
 1859 0022 0221     		movs	r1, #2
 1860 0024 FFF7FEFF 		bl	putLine_TextConverter_LCD
 1861              	.LVL320:
 1862 0028 0220     		movs	r0, #2
 1863 002a FFF7FEFF 		bl	updateLine_TextConverter_LCD
 1864              	.LVL321:
 156:Src/Menu/FunctionsForButtons.c ****         return;
 1865              		.loc 1 156 0
 1866 002e FFF7FEFF 		bl	getItemType_USBdrive
 1867              	.LVL322:
 1868 0032 0028     		cmp	r0, #0
ARM GAS  /tmp/ccymXkh7.s 			page 43


 1869 0034 E8D0     		beq	.L135
 158:Src/Menu/FunctionsForButtons.c ****     moveRight_Menu();
 1870              		.loc 1 158 0
 1871 0036 FFF7FEFF 		bl	getWideLongName_USBdrive
 1872              	.LVL323:
 1873 003a 0146     		mov	r1, r0
 1874 003c 4F48     		ldr	r0, .L157+4
 1875 003e FFF7FEFF 		bl	createRightNode_Menu
 1876              	.LVL324:
 159:Src/Menu/FunctionsForButtons.c **** 
 1877              		.loc 1 159 0
 1878 0042 FFF7FEFF 		bl	moveRight_Menu
 1879              	.LVL325:
 161:Src/Menu/FunctionsForButtons.c ****     setFunctionDown(&simpleNavigationDown_Menu);
 1880              		.loc 1 161 0
 1881 0046 4E48     		ldr	r0, .L157+8
 1882 0048 FFF7FEFF 		bl	setFunctionUp
 1883              	.LVL326:
 162:Src/Menu/FunctionsForButtons.c ****     setFunctionBack(&simpleNavigationBack_Menu);
 1884              		.loc 1 162 0
 1885 004c 4D48     		ldr	r0, .L157+12
 1886 004e FFF7FEFF 		bl	setFunctionDown
 1887              	.LVL327:
 163:Src/Menu/FunctionsForButtons.c ****     if (getItemType_USBdrive() == ITEM_IS_DIRECTORY) setFunctionOk(&openDirectory_Menu);
 1888              		.loc 1 163 0
 1889 0052 4D48     		ldr	r0, .L157+16
 1890 0054 FFF7FEFF 		bl	setFunctionBack
 1891              	.LVL328:
 164:Src/Menu/FunctionsForButtons.c ****     if (getItemType_USBdrive() == ITEM_IS_FILE)      setFunctionOk(&runGcode_Menu);
 1892              		.loc 1 164 0
 1893 0058 FFF7FEFF 		bl	getItemType_USBdrive
 1894              	.LVL329:
 1895 005c 0228     		cmp	r0, #2
 1896 005e 09D0     		beq	.L151
 1897              	.L138:
 165:Src/Menu/FunctionsForButtons.c **** 
 1898              		.loc 1 165 0
 1899 0060 FFF7FEFF 		bl	getItemType_USBdrive
 1900              	.LVL330:
 1901 0064 0128     		cmp	r0, #1
 1902 0066 09D0     		beq	.L152
 1903              	.L139:
 167:Src/Menu/FunctionsForButtons.c ****     while(getItemType_USBdrive() != ITEM_IS_EMPTY)
 1904              		.loc 1 167 0
 1905 0068 FFF7FEFF 		bl	readItem_USBdrive
 1906              	.LVL331:
 168:Src/Menu/FunctionsForButtons.c ****     {
 1907              		.loc 1 168 0
 1908 006c 10E0     		b	.L140
 1909              	.L150:
 150:Src/Menu/FunctionsForButtons.c ****     openDirectory_USBdrive(USBHPath);
 1910              		.loc 1 150 0 discriminator 1
 1911 006e FFF7FEFF 		bl	mount_USBdrive
 1912              	.LVL332:
 1913 0072 CDE7     		b	.L137
 1914              	.L151:
 164:Src/Menu/FunctionsForButtons.c ****     if (getItemType_USBdrive() == ITEM_IS_FILE)      setFunctionOk(&runGcode_Menu);
ARM GAS  /tmp/ccymXkh7.s 			page 44


 1915              		.loc 1 164 0 discriminator 1
 1916 0074 4548     		ldr	r0, .L157+20
 1917 0076 FFF7FEFF 		bl	setFunctionOk
 1918              	.LVL333:
 1919 007a F1E7     		b	.L138
 1920              	.L152:
 165:Src/Menu/FunctionsForButtons.c **** 
 1921              		.loc 1 165 0 discriminator 1
 1922 007c 4448     		ldr	r0, .L157+24
 1923 007e FFF7FEFF 		bl	setFunctionOk
 1924              	.LVL334:
 1925 0082 F1E7     		b	.L139
 1926              	.L153:
 175:Src/Menu/FunctionsForButtons.c ****         if (getItemType_USBdrive() == ITEM_IS_FILE)      setFunctionOk(&runGcode_Menu);
 1927              		.loc 1 175 0 discriminator 1
 1928 0084 4148     		ldr	r0, .L157+20
 1929 0086 FFF7FEFF 		bl	setFunctionOk
 1930              	.LVL335:
 1931 008a 17E0     		b	.L141
 1932              	.L142:
 177:Src/Menu/FunctionsForButtons.c ****     }
 1933              		.loc 1 177 0
 1934 008c FFF7FEFF 		bl	readItem_USBdrive
 1935              	.LVL336:
 1936              	.L140:
 168:Src/Menu/FunctionsForButtons.c ****     {
 1937              		.loc 1 168 0
 1938 0090 FFF7FEFF 		bl	getItemType_USBdrive
 1939              	.LVL337:
 1940 0094 D0B1     		cbz	r0, .L144
 170:Src/Menu/FunctionsForButtons.c ****         moveDown_Menu();
 1941              		.loc 1 170 0
 1942 0096 FFF7FEFF 		bl	getWideLongName_USBdrive
 1943              	.LVL338:
 1944 009a FFF7FEFF 		bl	createDownNode_Menu
 1945              	.LVL339:
 171:Src/Menu/FunctionsForButtons.c ****         setFunctionUp(&simpleNavigationUp_Menu);
 1946              		.loc 1 171 0
 1947 009e FFF7FEFF 		bl	moveDown_Menu
 1948              	.LVL340:
 172:Src/Menu/FunctionsForButtons.c ****         setFunctionDown(&simpleNavigationDown_Menu);
 1949              		.loc 1 172 0
 1950 00a2 3748     		ldr	r0, .L157+8
 1951 00a4 FFF7FEFF 		bl	setFunctionUp
 1952              	.LVL341:
 173:Src/Menu/FunctionsForButtons.c ****         setFunctionBack(&simpleNavigationBack_Menu);
 1953              		.loc 1 173 0
 1954 00a8 3648     		ldr	r0, .L157+12
 1955 00aa FFF7FEFF 		bl	setFunctionDown
 1956              	.LVL342:
 174:Src/Menu/FunctionsForButtons.c ****         if (getItemType_USBdrive() == ITEM_IS_DIRECTORY) setFunctionOk(&openDirectory_Menu);
 1957              		.loc 1 174 0
 1958 00ae 3648     		ldr	r0, .L157+16
 1959 00b0 FFF7FEFF 		bl	setFunctionBack
 1960              	.LVL343:
 175:Src/Menu/FunctionsForButtons.c ****         if (getItemType_USBdrive() == ITEM_IS_FILE)      setFunctionOk(&runGcode_Menu);
 1961              		.loc 1 175 0
ARM GAS  /tmp/ccymXkh7.s 			page 45


 1962 00b4 FFF7FEFF 		bl	getItemType_USBdrive
 1963              	.LVL344:
 1964 00b8 0228     		cmp	r0, #2
 1965 00ba E3D0     		beq	.L153
 1966              	.L141:
 176:Src/Menu/FunctionsForButtons.c ****         readItem_USBdrive();
 1967              		.loc 1 176 0
 1968 00bc FFF7FEFF 		bl	getItemType_USBdrive
 1969              	.LVL345:
 1970 00c0 0128     		cmp	r0, #1
 1971 00c2 E3D1     		bne	.L142
 176:Src/Menu/FunctionsForButtons.c ****         readItem_USBdrive();
 1972              		.loc 1 176 0 is_stmt 0 discriminator 1
 1973 00c4 3248     		ldr	r0, .L157+24
 1974 00c6 FFF7FEFF 		bl	setFunctionOk
 1975              	.LVL346:
 1976 00ca DFE7     		b	.L142
 1977              	.L144:
 180:Src/Menu/FunctionsForButtons.c **** 
 1978              		.loc 1 180 0 is_stmt 1 discriminator 1
 1979 00cc FFF7FEFF 		bl	ThereIsNodeAbove_Menu
 1980              	.LVL347:
 1981 00d0 10B1     		cbz	r0, .L154
 180:Src/Menu/FunctionsForButtons.c **** 
 1982              		.loc 1 180 0 is_stmt 0 discriminator 2
 1983 00d2 FFF7FEFF 		bl	moveUp_Menu
 1984              	.LVL348:
 1985 00d6 F9E7     		b	.L144
 1986              	.L154:
 182:Src/Menu/FunctionsForButtons.c ****     wchar_t* currName = (wchar_t*) getName_Menu();  currName[0] = *L">";
 1987              		.loc 1 182 0 is_stmt 1
 1988 00d8 FFF7FEFF 		bl	getTitle_Menu
 1989              	.LVL349:
 1990 00dc 0121     		movs	r1, #1
 1991 00de FFF7FEFF 		bl	putLine_TextConverter_LCD
 1992              	.LVL350:
 1993 00e2 0120     		movs	r0, #1
 1994 00e4 FFF7FEFF 		bl	updateLine_TextConverter_LCD
 1995              	.LVL351:
 183:Src/Menu/FunctionsForButtons.c ****     putLine_TextConverter_LCD(currName, 2);         updateLine_TextConverter_LCD(2);    currName[0]
 1996              		.loc 1 183 0
 1997 00e8 FFF7FEFF 		bl	getName_Menu
 1998              	.LVL352:
 1999 00ec 0446     		mov	r4, r0
 2000              	.LVL353:
 2001 00ee 294B     		ldr	r3, .L157+28
 2002 00f0 1B68     		ldr	r3, [r3]
 2003 00f2 0360     		str	r3, [r0]
 184:Src/Menu/FunctionsForButtons.c ****     if(!ThereIsNodeBelow_Menu())
 2004              		.loc 1 184 0
 2005 00f4 0221     		movs	r1, #2
 2006 00f6 FFF7FEFF 		bl	putLine_TextConverter_LCD
 2007              	.LVL354:
 2008 00fa 0220     		movs	r0, #2
 2009 00fc FFF7FEFF 		bl	updateLine_TextConverter_LCD
 2010              	.LVL355:
 2011 0100 254B     		ldr	r3, .L157+32
ARM GAS  /tmp/ccymXkh7.s 			page 46


 2012 0102 1B68     		ldr	r3, [r3]
 2013 0104 2360     		str	r3, [r4]
 185:Src/Menu/FunctionsForButtons.c ****     {
 2014              		.loc 1 185 0
 2015 0106 FFF7FEFF 		bl	ThereIsNodeBelow_Menu
 2016              	.LVL356:
 2017 010a D8B1     		cbz	r0, .L155
 191:Src/Menu/FunctionsForButtons.c ****     if(!ThereIsNodeBelow_Menu())
 2018              		.loc 1 191 0
 2019 010c FFF7FEFF 		bl	moveDown_Menu
 2020              	.LVL357:
 2021 0110 FFF7FEFF 		bl	getName_Menu
 2022              	.LVL358:
 2023 0114 0321     		movs	r1, #3
 2024 0116 FFF7FEFF 		bl	putLine_TextConverter_LCD
 2025              	.LVL359:
 2026 011a 0320     		movs	r0, #3
 2027 011c FFF7FEFF 		bl	updateLine_TextConverter_LCD
 2028              	.LVL360:
 192:Src/Menu/FunctionsForButtons.c ****     {
 2029              		.loc 1 192 0
 2030 0120 FFF7FEFF 		bl	ThereIsNodeBelow_Menu
 2031              	.LVL361:
 2032 0124 F0B1     		cbz	r0, .L156
 198:Src/Menu/FunctionsForButtons.c ****     moveUp_Menu();      moveUp_Menu();
 2033              		.loc 1 198 0
 2034 0126 FFF7FEFF 		bl	moveDown_Menu
 2035              	.LVL362:
 2036 012a FFF7FEFF 		bl	getName_Menu
 2037              	.LVL363:
 2038 012e 0421     		movs	r1, #4
 2039 0130 FFF7FEFF 		bl	putLine_TextConverter_LCD
 2040              	.LVL364:
 2041 0134 0420     		movs	r0, #4
 2042 0136 FFF7FEFF 		bl	updateLine_TextConverter_LCD
 2043              	.LVL365:
 199:Src/Menu/FunctionsForButtons.c **** }
 2044              		.loc 1 199 0
 2045 013a FFF7FEFF 		bl	moveUp_Menu
 2046              	.LVL366:
 2047 013e FFF7FEFF 		bl	moveUp_Menu
 2048              	.LVL367:
 2049 0142 61E7     		b	.L135
 2050              	.L155:
 187:Src/Menu/FunctionsForButtons.c ****         putLine_TextConverter_LCD(EMPTY_STRING, 4); updateLine_TextConverter_LCD(4);
 2051              		.loc 1 187 0
 2052 0144 154C     		ldr	r4, .L157+36
 2053              	.LVL368:
 2054 0146 0321     		movs	r1, #3
 2055 0148 2046     		mov	r0, r4
 2056 014a FFF7FEFF 		bl	putLine_TextConverter_LCD
 2057              	.LVL369:
 2058 014e 0320     		movs	r0, #3
 2059 0150 FFF7FEFF 		bl	updateLine_TextConverter_LCD
 2060              	.LVL370:
 188:Src/Menu/FunctionsForButtons.c ****         return;
 2061              		.loc 1 188 0
ARM GAS  /tmp/ccymXkh7.s 			page 47


 2062 0154 0421     		movs	r1, #4
 2063 0156 2046     		mov	r0, r4
 2064 0158 FFF7FEFF 		bl	putLine_TextConverter_LCD
 2065              	.LVL371:
 2066 015c 0420     		movs	r0, #4
 2067 015e FFF7FEFF 		bl	updateLine_TextConverter_LCD
 2068              	.LVL372:
 189:Src/Menu/FunctionsForButtons.c ****     }
 2069              		.loc 1 189 0
 2070 0162 51E7     		b	.L135
 2071              	.LVL373:
 2072              	.L156:
 194:Src/Menu/FunctionsForButtons.c ****         moveUp_Menu();
 2073              		.loc 1 194 0
 2074 0164 0421     		movs	r1, #4
 2075 0166 0D48     		ldr	r0, .L157+36
 2076 0168 FFF7FEFF 		bl	putLine_TextConverter_LCD
 2077              	.LVL374:
 2078 016c 0420     		movs	r0, #4
 2079 016e FFF7FEFF 		bl	updateLine_TextConverter_LCD
 2080              	.LVL375:
 195:Src/Menu/FunctionsForButtons.c ****         return;
 2081              		.loc 1 195 0
 2082 0172 FFF7FEFF 		bl	moveUp_Menu
 2083              	.LVL376:
 196:Src/Menu/FunctionsForButtons.c ****     }
 2084              		.loc 1 196 0
 2085 0176 47E7     		b	.L135
 2086              	.L158:
 2087              		.align	2
 2088              	.L157:
 2089 0178 00000000 		.word	USBHPath
 2090 017c 00000000 		.word	.LC72
 2091 0180 00000000 		.word	simpleNavigationUp_Menu
 2092 0184 00000000 		.word	simpleNavigationDown_Menu
 2093 0188 00000000 		.word	simpleNavigationBack_Menu
 2094 018c 00000000 		.word	openDirectory_Menu
 2095 0190 00000000 		.word	runGcode_Menu
 2096 0194 00000000 		.word	.LC66
 2097 0198 08000000 		.word	.LC67
 2098 019c 00000000 		.word	EMPTY_STRING
 2099              		.cfi_endproc
 2100              	.LFE70:
 2102              		.section	.text.changeFilamentOk_Menu,"ax",%progbits
 2103              		.align	1
 2104              		.global	changeFilamentOk_Menu
 2105              		.syntax unified
 2106              		.thumb
 2107              		.thumb_func
 2108              		.fpu softvfp
 2110              	changeFilamentOk_Menu:
 2111              	.LFB71:
 203:Src/Menu/FunctionsForButtons.c **** 
 2112              		.loc 1 203 0
 2113              		.cfi_startproc
 2114              		@ args = 0, pretend = 0, frame = 0
 2115              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccymXkh7.s 			page 48


 2116 0000 08B5     		push	{r3, lr}
 2117              	.LCFI13:
 2118              		.cfi_def_cfa_offset 8
 2119              		.cfi_offset 3, -8
 2120              		.cfi_offset 14, -4
 203:Src/Menu/FunctionsForButtons.c **** 
 2121              		.loc 1 203 0
 2122 0002 FFF7FEFF 		bl	moveRight_Menu
 2123              	.LVL377:
 2124 0006 08BD     		pop	{r3, pc}
 2125              		.cfi_endproc
 2126              	.LFE71:
 2128              		.section	.text.setTheTemperatureOk_Menu,"ax",%progbits
 2129              		.align	1
 2130              		.global	setTheTemperatureOk_Menu
 2131              		.syntax unified
 2132              		.thumb
 2133              		.thumb_func
 2134              		.fpu softvfp
 2136              	setTheTemperatureOk_Menu:
 2137              	.LFB72:
 205:Src/Menu/FunctionsForButtons.c **** void setTheTemperatureBack_Menu(void) { moveLeft_Menu(); }
 2138              		.loc 1 205 0
 2139              		.cfi_startproc
 2140              		@ args = 0, pretend = 0, frame = 0
 2141              		@ frame_needed = 0, uses_anonymous_args = 0
 2142              		@ link register save eliminated.
 205:Src/Menu/FunctionsForButtons.c **** void setTheTemperatureBack_Menu(void) { moveLeft_Menu(); }
 2143              		.loc 1 205 0
 2144 0000 7047     		bx	lr
 2145              		.cfi_endproc
 2146              	.LFE72:
 2148              		.section	.text.setTheTemperatureBack_Menu,"ax",%progbits
 2149              		.align	1
 2150              		.global	setTheTemperatureBack_Menu
 2151              		.syntax unified
 2152              		.thumb
 2153              		.thumb_func
 2154              		.fpu softvfp
 2156              	setTheTemperatureBack_Menu:
 2157              	.LFB73:
 206:Src/Menu/FunctionsForButtons.c **** void setTheTemperatureUp_Menu(void) {}
 2158              		.loc 1 206 0
 2159              		.cfi_startproc
 2160              		@ args = 0, pretend = 0, frame = 0
 2161              		@ frame_needed = 0, uses_anonymous_args = 0
 2162 0000 08B5     		push	{r3, lr}
 2163              	.LCFI14:
 2164              		.cfi_def_cfa_offset 8
 2165              		.cfi_offset 3, -8
 2166              		.cfi_offset 14, -4
 206:Src/Menu/FunctionsForButtons.c **** void setTheTemperatureUp_Menu(void) {}
 2167              		.loc 1 206 0
 2168 0002 FFF7FEFF 		bl	moveLeft_Menu
 2169              	.LVL378:
 2170 0006 08BD     		pop	{r3, pc}
 2171              		.cfi_endproc
ARM GAS  /tmp/ccymXkh7.s 			page 49


 2172              	.LFE73:
 2174              		.section	.text.setTheTemperatureUp_Menu,"ax",%progbits
 2175              		.align	1
 2176              		.global	setTheTemperatureUp_Menu
 2177              		.syntax unified
 2178              		.thumb
 2179              		.thumb_func
 2180              		.fpu softvfp
 2182              	setTheTemperatureUp_Menu:
 2183              	.LFB74:
 207:Src/Menu/FunctionsForButtons.c **** void setTheTemperatureDown_Menu(void) {}
 2184              		.loc 1 207 0
 2185              		.cfi_startproc
 2186              		@ args = 0, pretend = 0, frame = 0
 2187              		@ frame_needed = 0, uses_anonymous_args = 0
 2188              		@ link register save eliminated.
 207:Src/Menu/FunctionsForButtons.c **** void setTheTemperatureDown_Menu(void) {}
 2189              		.loc 1 207 0
 2190 0000 7047     		bx	lr
 2191              		.cfi_endproc
 2192              	.LFE74:
 2194              		.section	.text.setTheTemperatureDown_Menu,"ax",%progbits
 2195              		.align	1
 2196              		.global	setTheTemperatureDown_Menu
 2197              		.syntax unified
 2198              		.thumb
 2199              		.thumb_func
 2200              		.fpu softvfp
 2202              	setTheTemperatureDown_Menu:
 2203              	.LFB75:
 208:Src/Menu/FunctionsForButtons.c **** 
 2204              		.loc 1 208 0
 2205              		.cfi_startproc
 2206              		@ args = 0, pretend = 0, frame = 0
 2207              		@ frame_needed = 0, uses_anonymous_args = 0
 2208              		@ link register save eliminated.
 208:Src/Menu/FunctionsForButtons.c **** 
 2209              		.loc 1 208 0
 2210 0000 7047     		bx	lr
 2211              		.cfi_endproc
 2212              	.LFE75:
 2214              		.section	.text.englishOk_Menu,"ax",%progbits
 2215              		.align	1
 2216              		.global	englishOk_Menu
 2217              		.syntax unified
 2218              		.thumb
 2219              		.thumb_func
 2220              		.fpu softvfp
 2222              	englishOk_Menu:
 2223              	.LFB76:
 210:Src/Menu/FunctionsForButtons.c **** void englishBack_Menu(void) { moveLeft_Menu(); }
 2224              		.loc 1 210 0
 2225              		.cfi_startproc
 2226              		@ args = 0, pretend = 0, frame = 0
 2227              		@ frame_needed = 0, uses_anonymous_args = 0
 2228              		@ link register save eliminated.
 210:Src/Menu/FunctionsForButtons.c **** void englishBack_Menu(void) { moveLeft_Menu(); }
ARM GAS  /tmp/ccymXkh7.s 			page 50


 2229              		.loc 1 210 0
 2230 0000 7047     		bx	lr
 2231              		.cfi_endproc
 2232              	.LFE76:
 2234              		.section	.text.englishBack_Menu,"ax",%progbits
 2235              		.align	1
 2236              		.global	englishBack_Menu
 2237              		.syntax unified
 2238              		.thumb
 2239              		.thumb_func
 2240              		.fpu softvfp
 2242              	englishBack_Menu:
 2243              	.LFB77:
 211:Src/Menu/FunctionsForButtons.c **** void russianOk_Menu(void) {}
 2244              		.loc 1 211 0
 2245              		.cfi_startproc
 2246              		@ args = 0, pretend = 0, frame = 0
 2247              		@ frame_needed = 0, uses_anonymous_args = 0
 2248 0000 08B5     		push	{r3, lr}
 2249              	.LCFI15:
 2250              		.cfi_def_cfa_offset 8
 2251              		.cfi_offset 3, -8
 2252              		.cfi_offset 14, -4
 211:Src/Menu/FunctionsForButtons.c **** void russianOk_Menu(void) {}
 2253              		.loc 1 211 0
 2254 0002 FFF7FEFF 		bl	moveLeft_Menu
 2255              	.LVL379:
 2256 0006 08BD     		pop	{r3, pc}
 2257              		.cfi_endproc
 2258              	.LFE77:
 2260              		.section	.text.russianOk_Menu,"ax",%progbits
 2261              		.align	1
 2262              		.global	russianOk_Menu
 2263              		.syntax unified
 2264              		.thumb
 2265              		.thumb_func
 2266              		.fpu softvfp
 2268              	russianOk_Menu:
 2269              	.LFB78:
 212:Src/Menu/FunctionsForButtons.c **** void russianBack_Menu(void) { moveLeft_Menu(); }
 2270              		.loc 1 212 0
 2271              		.cfi_startproc
 2272              		@ args = 0, pretend = 0, frame = 0
 2273              		@ frame_needed = 0, uses_anonymous_args = 0
 2274              		@ link register save eliminated.
 212:Src/Menu/FunctionsForButtons.c **** void russianBack_Menu(void) { moveLeft_Menu(); }
 2275              		.loc 1 212 0
 2276 0000 7047     		bx	lr
 2277              		.cfi_endproc
 2278              	.LFE78:
 2280              		.section	.text.russianBack_Menu,"ax",%progbits
 2281              		.align	1
 2282              		.global	russianBack_Menu
 2283              		.syntax unified
 2284              		.thumb
 2285              		.thumb_func
 2286              		.fpu softvfp
ARM GAS  /tmp/ccymXkh7.s 			page 51


 2288              	russianBack_Menu:
 2289              	.LFB79:
 213:Src/Menu/FunctionsForButtons.c **** 
 2290              		.loc 1 213 0
 2291              		.cfi_startproc
 2292              		@ args = 0, pretend = 0, frame = 0
 2293              		@ frame_needed = 0, uses_anonymous_args = 0
 2294 0000 08B5     		push	{r3, lr}
 2295              	.LCFI16:
 2296              		.cfi_def_cfa_offset 8
 2297              		.cfi_offset 3, -8
 2298              		.cfi_offset 14, -4
 213:Src/Menu/FunctionsForButtons.c **** 
 2299              		.loc 1 213 0
 2300 0002 FFF7FEFF 		bl	moveLeft_Menu
 2301              	.LVL380:
 2302 0006 08BD     		pop	{r3, pc}
 2303              		.cfi_endproc
 2304              	.LFE79:
 2306              		.section	.text.helpOk_Menu,"ax",%progbits
 2307              		.align	1
 2308              		.global	helpOk_Menu
 2309              		.syntax unified
 2310              		.thumb
 2311              		.thumb_func
 2312              		.fpu softvfp
 2314              	helpOk_Menu:
 2315              	.LFB80:
 215:Src/Menu/FunctionsForButtons.c **** void helpBack_Menu(void) {}
 2316              		.loc 1 215 0
 2317              		.cfi_startproc
 2318              		@ args = 0, pretend = 0, frame = 0
 2319              		@ frame_needed = 0, uses_anonymous_args = 0
 2320              		@ link register save eliminated.
 215:Src/Menu/FunctionsForButtons.c **** void helpBack_Menu(void) {}
 2321              		.loc 1 215 0
 2322 0000 7047     		bx	lr
 2323              		.cfi_endproc
 2324              	.LFE80:
 2326              		.section	.text.helpBack_Menu,"ax",%progbits
 2327              		.align	1
 2328              		.global	helpBack_Menu
 2329              		.syntax unified
 2330              		.thumb
 2331              		.thumb_func
 2332              		.fpu softvfp
 2334              	helpBack_Menu:
 2335              	.LFB81:
 216:Src/Menu/FunctionsForButtons.c **** 
 2336              		.loc 1 216 0
 2337              		.cfi_startproc
 2338              		@ args = 0, pretend = 0, frame = 0
 2339              		@ frame_needed = 0, uses_anonymous_args = 0
 2340              		@ link register save eliminated.
 216:Src/Menu/FunctionsForButtons.c **** 
 2341              		.loc 1 216 0
 2342 0000 7047     		bx	lr
ARM GAS  /tmp/ccymXkh7.s 			page 52


 2343              		.cfi_endproc
 2344              	.LFE81:
 2346              		.section	.text.emptyFunction_Menu,"ax",%progbits
 2347              		.align	1
 2348              		.global	emptyFunction_Menu
 2349              		.syntax unified
 2350              		.thumb
 2351              		.thumb_func
 2352              		.fpu softvfp
 2354              	emptyFunction_Menu:
 2355              	.LFB82:
 222:Src/Menu/FunctionsForButtons.c **** 
 2356              		.loc 1 222 0
 2357              		.cfi_startproc
 2358              		@ args = 0, pretend = 0, frame = 0
 2359              		@ frame_needed = 0, uses_anonymous_args = 0
 2360              		@ link register save eliminated.
 222:Src/Menu/FunctionsForButtons.c **** 
 2361              		.loc 1 222 0
 2362 0000 7047     		bx	lr
 2363              		.cfi_endproc
 2364              	.LFE82:
 2366              		.section	.text.closeDirectory_Menu,"ax",%progbits
 2367              		.align	1
 2368              		.global	closeDirectory_Menu
 2369              		.syntax unified
 2370              		.thumb
 2371              		.thumb_func
 2372              		.fpu softvfp
 2374              	closeDirectory_Menu:
 2375              	.LFB84:
 225:Src/Menu/FunctionsForButtons.c **** 
 2376              		.loc 1 225 0
 2377              		.cfi_startproc
 2378              		@ args = 0, pretend = 0, frame = 0
 2379              		@ frame_needed = 0, uses_anonymous_args = 0
 2380              		@ link register save eliminated.
 225:Src/Menu/FunctionsForButtons.c **** 
 2381              		.loc 1 225 0
 2382 0000 7047     		bx	lr
 2383              		.cfi_endproc
 2384              	.LFE84:
 2386              		.section	.rodata
 2387              		.align	2
 2388              		.set	.LANCHOR0,. + 0
 2389              	.LC68:
 2390 0000 2E000000 		.ascii	".\000\000\000g\000\000\000c\000\000\000o\000\000\000"
 2390      67000000 
 2390      63000000 
 2390      6F000000 
 2391 0010 64000000 		.ascii	"d\000\000\000e\000\000\000\000\000\000\000\000\000\000"
 2391      65000000 
 2391      00000000 
 2391      000000
 2392 001f 00       		.ascii	"\000"
 2393              		.section	.rodata.printOk_Menu.str4.4,"aMS",%progbits,4
 2394              		.align	2
ARM GAS  /tmp/ccymXkh7.s 			page 53


 2395              	.LC72:
 2396 0000 55000000 		.ascii	"U\000\000\000S\000\000\000B\000\000\000 \000\000\000"
 2396      53000000 
 2396      42000000 
 2396      20000000 
 2397 0010 64000000 		.ascii	"d\000\000\000r\000\000\000i\000\000\000v\000\000\000"
 2397      72000000 
 2397      69000000 
 2397      76000000 
 2398 0020 65000000 		.ascii	"e\000\000\000\000\000\000\000"
 2398      00000000 
 2399              		.section	.rodata.runGcode_Menu.str1.4,"aMS",%progbits,1
 2400              		.align	2
 2401              	.LC70:
 2402 0000 25732F25 		.ascii	"%s/%s\000"
 2402      7300
 2403              		.section	.rodata.runGcode_Menu.str4.4,"aMS",%progbits,4
 2404              		.align	2
 2405              	.LC69:
 2406 0000 47000000 		.ascii	"G\000\000\000c\000\000\000o\000\000\000d\000\000\000"
 2406      63000000 
 2406      6F000000 
 2406      64000000 
 2407 0010 65000000 		.ascii	"e\000\000\000 \000\000\000f\000\000\000i\000\000\000"
 2407      20000000 
 2407      66000000 
 2407      69000000 
 2408 0020 6C000000 		.ascii	"l\000\000\000e\000\000\000\000\000\000\000"
 2408      65000000 
 2408      00000000 
 2409              	.LC71:
 2410 002c 6E000000 		.ascii	"n\000\000\000o\000\000\000t\000\000\000 \000\000\000"
 2410      6F000000 
 2410      74000000 
 2410      20000000 
 2411 003c 61000000 		.ascii	"a\000\000\000 \000\000\000G\000\000\000c\000\000\000"
 2411      20000000 
 2411      47000000 
 2411      63000000 
 2412 004c 6F000000 		.ascii	"o\000\000\000d\000\000\000e\000\000\000 \000\000\000"
 2412      64000000 
 2412      65000000 
 2412      20000000 
 2413 005c 66000000 		.ascii	"f\000\000\000i\000\000\000l\000\000\000e\000\000\000"
 2413      69000000 
 2413      6C000000 
 2413      65000000 
 2414 006c 00000000 		.ascii	"\000\000\000\000"
 2415              		.section	.rodata.simpleNavigationDown_Menu.str4.4,"aMS",%progbits,4
 2416              		.align	2
 2417              	.LC66:
 2418 0000 3E000000 		.ascii	">\000\000\000\000\000\000\000"
 2418      00000000 
 2419              	.LC67:
 2420 0008 20000000 		.ascii	" \000\000\000\000\000\000\000"
 2420      00000000 
 2421              		.section	.rodata.wchar_t2TCHAR.str4.4,"aMS",%progbits,4
ARM GAS  /tmp/ccymXkh7.s 			page 54


 2422              		.align	2
 2423              	.LC0:
 2424 0000 30040000 		.ascii	"0\004\000\000\000\000\000\000"
 2424      00000000 
 2425              	.LC1:
 2426 0008 31040000 		.ascii	"1\004\000\000\000\000\000\000"
 2426      00000000 
 2427              	.LC2:
 2428 0010 32040000 		.ascii	"2\004\000\000\000\000\000\000"
 2428      00000000 
 2429              	.LC3:
 2430 0018 33040000 		.ascii	"3\004\000\000\000\000\000\000"
 2430      00000000 
 2431              	.LC4:
 2432 0020 34040000 		.ascii	"4\004\000\000\000\000\000\000"
 2432      00000000 
 2433              	.LC5:
 2434 0028 35040000 		.ascii	"5\004\000\000\000\000\000\000"
 2434      00000000 
 2435              	.LC6:
 2436 0030 51040000 		.ascii	"Q\004\000\000\000\000\000\000"
 2436      00000000 
 2437              	.LC7:
 2438 0038 36040000 		.ascii	"6\004\000\000\000\000\000\000"
 2438      00000000 
 2439              	.LC8:
 2440 0040 37040000 		.ascii	"7\004\000\000\000\000\000\000"
 2440      00000000 
 2441              	.LC9:
 2442 0048 38040000 		.ascii	"8\004\000\000\000\000\000\000"
 2442      00000000 
 2443              	.LC10:
 2444 0050 39040000 		.ascii	"9\004\000\000\000\000\000\000"
 2444      00000000 
 2445              	.LC11:
 2446 0058 3A040000 		.ascii	":\004\000\000\000\000\000\000"
 2446      00000000 
 2447              	.LC12:
 2448 0060 3B040000 		.ascii	";\004\000\000\000\000\000\000"
 2448      00000000 
 2449              	.LC13:
 2450 0068 3C040000 		.ascii	"<\004\000\000\000\000\000\000"
 2450      00000000 
 2451              	.LC14:
 2452 0070 3D040000 		.ascii	"=\004\000\000\000\000\000\000"
 2452      00000000 
 2453              	.LC15:
 2454 0078 3E040000 		.ascii	">\004\000\000\000\000\000\000"
 2454      00000000 
 2455              	.LC16:
 2456 0080 3F040000 		.ascii	"?\004\000\000\000\000\000\000"
 2456      00000000 
 2457              	.LC17:
 2458 0088 40040000 		.ascii	"@\004\000\000\000\000\000\000"
 2458      00000000 
 2459              	.LC18:
 2460 0090 41040000 		.ascii	"A\004\000\000\000\000\000\000"
ARM GAS  /tmp/ccymXkh7.s 			page 55


 2460      00000000 
 2461              	.LC19:
 2462 0098 42040000 		.ascii	"B\004\000\000\000\000\000\000"
 2462      00000000 
 2463              	.LC20:
 2464 00a0 43040000 		.ascii	"C\004\000\000\000\000\000\000"
 2464      00000000 
 2465              	.LC21:
 2466 00a8 44040000 		.ascii	"D\004\000\000\000\000\000\000"
 2466      00000000 
 2467              	.LC22:
 2468 00b0 45040000 		.ascii	"E\004\000\000\000\000\000\000"
 2468      00000000 
 2469              	.LC23:
 2470 00b8 46040000 		.ascii	"F\004\000\000\000\000\000\000"
 2470      00000000 
 2471              	.LC24:
 2472 00c0 47040000 		.ascii	"G\004\000\000\000\000\000\000"
 2472      00000000 
 2473              	.LC25:
 2474 00c8 48040000 		.ascii	"H\004\000\000\000\000\000\000"
 2474      00000000 
 2475              	.LC26:
 2476 00d0 49040000 		.ascii	"I\004\000\000\000\000\000\000"
 2476      00000000 
 2477              	.LC27:
 2478 00d8 4A040000 		.ascii	"J\004\000\000\000\000\000\000"
 2478      00000000 
 2479              	.LC28:
 2480 00e0 4B040000 		.ascii	"K\004\000\000\000\000\000\000"
 2480      00000000 
 2481              	.LC29:
 2482 00e8 4C040000 		.ascii	"L\004\000\000\000\000\000\000"
 2482      00000000 
 2483              	.LC30:
 2484 00f0 4D040000 		.ascii	"M\004\000\000\000\000\000\000"
 2484      00000000 
 2485              	.LC31:
 2486 00f8 4E040000 		.ascii	"N\004\000\000\000\000\000\000"
 2486      00000000 
 2487              	.LC32:
 2488 0100 4F040000 		.ascii	"O\004\000\000\000\000\000\000"
 2488      00000000 
 2489              	.LC33:
 2490 0108 10040000 		.ascii	"\020\004\000\000\000\000\000\000"
 2490      00000000 
 2491              	.LC34:
 2492 0110 11040000 		.ascii	"\021\004\000\000\000\000\000\000"
 2492      00000000 
 2493              	.LC35:
 2494 0118 12040000 		.ascii	"\022\004\000\000\000\000\000\000"
 2494      00000000 
 2495              	.LC36:
 2496 0120 13040000 		.ascii	"\023\004\000\000\000\000\000\000"
 2496      00000000 
 2497              	.LC37:
 2498 0128 14040000 		.ascii	"\024\004\000\000\000\000\000\000"
ARM GAS  /tmp/ccymXkh7.s 			page 56


 2498      00000000 
 2499              	.LC38:
 2500 0130 15040000 		.ascii	"\025\004\000\000\000\000\000\000"
 2500      00000000 
 2501              	.LC39:
 2502 0138 01040000 		.ascii	"\001\004\000\000\000\000\000\000"
 2502      00000000 
 2503              	.LC40:
 2504 0140 16040000 		.ascii	"\026\004\000\000\000\000\000\000"
 2504      00000000 
 2505              	.LC41:
 2506 0148 17040000 		.ascii	"\027\004\000\000\000\000\000\000"
 2506      00000000 
 2507              	.LC42:
 2508 0150 18040000 		.ascii	"\030\004\000\000\000\000\000\000"
 2508      00000000 
 2509              	.LC43:
 2510 0158 19040000 		.ascii	"\031\004\000\000\000\000\000\000"
 2510      00000000 
 2511              	.LC44:
 2512 0160 1A040000 		.ascii	"\032\004\000\000\000\000\000\000"
 2512      00000000 
 2513              	.LC45:
 2514 0168 1B040000 		.ascii	"\033\004\000\000\000\000\000\000"
 2514      00000000 
 2515              	.LC46:
 2516 0170 1C040000 		.ascii	"\034\004\000\000\000\000\000\000"
 2516      00000000 
 2517              	.LC47:
 2518 0178 1D040000 		.ascii	"\035\004\000\000\000\000\000\000"
 2518      00000000 
 2519              	.LC48:
 2520 0180 1E040000 		.ascii	"\036\004\000\000\000\000\000\000"
 2520      00000000 
 2521              	.LC49:
 2522 0188 1F040000 		.ascii	"\037\004\000\000\000\000\000\000"
 2522      00000000 
 2523              	.LC50:
 2524 0190 20040000 		.ascii	" \004\000\000\000\000\000\000"
 2524      00000000 
 2525              	.LC51:
 2526 0198 21040000 		.ascii	"!\004\000\000\000\000\000\000"
 2526      00000000 
 2527              	.LC52:
 2528 01a0 22040000 		.ascii	"\"\004\000\000\000\000\000\000"
 2528      00000000 
 2529              	.LC53:
 2530 01a8 23040000 		.ascii	"#\004\000\000\000\000\000\000"
 2530      00000000 
 2531              	.LC54:
 2532 01b0 24040000 		.ascii	"$\004\000\000\000\000\000\000"
 2532      00000000 
 2533              	.LC55:
 2534 01b8 25040000 		.ascii	"%\004\000\000\000\000\000\000"
 2534      00000000 
 2535              	.LC56:
 2536 01c0 26040000 		.ascii	"&\004\000\000\000\000\000\000"
ARM GAS  /tmp/ccymXkh7.s 			page 57


 2536      00000000 
 2537              	.LC57:
 2538 01c8 27040000 		.ascii	"'\004\000\000\000\000\000\000"
 2538      00000000 
 2539              	.LC58:
 2540 01d0 28040000 		.ascii	"(\004\000\000\000\000\000\000"
 2540      00000000 
 2541              	.LC59:
 2542 01d8 29040000 		.ascii	")\004\000\000\000\000\000\000"
 2542      00000000 
 2543              	.LC60:
 2544 01e0 2A040000 		.ascii	"*\004\000\000\000\000\000\000"
 2544      00000000 
 2545              	.LC61:
 2546 01e8 2B040000 		.ascii	"+\004\000\000\000\000\000\000"
 2546      00000000 
 2547              	.LC62:
 2548 01f0 2C040000 		.ascii	",\004\000\000\000\000\000\000"
 2548      00000000 
 2549              	.LC63:
 2550 01f8 2D040000 		.ascii	"-\004\000\000\000\000\000\000"
 2550      00000000 
 2551              	.LC64:
 2552 0200 2E040000 		.ascii	".\004\000\000\000\000\000\000"
 2552      00000000 
 2553              	.LC65:
 2554 0208 2F040000 		.ascii	"/\004\000\000\000\000\000\000"
 2554      00000000 
 2555              		.text
 2556              	.Letext0:
 2557              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 2558              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 2559              		.file 4 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 2560              		.file 5 "/usr/arm-none-eabi/include/sys/lock.h"
 2561              		.file 6 "/usr/arm-none-eabi/include/sys/_types.h"
 2562              		.file 7 "/usr/arm-none-eabi/include/sys/reent.h"
 2563              		.file 8 "Inc/LCD/TextConverter_LCD.h"
 2564              		.file 9 "Middlewares/Third_Party/FatFs/src/integer.h"
 2565              		.file 10 "Drivers/CMSIS/Include/core_cm3.h"
 2566              		.file 11 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 2567              		.file 12 "Inc/USB/State_USBdrive.h"
 2568              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 2569              		.file 14 "/usr/arm-none-eabi/include/stdlib.h"
 2570              		.file 15 "Middlewares/ST/STM32_USB_Host_Library/Core/Inc/usbh_def.h"
 2571              		.file 16 "Middlewares/ST/STM32_USB_Host_Library/Core/Inc/usbh_ctlreq.h"
 2572              		.file 17 "Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc/usbh_msc.h"
 2573              		.file 18 "Middlewares/Third_Party/FatFs/src/ff.h"
 2574              		.file 19 "Inc/USB/Driver_USBdrive.h"
 2575              		.file 20 "Inc/Gcode/Config_Gcode.h"
 2576              		.file 21 "Inc/Gcode/GcodeConverter_Gcode.h"
 2577              		.file 22 "Inc/Gcode/Descritization_Gcode.h"
 2578              		.file 23 "Inc/Gcode/Buffer_Gcode.h"
 2579              		.file 24 "Inc/Gcode/VirtualPrinters_Gcode.h"
 2580              		.file 25 "Middlewares/Third_Party/FatFs/src/diskio.h"
 2581              		.file 26 "Middlewares/Third_Party/FatFs/src/ff_gen_drv.h"
 2582              		.file 27 "Middlewares/Third_Party/FatFs/src/drivers/usbh_diskio.h"
 2583              		.file 28 "Inc/fatfs.h"
ARM GAS  /tmp/ccymXkh7.s 			page 58


 2584              		.file 29 "/usr/arm-none-eabi/include/stdio.h"
 2585              		.file 30 "Inc/Menu/Constructor_Menu.h"
 2586              		.file 31 "/usr/arm-none-eabi/include/wchar.h"
ARM GAS  /tmp/ccymXkh7.s 			page 59


DEFINED SYMBOLS
                            *ABS*:0000000000000000 FunctionsForButtons.c
     /tmp/ccymXkh7.s:16     .text.openDirectory_Menu:0000000000000000 $t
     /tmp/ccymXkh7.s:23     .text.openDirectory_Menu:0000000000000000 openDirectory_Menu
     /tmp/ccymXkh7.s:37     .text.wchar_t2TCHAR:0000000000000000 $t
     /tmp/ccymXkh7.s:43     .text.wchar_t2TCHAR:0000000000000000 wchar_t2TCHAR
     /tmp/ccymXkh7.s:472    .text.wchar_t2TCHAR:00000000000002d0 $d
     /tmp/ccymXkh7.s:541    .text.wchar_t2TCHAR:00000000000003d8 $t
     /tmp/ccymXkh7.s:855    .text.getFileNameTCHAR:0000000000000000 $t
     /tmp/ccymXkh7.s:861    .text.getFileNameTCHAR:0000000000000000 getFileNameTCHAR
     /tmp/ccymXkh7.s:903    .text.simpleNavigationDown_Menu:0000000000000000 $t
     /tmp/ccymXkh7.s:910    .text.simpleNavigationDown_Menu:0000000000000000 simpleNavigationDown_Menu
     /tmp/ccymXkh7.s:1073   .text.simpleNavigationDown_Menu:00000000000000e0 $d
     /tmp/ccymXkh7.s:1080   .text.simpleNavigationUp_Menu:0000000000000000 $t
     /tmp/ccymXkh7.s:1087   .text.simpleNavigationUp_Menu:0000000000000000 simpleNavigationUp_Menu
     /tmp/ccymXkh7.s:1203   .text.simpleNavigationUp_Menu:000000000000009c $d
     /tmp/ccymXkh7.s:1210   .text.returnFirstLine:0000000000000000 $t
     /tmp/ccymXkh7.s:1216   .text.returnFirstLine:0000000000000000 returnFirstLine
     /tmp/ccymXkh7.s:1243   .text.simpleNavigationBack_Menu:0000000000000000 $t
     /tmp/ccymXkh7.s:1250   .text.simpleNavigationBack_Menu:0000000000000000 simpleNavigationBack_Menu
     /tmp/ccymXkh7.s:1436   .text.simpleNavigationBack_Menu:0000000000000110 $d
     /tmp/ccymXkh7.s:1443   .text.GcodeFormat:0000000000000000 $t
     /tmp/ccymXkh7.s:1449   .text.GcodeFormat:0000000000000000 GcodeFormat
     /tmp/ccymXkh7.s:1479   .text.GcodeFormat:0000000000000018 $d
     /tmp/ccymXkh7.s:1484   .text.wait:0000000000000000 $t
     /tmp/ccymXkh7.s:1490   .text.wait:0000000000000000 wait
     /tmp/ccymXkh7.s:1511   .text.runGcode_Menu:0000000000000000 $t
     /tmp/ccymXkh7.s:1518   .text.runGcode_Menu:0000000000000000 runGcode_Menu
     /tmp/ccymXkh7.s:1673   .text.runGcode_Menu:00000000000000e0 $d
     /tmp/ccymXkh7.s:1681   .text.simpleNavigationOk_Menu:0000000000000000 $t
     /tmp/ccymXkh7.s:1688   .text.simpleNavigationOk_Menu:0000000000000000 simpleNavigationOk_Menu
     /tmp/ccymXkh7.s:1808   .text.simpleNavigationOk_Menu:00000000000000a8 $d
     /tmp/ccymXkh7.s:1815   .text.printOk_Menu:0000000000000000 $t
     /tmp/ccymXkh7.s:1822   .text.printOk_Menu:0000000000000000 printOk_Menu
     /tmp/ccymXkh7.s:2089   .text.printOk_Menu:0000000000000178 $d
     /tmp/ccymXkh7.s:2103   .text.changeFilamentOk_Menu:0000000000000000 $t
     /tmp/ccymXkh7.s:2110   .text.changeFilamentOk_Menu:0000000000000000 changeFilamentOk_Menu
     /tmp/ccymXkh7.s:2129   .text.setTheTemperatureOk_Menu:0000000000000000 $t
     /tmp/ccymXkh7.s:2136   .text.setTheTemperatureOk_Menu:0000000000000000 setTheTemperatureOk_Menu
     /tmp/ccymXkh7.s:2149   .text.setTheTemperatureBack_Menu:0000000000000000 $t
     /tmp/ccymXkh7.s:2156   .text.setTheTemperatureBack_Menu:0000000000000000 setTheTemperatureBack_Menu
     /tmp/ccymXkh7.s:2175   .text.setTheTemperatureUp_Menu:0000000000000000 $t
     /tmp/ccymXkh7.s:2182   .text.setTheTemperatureUp_Menu:0000000000000000 setTheTemperatureUp_Menu
     /tmp/ccymXkh7.s:2195   .text.setTheTemperatureDown_Menu:0000000000000000 $t
     /tmp/ccymXkh7.s:2202   .text.setTheTemperatureDown_Menu:0000000000000000 setTheTemperatureDown_Menu
     /tmp/ccymXkh7.s:2215   .text.englishOk_Menu:0000000000000000 $t
     /tmp/ccymXkh7.s:2222   .text.englishOk_Menu:0000000000000000 englishOk_Menu
     /tmp/ccymXkh7.s:2235   .text.englishBack_Menu:0000000000000000 $t
     /tmp/ccymXkh7.s:2242   .text.englishBack_Menu:0000000000000000 englishBack_Menu
     /tmp/ccymXkh7.s:2261   .text.russianOk_Menu:0000000000000000 $t
     /tmp/ccymXkh7.s:2268   .text.russianOk_Menu:0000000000000000 russianOk_Menu
     /tmp/ccymXkh7.s:2281   .text.russianBack_Menu:0000000000000000 $t
     /tmp/ccymXkh7.s:2288   .text.russianBack_Menu:0000000000000000 russianBack_Menu
     /tmp/ccymXkh7.s:2307   .text.helpOk_Menu:0000000000000000 $t
     /tmp/ccymXkh7.s:2314   .text.helpOk_Menu:0000000000000000 helpOk_Menu
     /tmp/ccymXkh7.s:2327   .text.helpBack_Menu:0000000000000000 $t
     /tmp/ccymXkh7.s:2334   .text.helpBack_Menu:0000000000000000 helpBack_Menu
ARM GAS  /tmp/ccymXkh7.s 			page 60


     /tmp/ccymXkh7.s:2347   .text.emptyFunction_Menu:0000000000000000 $t
     /tmp/ccymXkh7.s:2354   .text.emptyFunction_Menu:0000000000000000 emptyFunction_Menu
     /tmp/ccymXkh7.s:2367   .text.closeDirectory_Menu:0000000000000000 $t
     /tmp/ccymXkh7.s:2374   .text.closeDirectory_Menu:0000000000000000 closeDirectory_Menu
     /tmp/ccymXkh7.s:2387   .rodata:0000000000000000 $d
     /tmp/ccymXkh7.s:2394   .rodata.printOk_Menu.str4.4:0000000000000000 $d
     /tmp/ccymXkh7.s:2400   .rodata.runGcode_Menu.str1.4:0000000000000000 $d
     /tmp/ccymXkh7.s:2404   .rodata.runGcode_Menu.str4.4:0000000000000000 $d
     /tmp/ccymXkh7.s:2416   .rodata.simpleNavigationDown_Menu.str4.4:0000000000000000 $d
     /tmp/ccymXkh7.s:2422   .rodata.wchar_t2TCHAR.str4.4:0000000000000000 $d

UNDEFINED SYMBOLS
getName_Menu
ThereIsNodeBelow_Menu
ThereIsNodeAbove_Menu
moveDown_Menu
moveUp_Menu
putLine_TextConverter_LCD
updateLine_TextConverter_LCD
getTitle_Menu
moveLeft_Menu
EMPTY_STRING
wcsstr
HAL_Delay
getPath_USBdrive
sprintf
openFile_USBdrive
getStringFromFile_USBdrive
convertCommand_Gcode
getConvertedCommand_Gcode
setDescreteCommand_Gcode
enoghSpaceIsReservedCommandBuffer_Gcode
getDescreteCommand_Gcode
addElementToDescreteCommandBuffer_Gcode
descreteCommandAnalyser_Gcode
endOfFile_USBdrive
checkFreeSpaceCommandBuffer_Gcode
moveComleted
defaultDescreteCommand
moveRight_Menu
getState_USBdrive
getMountedStatus
openDirectory_USBdrive
destroyRightNode_Menu
readItem_USBdrive
getWideLongName_USBdrive
getItemType_USBdrive
createRightNode_Menu
setFunctionUp
setFunctionDown
setFunctionBack
mount_USBdrive
setFunctionOk
createDownNode_Menu
USBHPath
