ARM GAS  /tmp/ccV9QqRA.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text._write,"ax",%progbits
  16              		.align	1
  17              		.global	_write
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	_write:
  24              	.LFB66:
  25              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under Ultimate Liberty license
  13:Src/main.c    ****   * SLA0044, the "License"; You may not use this file except in compliance with
  14:Src/main.c    ****   * the License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                             www.st.com/SLA0044
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** #include "fatfs.h"
  24:Src/main.c    **** #include "tim.h"
  25:Src/main.c    **** #include "usart.h"
  26:Src/main.c    **** #include "usb_host.h"
  27:Src/main.c    **** #include "gpio.h"
  28:Src/main.c    **** 
  29:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  30:Src/main.c    **** /* USER CODE BEGIN Includes */
  31:Src/main.c    **** #include <wchar.h>
  32:Src/main.c    **** 
  33:Src/main.c    **** #include "TextConverter_LCD.h"
ARM GAS  /tmp/ccV9QqRA.s 			page 2


  34:Src/main.c    **** #include "MainMenu_Menu.h"
  35:Src/main.c    **** #include "Constructor_Menu.h"
  36:Src/main.c    **** #include "State_USBdrive.h"
  37:Src/main.c    **** #include "Driver_USBdrive.h"
  38:Src/main.c    **** 
  39:Src/main.c    **** #include "GcodeConverter_Gcode.h"
  40:Src/main.c    **** #include "Descritization_Gcode.h"
  41:Src/main.c    **** #include "Buffer_Gcode.h"
  42:Src/main.c    **** #include "VirtualPrinters_Gcode.h"
  43:Src/main.c    **** 
  44:Src/main.c    **** #include "coordinates.h"
  45:Src/main.c    **** 
  46:Src/main.c    **** /* USER CODE END Includes */
  47:Src/main.c    **** 
  48:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  49:Src/main.c    **** /* USER CODE BEGIN PTD */
  50:Src/main.c    **** 
  51:Src/main.c    **** /* USER CODE END PTD */
  52:Src/main.c    **** 
  53:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  54:Src/main.c    **** /* USER CODE BEGIN PD */
  55:Src/main.c    **** /* USER CODE END PD */
  56:Src/main.c    **** 
  57:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  58:Src/main.c    **** /* USER CODE BEGIN PM */
  59:Src/main.c    **** 
  60:Src/main.c    **** /* USER CODE END PM */
  61:Src/main.c    **** 
  62:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  63:Src/main.c    **** 
  64:Src/main.c    **** /* USER CODE BEGIN PV */
  65:Src/main.c    **** 
  66:Src/main.c    **** /* USER CODE END PV */
  67:Src/main.c    **** 
  68:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  69:Src/main.c    **** void SystemClock_Config(void);
  70:Src/main.c    **** void MX_USB_HOST_Process(void);
  71:Src/main.c    **** 
  72:Src/main.c    **** /* USER CODE BEGIN PFP */
  73:Src/main.c    **** 
  74:Src/main.c    **** /* USER CODE END PFP */
  75:Src/main.c    **** 
  76:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  77:Src/main.c    **** /* USER CODE BEGIN 0 */
  78:Src/main.c    **** #if defined(__GNUC__)
  79:Src/main.c    **** int _write(int fd, char * ptr, int len)
  80:Src/main.c    **** {
  26              		.loc 1 80 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              	.LVL0:
  31 0000 10B5     		push	{r4, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 4, -8
  35              		.cfi_offset 14, -4
ARM GAS  /tmp/ccV9QqRA.s 			page 3


  36 0002 1446     		mov	r4, r2
  81:Src/main.c    ****   HAL_UART_Transmit(&huart2, (uint8_t *) ptr, len, HAL_MAX_DELAY);
  37              		.loc 1 81 0
  38 0004 4FF0FF33 		mov	r3, #-1
  39 0008 92B2     		uxth	r2, r2
  40              	.LVL1:
  41 000a 0248     		ldr	r0, .L3
  42              	.LVL2:
  43 000c FFF7FEFF 		bl	HAL_UART_Transmit
  44              	.LVL3:
  82:Src/main.c    ****   return len;
  83:Src/main.c    **** }
  45              		.loc 1 83 0
  46 0010 2046     		mov	r0, r4
  47 0012 10BD     		pop	{r4, pc}
  48              	.LVL4:
  49              	.L4:
  50              		.align	2
  51              	.L3:
  52 0014 00000000 		.word	huart2
  53              		.cfi_endproc
  54              	.LFE66:
  56              		.section	.text.SystemClock_Config,"ax",%progbits
  57              		.align	1
  58              		.global	SystemClock_Config
  59              		.syntax unified
  60              		.thumb
  61              		.thumb_func
  62              		.fpu softvfp
  64              	SystemClock_Config:
  65              	.LFB68:
  84:Src/main.c    **** #elif defined (__ICCARM__)
  85:Src/main.c    **** #include "LowLevelIOInterface.h"
  86:Src/main.c    **** size_t __write(int handle, const unsigned char * buffer, size_t size)
  87:Src/main.c    **** {
  88:Src/main.c    ****   HAL_UART_Transmit(&huart2, (uint8_t *) buffer, size, HAL_MAX_DELAY);
  89:Src/main.c    ****   return size;
  90:Src/main.c    **** }
  91:Src/main.c    **** #elif defined (__CC_ARM)
  92:Src/main.c    **** int fputc(int ch, FILE *f)
  93:Src/main.c    **** {
  94:Src/main.c    ****     HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
  95:Src/main.c    ****     return ch;
  96:Src/main.c    **** }
  97:Src/main.c    **** #endif
  98:Src/main.c    **** /* USER CODE END 0 */
  99:Src/main.c    **** 
 100:Src/main.c    **** /**
 101:Src/main.c    ****   * @brief  The application entry point.
 102:Src/main.c    ****   * @retval int
 103:Src/main.c    ****   */
 104:Src/main.c    **** int main(void)
 105:Src/main.c    **** {
 106:Src/main.c    ****   /* USER CODE BEGIN 1 */
 107:Src/main.c    **** 
 108:Src/main.c    ****   /* USER CODE END 1 */
 109:Src/main.c    **** 
ARM GAS  /tmp/ccV9QqRA.s 			page 4


 110:Src/main.c    **** 
 111:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
 112:Src/main.c    **** 
 113:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 114:Src/main.c    ****   HAL_Init();
 115:Src/main.c    **** 
 116:Src/main.c    ****   /* USER CODE BEGIN Init */
 117:Src/main.c    **** 
 118:Src/main.c    ****   /* USER CODE END Init */
 119:Src/main.c    **** 
 120:Src/main.c    ****   /* Configure the system clock */
 121:Src/main.c    ****   SystemClock_Config();
 122:Src/main.c    **** 
 123:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 124:Src/main.c    **** 
 125:Src/main.c    ****   /* USER CODE END SysInit */
 126:Src/main.c    **** 
 127:Src/main.c    ****   /* Initialize all configured peripherals */
 128:Src/main.c    ****   MX_GPIO_Init();
 129:Src/main.c    ****   MX_TIM2_Init();
 130:Src/main.c    ****   MX_USART2_UART_Init();
 131:Src/main.c    ****   MX_FATFS_Init();
 132:Src/main.c    ****   MX_USB_HOST_Init();
 133:Src/main.c    ****   MX_TIM3_Init();
 134:Src/main.c    ****   MX_TIM4_Init();
 135:Src/main.c    ****   MX_TIM5_Init();
 136:Src/main.c    ****   /* USER CODE BEGIN 2 */
 137:Src/main.c    ****   HAL_TIM_Base_Start_IT(&htim3);
 138:Src/main.c    ****   HAL_NVIC_EnableIRQ(TIM3_IRQn);
 139:Src/main.c    ****   HAL_TIM_Base_Start_IT(&htim4);
 140:Src/main.c    ****   HAL_NVIC_EnableIRQ(TIM4_IRQn);
 141:Src/main.c    ****   create_coordinates();
 142:Src/main.c    ****   HAL_TIM_Base_Start_IT(&htim5);
 143:Src/main.c    ****   HAL_NVIC_EnableIRQ(TIM5_IRQn);
 144:Src/main.c    **** 
 145:Src/main.c    ****   createGcodeConverter_Gcode();
 146:Src/main.c    ****   createDescretization_Gcode();
 147:Src/main.c    ****   createDescreteCommandBuffer_Gcode();
 148:Src/main.c    ****   createCommandBuffer_Gcode();
 149:Src/main.c    ****   virtualPrintersCreate_Gcode();
 150:Src/main.c    **** 
 151:Src/main.c    ****   HAL_Delay(500);
 152:Src/main.c    ****   create_TextConverter_LCD();
 153:Src/main.c    ****   setMainMenu_Menu();
 154:Src/main.c    ****   createState_USBdrive();
 155:Src/main.c    ****   createDriver_USBdrive();
 156:Src/main.c    **** 
 157:Src/main.c    **** 
 158:Src/main.c    **** 
 159:Src/main.c    ****   putLine_TextConverter_LCD(getTitle_Menu(), 1);  updateLine_TextConverter_LCD(1);
 160:Src/main.c    ****   wchar_t* currName = (wchar_t*) getName_Menu();  currName[0] = *L">";
 161:Src/main.c    ****   putLine_TextConverter_LCD(currName, 2);         updateLine_TextConverter_LCD(2);  currName[0] = *
 162:Src/main.c    ****   moveDown_Menu();
 163:Src/main.c    ****   putLine_TextConverter_LCD(getName_Menu(), 3);   updateLine_TextConverter_LCD(3);
 164:Src/main.c    ****   moveDown_Menu();
 165:Src/main.c    ****   putLine_TextConverter_LCD(getName_Menu(), 4);   updateLine_TextConverter_LCD(4);
 166:Src/main.c    ****   moveToTheFirstNode_Menu();
ARM GAS  /tmp/ccV9QqRA.s 			page 5


 167:Src/main.c    **** 
 168:Src/main.c    **** 
 169:Src/main.c    ****   /* USER CODE END 2 */
 170:Src/main.c    **** 
 171:Src/main.c    ****   /* Infinite loop */
 172:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 173:Src/main.c    ****   while (1)
 174:Src/main.c    ****   {
 175:Src/main.c    ****     /* USER CODE END WHILE */
 176:Src/main.c    ****     MX_USB_HOST_Process();
 177:Src/main.c    **** 
 178:Src/main.c    ****     /* USER CODE BEGIN 3 */
 179:Src/main.c    ****     if (HAL_GPIO_ReadPin(Button_Down_GPIO_Port, Button_Down_Pin) & GPIO_PIN_SET)  getCurrentNode_Me
 180:Src/main.c    ****     if (HAL_GPIO_ReadPin(Button_Up_GPIO_Port, Button_Up_Pin) & GPIO_PIN_SET)      getCurrentNode_Me
 181:Src/main.c    ****     if (HAL_GPIO_ReadPin(Button_Ok_GPIO_Port, Button_Ok_Pin) & GPIO_PIN_SET)      getCurrentNode_Me
 182:Src/main.c    ****     if (HAL_GPIO_ReadPin(Button_Back_GPIO_Port, Button_Back_Pin) & GPIO_PIN_SET)  getCurrentNode_Me
 183:Src/main.c    **** 
 184:Src/main.c    ****     if (getState_USBdrive() == READY_USBDRIVE)  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_
 185:Src/main.c    ****     else                                        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_
 186:Src/main.c    **** 
 187:Src/main.c    **** 
 188:Src/main.c    ****   }
 189:Src/main.c    ****   /* USER CODE END 3 */
 190:Src/main.c    **** }
 191:Src/main.c    **** 
 192:Src/main.c    **** /**
 193:Src/main.c    ****   * @brief System Clock Configuration
 194:Src/main.c    ****   * @retval None
 195:Src/main.c    ****   */
 196:Src/main.c    **** void SystemClock_Config(void)
 197:Src/main.c    **** {
  66              		.loc 1 197 0
  67              		.cfi_startproc
  68              		@ args = 0, pretend = 0, frame = 112
  69              		@ frame_needed = 0, uses_anonymous_args = 0
  70 0000 70B5     		push	{r4, r5, r6, lr}
  71              	.LCFI1:
  72              		.cfi_def_cfa_offset 16
  73              		.cfi_offset 4, -16
  74              		.cfi_offset 5, -12
  75              		.cfi_offset 6, -8
  76              		.cfi_offset 14, -4
  77 0002 9CB0     		sub	sp, sp, #112
  78              	.LCFI2:
  79              		.cfi_def_cfa_offset 128
 198:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  80              		.loc 1 198 0
  81 0004 3422     		movs	r2, #52
  82 0006 0021     		movs	r1, #0
  83 0008 0FA8     		add	r0, sp, #60
  84 000a FFF7FEFF 		bl	memset
  85              	.LVL5:
 199:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  86              		.loc 1 199 0
  87 000e 0024     		movs	r4, #0
  88 0010 0994     		str	r4, [sp, #36]
  89 0012 0A94     		str	r4, [sp, #40]
ARM GAS  /tmp/ccV9QqRA.s 			page 6


  90 0014 0B94     		str	r4, [sp, #44]
  91 0016 0C94     		str	r4, [sp, #48]
  92 0018 0D94     		str	r4, [sp, #52]
 200:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
  93              		.loc 1 200 0
  94 001a 2022     		movs	r2, #32
  95 001c 2146     		mov	r1, r4
  96 001e 01A8     		add	r0, sp, #4
  97 0020 FFF7FEFF 		bl	memset
  98              	.LVL6:
 201:Src/main.c    **** 
 202:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks
 203:Src/main.c    ****   */
 204:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  99              		.loc 1 204 0
 100 0024 0125     		movs	r5, #1
 101 0026 0E95     		str	r5, [sp, #56]
 205:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 102              		.loc 1 205 0
 103 0028 4FF48033 		mov	r3, #65536
 104 002c 1093     		str	r3, [sp, #64]
 206:Src/main.c    ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 207:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 105              		.loc 1 207 0
 106 002e 1395     		str	r5, [sp, #76]
 208:Src/main.c    ****   RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 209:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 107              		.loc 1 209 0
 108 0030 0226     		movs	r6, #2
 109 0032 1696     		str	r6, [sp, #88]
 210:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 110              		.loc 1 210 0
 111 0034 1793     		str	r3, [sp, #92]
 211:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 112              		.loc 1 211 0
 113 0036 4FF4E013 		mov	r3, #1835008
 114 003a 1893     		str	r3, [sp, #96]
 212:Src/main.c    ****   RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 213:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 115              		.loc 1 213 0
 116 003c 0EA8     		add	r0, sp, #56
 117 003e FFF7FEFF 		bl	HAL_RCC_OscConfig
 118              	.LVL7:
 214:Src/main.c    ****   {
 215:Src/main.c    ****     Error_Handler();
 216:Src/main.c    ****   }
 217:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks
 218:Src/main.c    ****   */
 219:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 119              		.loc 1 219 0
 120 0042 0F23     		movs	r3, #15
 121 0044 0993     		str	r3, [sp, #36]
 220:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 221:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 122              		.loc 1 221 0
 123 0046 0A96     		str	r6, [sp, #40]
 222:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
ARM GAS  /tmp/ccV9QqRA.s 			page 7


 124              		.loc 1 222 0
 125 0048 0B94     		str	r4, [sp, #44]
 223:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 126              		.loc 1 223 0
 127 004a 4FF48063 		mov	r3, #1024
 128 004e 0C93     		str	r3, [sp, #48]
 224:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 129              		.loc 1 224 0
 130 0050 0D94     		str	r4, [sp, #52]
 225:Src/main.c    **** 
 226:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 131              		.loc 1 226 0
 132 0052 3146     		mov	r1, r6
 133 0054 09A8     		add	r0, sp, #36
 134 0056 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 135              	.LVL8:
 227:Src/main.c    ****   {
 228:Src/main.c    ****     Error_Handler();
 229:Src/main.c    ****   }
 230:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 136              		.loc 1 230 0
 137 005a 1023     		movs	r3, #16
 138 005c 0193     		str	r3, [sp, #4]
 231:Src/main.c    ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV3;
 139              		.loc 1 231 0
 140 005e 0894     		str	r4, [sp, #32]
 232:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 141              		.loc 1 232 0
 142 0060 01A8     		add	r0, sp, #4
 143 0062 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 144              	.LVL9:
 233:Src/main.c    ****   {
 234:Src/main.c    ****     Error_Handler();
 235:Src/main.c    ****   }
 236:Src/main.c    ****   /** Configure the Systick interrupt time
 237:Src/main.c    ****   */
 238:Src/main.c    ****   __HAL_RCC_PLLI2S_ENABLE();
 145              		.loc 1 238 0
 146 0066 024B     		ldr	r3, .L7
 147 0068 1D60     		str	r5, [r3]
 239:Src/main.c    **** }
 148              		.loc 1 239 0
 149 006a 1CB0     		add	sp, sp, #112
 150              	.LCFI3:
 151              		.cfi_def_cfa_offset 16
 152              		@ sp needed
 153 006c 70BD     		pop	{r4, r5, r6, pc}
 154              	.L8:
 155 006e 00BF     		.align	2
 156              	.L7:
 157 0070 70004242 		.word	1111621744
 158              		.cfi_endproc
 159              	.LFE68:
 161              		.section	.text.main,"ax",%progbits
 162              		.align	1
 163              		.global	main
 164              		.syntax unified
ARM GAS  /tmp/ccV9QqRA.s 			page 8


 165              		.thumb
 166              		.thumb_func
 167              		.fpu softvfp
 169              	main:
 170              	.LFB67:
 105:Src/main.c    ****   /* USER CODE BEGIN 1 */
 171              		.loc 1 105 0
 172              		.cfi_startproc
 173              		@ args = 0, pretend = 0, frame = 0
 174              		@ frame_needed = 0, uses_anonymous_args = 0
 175 0000 10B5     		push	{r4, lr}
 176              	.LCFI4:
 177              		.cfi_def_cfa_offset 8
 178              		.cfi_offset 4, -8
 179              		.cfi_offset 14, -4
 114:Src/main.c    **** 
 180              		.loc 1 114 0
 181 0002 FFF7FEFF 		bl	HAL_Init
 182              	.LVL10:
 121:Src/main.c    **** 
 183              		.loc 1 121 0
 184 0006 FFF7FEFF 		bl	SystemClock_Config
 185              	.LVL11:
 128:Src/main.c    ****   MX_TIM2_Init();
 186              		.loc 1 128 0
 187 000a FFF7FEFF 		bl	MX_GPIO_Init
 188              	.LVL12:
 129:Src/main.c    ****   MX_USART2_UART_Init();
 189              		.loc 1 129 0
 190 000e FFF7FEFF 		bl	MX_TIM2_Init
 191              	.LVL13:
 130:Src/main.c    ****   MX_FATFS_Init();
 192              		.loc 1 130 0
 193 0012 FFF7FEFF 		bl	MX_USART2_UART_Init
 194              	.LVL14:
 131:Src/main.c    ****   MX_USB_HOST_Init();
 195              		.loc 1 131 0
 196 0016 FFF7FEFF 		bl	MX_FATFS_Init
 197              	.LVL15:
 132:Src/main.c    ****   MX_TIM3_Init();
 198              		.loc 1 132 0
 199 001a FFF7FEFF 		bl	MX_USB_HOST_Init
 200              	.LVL16:
 133:Src/main.c    ****   MX_TIM4_Init();
 201              		.loc 1 133 0
 202 001e FFF7FEFF 		bl	MX_TIM3_Init
 203              	.LVL17:
 134:Src/main.c    ****   MX_TIM5_Init();
 204              		.loc 1 134 0
 205 0022 FFF7FEFF 		bl	MX_TIM4_Init
 206              	.LVL18:
 135:Src/main.c    ****   /* USER CODE BEGIN 2 */
 207              		.loc 1 135 0
 208 0026 FFF7FEFF 		bl	MX_TIM5_Init
 209              	.LVL19:
 137:Src/main.c    ****   HAL_NVIC_EnableIRQ(TIM3_IRQn);
 210              		.loc 1 137 0
ARM GAS  /tmp/ccV9QqRA.s 			page 9


 211 002a 4E48     		ldr	r0, .L23
 212 002c FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 213              	.LVL20:
 138:Src/main.c    ****   HAL_TIM_Base_Start_IT(&htim4);
 214              		.loc 1 138 0
 215 0030 1D20     		movs	r0, #29
 216 0032 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 217              	.LVL21:
 139:Src/main.c    ****   HAL_NVIC_EnableIRQ(TIM4_IRQn);
 218              		.loc 1 139 0
 219 0036 4C48     		ldr	r0, .L23+4
 220 0038 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 221              	.LVL22:
 140:Src/main.c    ****   create_coordinates();
 222              		.loc 1 140 0
 223 003c 1E20     		movs	r0, #30
 224 003e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 225              	.LVL23:
 141:Src/main.c    ****   HAL_TIM_Base_Start_IT(&htim5);
 226              		.loc 1 141 0
 227 0042 FFF7FEFF 		bl	create_coordinates
 228              	.LVL24:
 142:Src/main.c    ****   HAL_NVIC_EnableIRQ(TIM5_IRQn);
 229              		.loc 1 142 0
 230 0046 4948     		ldr	r0, .L23+8
 231 0048 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 232              	.LVL25:
 143:Src/main.c    **** 
 233              		.loc 1 143 0
 234 004c 3220     		movs	r0, #50
 235 004e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 236              	.LVL26:
 145:Src/main.c    ****   createDescretization_Gcode();
 237              		.loc 1 145 0
 238 0052 FFF7FEFF 		bl	createGcodeConverter_Gcode
 239              	.LVL27:
 146:Src/main.c    ****   createDescreteCommandBuffer_Gcode();
 240              		.loc 1 146 0
 241 0056 FFF7FEFF 		bl	createDescretization_Gcode
 242              	.LVL28:
 147:Src/main.c    ****   createCommandBuffer_Gcode();
 243              		.loc 1 147 0
 244 005a FFF7FEFF 		bl	createDescreteCommandBuffer_Gcode
 245              	.LVL29:
 148:Src/main.c    ****   virtualPrintersCreate_Gcode();
 246              		.loc 1 148 0
 247 005e FFF7FEFF 		bl	createCommandBuffer_Gcode
 248              	.LVL30:
 149:Src/main.c    **** 
 249              		.loc 1 149 0
 250 0062 FFF7FEFF 		bl	virtualPrintersCreate_Gcode
 251              	.LVL31:
 151:Src/main.c    ****   create_TextConverter_LCD();
 252              		.loc 1 151 0
 253 0066 4FF4FA70 		mov	r0, #500
 254 006a FFF7FEFF 		bl	HAL_Delay
 255              	.LVL32:
ARM GAS  /tmp/ccV9QqRA.s 			page 10


 152:Src/main.c    ****   setMainMenu_Menu();
 256              		.loc 1 152 0
 257 006e FFF7FEFF 		bl	create_TextConverter_LCD
 258              	.LVL33:
 153:Src/main.c    ****   createState_USBdrive();
 259              		.loc 1 153 0
 260 0072 FFF7FEFF 		bl	setMainMenu_Menu
 261              	.LVL34:
 154:Src/main.c    ****   createDriver_USBdrive();
 262              		.loc 1 154 0
 263 0076 FFF7FEFF 		bl	createState_USBdrive
 264              	.LVL35:
 155:Src/main.c    **** 
 265              		.loc 1 155 0
 266 007a FFF7FEFF 		bl	createDriver_USBdrive
 267              	.LVL36:
 159:Src/main.c    ****   wchar_t* currName = (wchar_t*) getName_Menu();  currName[0] = *L">";
 268              		.loc 1 159 0
 269 007e FFF7FEFF 		bl	getTitle_Menu
 270              	.LVL37:
 271 0082 0121     		movs	r1, #1
 272 0084 FFF7FEFF 		bl	putLine_TextConverter_LCD
 273              	.LVL38:
 274 0088 0120     		movs	r0, #1
 275 008a FFF7FEFF 		bl	updateLine_TextConverter_LCD
 276              	.LVL39:
 160:Src/main.c    ****   putLine_TextConverter_LCD(currName, 2);         updateLine_TextConverter_LCD(2);  currName[0] = *
 277              		.loc 1 160 0
 278 008e FFF7FEFF 		bl	getName_Menu
 279              	.LVL40:
 280 0092 0446     		mov	r4, r0
 281              	.LVL41:
 282 0094 364B     		ldr	r3, .L23+12
 283 0096 1B68     		ldr	r3, [r3]
 284 0098 0360     		str	r3, [r0]
 161:Src/main.c    ****   moveDown_Menu();
 285              		.loc 1 161 0
 286 009a 0221     		movs	r1, #2
 287 009c FFF7FEFF 		bl	putLine_TextConverter_LCD
 288              	.LVL42:
 289 00a0 0220     		movs	r0, #2
 290 00a2 FFF7FEFF 		bl	updateLine_TextConverter_LCD
 291              	.LVL43:
 292 00a6 334B     		ldr	r3, .L23+16
 293 00a8 1B68     		ldr	r3, [r3]
 294 00aa 2360     		str	r3, [r4]
 162:Src/main.c    ****   putLine_TextConverter_LCD(getName_Menu(), 3);   updateLine_TextConverter_LCD(3);
 295              		.loc 1 162 0
 296 00ac FFF7FEFF 		bl	moveDown_Menu
 297              	.LVL44:
 163:Src/main.c    ****   moveDown_Menu();
 298              		.loc 1 163 0
 299 00b0 FFF7FEFF 		bl	getName_Menu
 300              	.LVL45:
 301 00b4 0321     		movs	r1, #3
 302 00b6 FFF7FEFF 		bl	putLine_TextConverter_LCD
 303              	.LVL46:
ARM GAS  /tmp/ccV9QqRA.s 			page 11


 304 00ba 0320     		movs	r0, #3
 305 00bc FFF7FEFF 		bl	updateLine_TextConverter_LCD
 306              	.LVL47:
 164:Src/main.c    ****   putLine_TextConverter_LCD(getName_Menu(), 4);   updateLine_TextConverter_LCD(4);
 307              		.loc 1 164 0
 308 00c0 FFF7FEFF 		bl	moveDown_Menu
 309              	.LVL48:
 165:Src/main.c    ****   moveToTheFirstNode_Menu();
 310              		.loc 1 165 0
 311 00c4 FFF7FEFF 		bl	getName_Menu
 312              	.LVL49:
 313 00c8 0421     		movs	r1, #4
 314 00ca FFF7FEFF 		bl	putLine_TextConverter_LCD
 315              	.LVL50:
 316 00ce 0420     		movs	r0, #4
 317 00d0 FFF7FEFF 		bl	updateLine_TextConverter_LCD
 318              	.LVL51:
 166:Src/main.c    **** 
 319              		.loc 1 166 0
 320 00d4 FFF7FEFF 		bl	moveToTheFirstNode_Menu
 321              	.LVL52:
 322 00d8 1CE0     		b	.L10
 323              	.L18:
 179:Src/main.c    ****     if (HAL_GPIO_ReadPin(Button_Up_GPIO_Port, Button_Up_Pin) & GPIO_PIN_SET)      getCurrentNode_Me
 324              		.loc 1 179 0 discriminator 1
 325 00da FFF7FEFF 		bl	getCurrentNode_Menu
 326              	.LVL53:
 327 00de D0F80C31 		ldr	r3, [r0, #268]
 328 00e2 9847     		blx	r3
 329              	.LVL54:
 330 00e4 1FE0     		b	.L11
 331              	.L19:
 180:Src/main.c    ****     if (HAL_GPIO_ReadPin(Button_Ok_GPIO_Port, Button_Ok_Pin) & GPIO_PIN_SET)      getCurrentNode_Me
 332              		.loc 1 180 0 discriminator 1
 333 00e6 FFF7FEFF 		bl	getCurrentNode_Menu
 334              	.LVL55:
 335 00ea D0F80831 		ldr	r3, [r0, #264]
 336 00ee 9847     		blx	r3
 337              	.LVL56:
 338 00f0 20E0     		b	.L12
 339              	.L20:
 181:Src/main.c    ****     if (HAL_GPIO_ReadPin(Button_Back_GPIO_Port, Button_Back_Pin) & GPIO_PIN_SET)  getCurrentNode_Me
 340              		.loc 1 181 0 discriminator 1
 341 00f2 FFF7FEFF 		bl	getCurrentNode_Menu
 342              	.LVL57:
 343 00f6 D0F80031 		ldr	r3, [r0, #256]
 344 00fa 9847     		blx	r3
 345              	.LVL58:
 346 00fc 21E0     		b	.L13
 347              	.L21:
 182:Src/main.c    **** 
 348              		.loc 1 182 0 discriminator 1
 349 00fe FFF7FEFF 		bl	getCurrentNode_Menu
 350              	.LVL59:
 351 0102 D0F80431 		ldr	r3, [r0, #260]
 352 0106 9847     		blx	r3
 353              	.LVL60:
ARM GAS  /tmp/ccV9QqRA.s 			page 12


 354 0108 22E0     		b	.L14
 355              	.L22:
 184:Src/main.c    ****     else                                        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_
 356              		.loc 1 184 0 discriminator 1
 357 010a 0122     		movs	r2, #1
 358 010c 1021     		movs	r1, #16
 359 010e 1A48     		ldr	r0, .L23+20
 360 0110 FFF7FEFF 		bl	HAL_GPIO_WritePin
 361              	.LVL61:
 362              	.L10:
 176:Src/main.c    **** 
 363              		.loc 1 176 0
 364 0114 FFF7FEFF 		bl	MX_USB_HOST_Process
 365              	.LVL62:
 179:Src/main.c    ****     if (HAL_GPIO_ReadPin(Button_Up_GPIO_Port, Button_Up_Pin) & GPIO_PIN_SET)      getCurrentNode_Me
 366              		.loc 1 179 0
 367 0118 8021     		movs	r1, #128
 368 011a 1748     		ldr	r0, .L23+20
 369 011c FFF7FEFF 		bl	HAL_GPIO_ReadPin
 370              	.LVL63:
 371 0120 10F0010F 		tst	r0, #1
 372 0124 D9D1     		bne	.L18
 373              	.L11:
 180:Src/main.c    ****     if (HAL_GPIO_ReadPin(Button_Ok_GPIO_Port, Button_Ok_Pin) & GPIO_PIN_SET)      getCurrentNode_Me
 374              		.loc 1 180 0
 375 0126 0821     		movs	r1, #8
 376 0128 1448     		ldr	r0, .L23+24
 377 012a FFF7FEFF 		bl	HAL_GPIO_ReadPin
 378              	.LVL64:
 379 012e 10F0010F 		tst	r0, #1
 380 0132 D8D1     		bne	.L19
 381              	.L12:
 181:Src/main.c    ****     if (HAL_GPIO_ReadPin(Button_Back_GPIO_Port, Button_Back_Pin) & GPIO_PIN_SET)  getCurrentNode_Me
 382              		.loc 1 181 0
 383 0134 1021     		movs	r1, #16
 384 0136 1148     		ldr	r0, .L23+24
 385 0138 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 386              	.LVL65:
 387 013c 10F0010F 		tst	r0, #1
 388 0140 D7D1     		bne	.L20
 389              	.L13:
 182:Src/main.c    **** 
 390              		.loc 1 182 0
 391 0142 2021     		movs	r1, #32
 392 0144 0D48     		ldr	r0, .L23+24
 393 0146 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 394              	.LVL66:
 395 014a 10F0010F 		tst	r0, #1
 396 014e D6D1     		bne	.L21
 397              	.L14:
 184:Src/main.c    ****     else                                        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_
 398              		.loc 1 184 0
 399 0150 FFF7FEFF 		bl	getState_USBdrive
 400              	.LVL67:
 401 0154 0128     		cmp	r0, #1
 402 0156 D8D0     		beq	.L22
 185:Src/main.c    **** 
ARM GAS  /tmp/ccV9QqRA.s 			page 13


 403              		.loc 1 185 0
 404 0158 0022     		movs	r2, #0
 405 015a 1021     		movs	r1, #16
 406 015c 0648     		ldr	r0, .L23+20
 407 015e FFF7FEFF 		bl	HAL_GPIO_WritePin
 408              	.LVL68:
 409 0162 D7E7     		b	.L10
 410              	.L24:
 411              		.align	2
 412              	.L23:
 413 0164 00000000 		.word	htim3
 414 0168 00000000 		.word	htim4
 415 016c 00000000 		.word	htim5
 416 0170 00000000 		.word	.LC0
 417 0174 08000000 		.word	.LC1
 418 0178 00140140 		.word	1073812480
 419 017c 000C0140 		.word	1073810432
 420              		.cfi_endproc
 421              	.LFE67:
 423              		.section	.text.Error_Handler,"ax",%progbits
 424              		.align	1
 425              		.global	Error_Handler
 426              		.syntax unified
 427              		.thumb
 428              		.thumb_func
 429              		.fpu softvfp
 431              	Error_Handler:
 432              	.LFB69:
 240:Src/main.c    **** 
 241:Src/main.c    **** /* USER CODE BEGIN 4 */
 242:Src/main.c    **** 
 243:Src/main.c    **** /* USER CODE END 4 */
 244:Src/main.c    **** 
 245:Src/main.c    **** /**
 246:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 247:Src/main.c    ****   * @retval None
 248:Src/main.c    ****   */
 249:Src/main.c    **** void Error_Handler(void)
 250:Src/main.c    **** {
 433              		.loc 1 250 0
 434              		.cfi_startproc
 435              		@ args = 0, pretend = 0, frame = 0
 436              		@ frame_needed = 0, uses_anonymous_args = 0
 437              		@ link register save eliminated.
 251:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 252:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 253:Src/main.c    **** 
 254:Src/main.c    ****   /* USER CODE END Error_Handler_Debug */
 255:Src/main.c    **** }
 438              		.loc 1 255 0
 439 0000 7047     		bx	lr
 440              		.cfi_endproc
 441              	.LFE69:
 443              		.section	.rodata.main.str4.4,"aMS",%progbits,4
 444              		.align	2
 445              	.LC0:
 446 0000 3E000000 		.ascii	">\000\000\000\000\000\000\000"
ARM GAS  /tmp/ccV9QqRA.s 			page 14


 446      00000000 
 447              	.LC1:
 448 0008 20000000 		.ascii	" \000\000\000\000\000\000\000"
 448      00000000 
 449              		.text
 450              	.Letext0:
 451              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 452              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 453              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 454              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 455              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f105xc.h"
 456              		.file 7 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 457              		.file 8 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 458              		.file 9 "/usr/arm-none-eabi/include/sys/lock.h"
 459              		.file 10 "/usr/arm-none-eabi/include/sys/_types.h"
 460              		.file 11 "/usr/arm-none-eabi/include/sys/reent.h"
 461              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 462              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 463              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 464              		.file 15 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 465              		.file 16 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 466              		.file 17 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 467              		.file 18 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 468              		.file 19 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 469              		.file 20 "Middlewares/Third_Party/FatFs/src/integer.h"
 470              		.file 21 "/usr/arm-none-eabi/include/stdlib.h"
 471              		.file 22 "Middlewares/ST/STM32_USB_Host_Library/Core/Inc/usbh_def.h"
 472              		.file 23 "Middlewares/ST/STM32_USB_Host_Library/Core/Inc/usbh_ctlreq.h"
 473              		.file 24 "Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc/usbh_msc.h"
 474              		.file 25 "Middlewares/Third_Party/FatFs/src/ff.h"
 475              		.file 26 "Middlewares/Third_Party/FatFs/src/diskio.h"
 476              		.file 27 "Middlewares/Third_Party/FatFs/src/ff_gen_drv.h"
 477              		.file 28 "Middlewares/Third_Party/FatFs/src/drivers/usbh_diskio.h"
 478              		.file 29 "Inc/fatfs.h"
 479              		.file 30 "Inc/tim.h"
 480              		.file 31 "Inc/usart.h"
 481              		.file 32 "Inc/LCD/TextConverter_LCD.h"
 482              		.file 33 "Inc/USB/State_USBdrive.h"
 483              		.file 34 "Inc/Gcode/GcodeConverter_Gcode.h"
 484              		.file 35 "Inc/Gcode/Descritization_Gcode.h"
 485              		.file 36 "Inc/Gcode/Buffer_Gcode.h"
 486              		.file 37 "Inc/Gcode/VirtualPrinters_Gcode.h"
 487              		.file 38 "Inc/gpio.h"
 488              		.file 39 "Inc/usb_host.h"
 489              		.file 40 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_cortex.h"
 490              		.file 41 "Inc/coordinates.h"
 491              		.file 42 "Inc/Menu/MainMenu_Menu.h"
 492              		.file 43 "Inc/USB/Driver_USBdrive.h"
 493              		.file 44 "Inc/Menu/Constructor_Menu.h"
 494              		.file 45 "<built-in>"
ARM GAS  /tmp/ccV9QqRA.s 			page 15


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccV9QqRA.s:16     .text._write:0000000000000000 $t
     /tmp/ccV9QqRA.s:23     .text._write:0000000000000000 _write
     /tmp/ccV9QqRA.s:52     .text._write:0000000000000014 $d
     /tmp/ccV9QqRA.s:57     .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccV9QqRA.s:64     .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccV9QqRA.s:157    .text.SystemClock_Config:0000000000000070 $d
     /tmp/ccV9QqRA.s:162    .text.main:0000000000000000 $t
     /tmp/ccV9QqRA.s:169    .text.main:0000000000000000 main
     /tmp/ccV9QqRA.s:413    .text.main:0000000000000164 $d
     /tmp/ccV9QqRA.s:424    .text.Error_Handler:0000000000000000 $t
     /tmp/ccV9QqRA.s:431    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccV9QqRA.s:444    .rodata.main.str4.4:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_UART_Transmit
huart2
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_Init
MX_GPIO_Init
MX_TIM2_Init
MX_USART2_UART_Init
MX_FATFS_Init
MX_USB_HOST_Init
MX_TIM3_Init
MX_TIM4_Init
MX_TIM5_Init
HAL_TIM_Base_Start_IT
HAL_NVIC_EnableIRQ
create_coordinates
createGcodeConverter_Gcode
createDescretization_Gcode
createDescreteCommandBuffer_Gcode
createCommandBuffer_Gcode
virtualPrintersCreate_Gcode
HAL_Delay
create_TextConverter_LCD
setMainMenu_Menu
createState_USBdrive
createDriver_USBdrive
getTitle_Menu
putLine_TextConverter_LCD
updateLine_TextConverter_LCD
getName_Menu
moveDown_Menu
moveToTheFirstNode_Menu
getCurrentNode_Menu
HAL_GPIO_WritePin
MX_USB_HOST_Process
HAL_GPIO_ReadPin
getState_USBdrive
htim3
htim4
ARM GAS  /tmp/ccV9QqRA.s 			page 16


htim5
