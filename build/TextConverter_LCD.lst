ARM GAS  /tmp/ccsMuWUy.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"TextConverter_LCD.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.lineNumber,"ax",%progbits
  16              		.align	1
  17              		.arch armv7-m
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	lineNumber:
  24              	.LVL0:
  25              	.LFB3:
  26              		.file 1 "Src/LCD/TextConverter_LCD.c"
   1:Src/LCD/TextConverter_LCD.c **** #include "TextConverter_LCD.h"
   2:Src/LCD/TextConverter_LCD.c **** 
   3:Src/LCD/TextConverter_LCD.c **** #include "Interface_LCD.h"
   4:Src/LCD/TextConverter_LCD.c **** 
   5:Src/LCD/TextConverter_LCD.c **** #include <stdint.h>
   6:Src/LCD/TextConverter_LCD.c **** #include <stdbool.h>
   7:Src/LCD/TextConverter_LCD.c **** #include <stdio.h>
   8:Src/LCD/TextConverter_LCD.c **** #include <string.h>
   9:Src/LCD/TextConverter_LCD.c **** #include <math.h>
  10:Src/LCD/TextConverter_LCD.c **** #include <wchar.h>
  11:Src/LCD/TextConverter_LCD.c **** #include <stdlib.h>
  12:Src/LCD/TextConverter_LCD.c **** 
  13:Src/LCD/TextConverter_LCD.c **** const wchar_t EMPTY_STRING[] = L"                    ";
  14:Src/LCD/TextConverter_LCD.c **** 
  15:Src/LCD/TextConverter_LCD.c **** static wchar_t toPrint_LCD[NUMBEROFLINES_TEXTCONVERTER_LCD][LINELENGTH_TEXTCONVERTER_LCD];
  16:Src/LCD/TextConverter_LCD.c **** static wchar_t text_LCD[NUMBEROFLINES_TEXTCONVERTER_LCD][MAXTEXTLENGTH+1];
  17:Src/LCD/TextConverter_LCD.c **** 
  18:Src/LCD/TextConverter_LCD.c **** 
  19:Src/LCD/TextConverter_LCD.c **** static int lineNumber(int line) {return line-1;}
  27              		.loc 1 19 33 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              		.loc 1 19 34 view .LVU1
  33              		.loc 1 19 1 is_stmt 0 view .LVU2
  34 0000 0138     		subs	r0, r0, #1
  35              	.LVL1:
  36              		.loc 1 19 1 view .LVU3
  37 0002 7047     		bx	lr
  38              		.cfi_endproc
  39              	.LFE3:
ARM GAS  /tmp/ccsMuWUy.s 			page 2


  41              		.section	.text.wrongLine,"ax",%progbits
  42              		.align	1
  43              		.syntax unified
  44              		.thumb
  45              		.thumb_func
  46              		.fpu softvfp
  48              	wrongLine:
  49              	.LVL2:
  50              	.LFB4:
  20:Src/LCD/TextConverter_LCD.c **** 
  21:Src/LCD/TextConverter_LCD.c **** static _Bool wrongLine(int line)
  22:Src/LCD/TextConverter_LCD.c **** {
  51              		.loc 1 22 1 is_stmt 1 view -0
  52              		.cfi_startproc
  53              		@ args = 0, pretend = 0, frame = 0
  54              		@ frame_needed = 0, uses_anonymous_args = 0
  55              		@ link register save eliminated.
  23:Src/LCD/TextConverter_LCD.c ****     if (line < 1)
  56              		.loc 1 23 5 view .LVU5
  57              		.loc 1 23 8 is_stmt 0 view .LVU6
  58 0000 0028     		cmp	r0, #0
  59              		.loc 1 23 8 view .LVU7
  60 0002 03DD     		ble	.L4
  24:Src/LCD/TextConverter_LCD.c ****         return true;
  25:Src/LCD/TextConverter_LCD.c ****     if (line > NUMBEROFLINES_TEXTCONVERTER_LCD)
  61              		.loc 1 25 5 is_stmt 1 view .LVU8
  62              		.loc 1 25 8 is_stmt 0 view .LVU9
  63 0004 0428     		cmp	r0, #4
  64 0006 03DC     		bgt	.L5
  26:Src/LCD/TextConverter_LCD.c ****         return true;
  27:Src/LCD/TextConverter_LCD.c ****     return false;
  65              		.loc 1 27 12 view .LVU10
  66 0008 0020     		movs	r0, #0
  67              	.LVL3:
  68              		.loc 1 27 12 view .LVU11
  69 000a 7047     		bx	lr
  70              	.LVL4:
  71              	.L4:
  24:Src/LCD/TextConverter_LCD.c ****         return true;
  72              		.loc 1 24 16 view .LVU12
  73 000c 0120     		movs	r0, #1
  74              	.LVL5:
  24:Src/LCD/TextConverter_LCD.c ****         return true;
  75              		.loc 1 24 16 view .LVU13
  76 000e 7047     		bx	lr
  77              	.LVL6:
  78              	.L5:
  26:Src/LCD/TextConverter_LCD.c ****         return true;
  79              		.loc 1 26 16 view .LVU14
  80 0010 0120     		movs	r0, #1
  81              	.LVL7:
  28:Src/LCD/TextConverter_LCD.c **** }
  82              		.loc 1 28 1 view .LVU15
  83 0012 7047     		bx	lr
  84              		.cfi_endproc
  85              	.LFE4:
  87              		.section	.text.lineEnds,"ax",%progbits
ARM GAS  /tmp/ccsMuWUy.s 			page 3


  88              		.align	1
  89              		.syntax unified
  90              		.thumb
  91              		.thumb_func
  92              		.fpu softvfp
  94              	lineEnds:
  95              	.LVL8:
  96              	.LFB10:
  29:Src/LCD/TextConverter_LCD.c **** 
  30:Src/LCD/TextConverter_LCD.c **** void create_TextConverter_LCD(void)
  31:Src/LCD/TextConverter_LCD.c **** {
  32:Src/LCD/TextConverter_LCD.c ****     int line;
  33:Src/LCD/TextConverter_LCD.c ****     for (line=1; line<=NUMBEROFLINES_TEXTCONVERTER_LCD; line++)
  34:Src/LCD/TextConverter_LCD.c ****         wmemcpy(toPrint_LCD[lineNumber(line)], EMPTY_STRING, LINELENGTH_TEXTCONVERTER_LCD);
  35:Src/LCD/TextConverter_LCD.c ****     create_LCD();
  36:Src/LCD/TextConverter_LCD.c **** }
  37:Src/LCD/TextConverter_LCD.c **** 
  38:Src/LCD/TextConverter_LCD.c **** const wchar_t* getLine_TextConverter_LCD(int line)
  39:Src/LCD/TextConverter_LCD.c **** {
  40:Src/LCD/TextConverter_LCD.c ****     if (wrongLine(line))
  41:Src/LCD/TextConverter_LCD.c ****         return L"";
  42:Src/LCD/TextConverter_LCD.c ****     return toPrint_LCD[lineNumber(line)];
  43:Src/LCD/TextConverter_LCD.c **** }
  44:Src/LCD/TextConverter_LCD.c **** 
  45:Src/LCD/TextConverter_LCD.c **** void putLine_TextConverter_LCD(const wchar_t* text, int line)
  46:Src/LCD/TextConverter_LCD.c **** {
  47:Src/LCD/TextConverter_LCD.c ****     if (wrongLine(line))
  48:Src/LCD/TextConverter_LCD.c ****         return;
  49:Src/LCD/TextConverter_LCD.c ****     wcscpy(text_LCD[lineNumber(line)], text);
  50:Src/LCD/TextConverter_LCD.c ****     int textLength = wcslen(text);
  51:Src/LCD/TextConverter_LCD.c **** 
  52:Src/LCD/TextConverter_LCD.c ****     if (textLength < LINELENGTH_TEXTCONVERTER_LCD)
  53:Src/LCD/TextConverter_LCD.c ****         swprintf(&text_LCD[lineNumber(line)][textLength], LINELENGTH_TEXTCONVERTER_LCD-textLength+1
  54:Src/LCD/TextConverter_LCD.c ****     wmemcpy(toPrint_LCD[lineNumber(line)], text_LCD[lineNumber(line)], LINELENGTH_TEXTCONVERTER_LCD
  55:Src/LCD/TextConverter_LCD.c **** }
  56:Src/LCD/TextConverter_LCD.c **** 
  57:Src/LCD/TextConverter_LCD.c **** void updateLine_TextConverter_LCD(int line)
  58:Src/LCD/TextConverter_LCD.c **** {
  59:Src/LCD/TextConverter_LCD.c ****     if (wrongLine(line))
  60:Src/LCD/TextConverter_LCD.c ****         return;
  61:Src/LCD/TextConverter_LCD.c ****     printLine_LCD(line, toPrint_LCD[lineNumber(line)]);
  62:Src/LCD/TextConverter_LCD.c **** }
  63:Src/LCD/TextConverter_LCD.c **** 
  64:Src/LCD/TextConverter_LCD.c **** 
  65:Src/LCD/TextConverter_LCD.c **** void clearLine_TextConverter_LCD(int line)
  66:Src/LCD/TextConverter_LCD.c **** {
  67:Src/LCD/TextConverter_LCD.c ****     if (wrongLine(line))
  68:Src/LCD/TextConverter_LCD.c ****         return;
  69:Src/LCD/TextConverter_LCD.c ****     putLine_TextConverter_LCD(L"", line);
  70:Src/LCD/TextConverter_LCD.c **** }
  71:Src/LCD/TextConverter_LCD.c **** 
  72:Src/LCD/TextConverter_LCD.c **** static _Bool lineEnds(const wchar_t* string)
  73:Src/LCD/TextConverter_LCD.c **** {
  97              		.loc 1 73 1 is_stmt 1 view -0
  98              		.cfi_startproc
  99              		@ args = 0, pretend = 0, frame = 0
 100              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccsMuWUy.s 			page 4


 101              		@ link register save eliminated.
  74:Src/LCD/TextConverter_LCD.c ****     return string[LINELENGTH_TEXTCONVERTER_LCD] == '\0';
 102              		.loc 1 74 5 view .LVU17
 103              		.loc 1 74 18 is_stmt 0 view .LVU18
 104 0000 006D     		ldr	r0, [r0, #80]
 105              	.LVL9:
  75:Src/LCD/TextConverter_LCD.c **** }
 106              		.loc 1 75 1 view .LVU19
 107 0002 B0FA80F0 		clz	r0, r0
 108 0006 4009     		lsrs	r0, r0, #5
 109 0008 7047     		bx	lr
 110              		.cfi_endproc
 111              	.LFE10:
 113              		.global	__aeabi_f2d
 114              		.global	__aeabi_d2iz
 115              		.global	__aeabi_f2iz
 116              		.section	.text.digitsBeforeDot,"ax",%progbits
 117              		.align	1
 118              		.syntax unified
 119              		.thumb
 120              		.thumb_func
 121              		.fpu softvfp
 123              	digitsBeforeDot:
 124              	.LVL10:
 125              	.LFB14:
  76:Src/LCD/TextConverter_LCD.c **** 
  77:Src/LCD/TextConverter_LCD.c **** void shiftLine_TextConverter_LCD(int line)
  78:Src/LCD/TextConverter_LCD.c **** {
  79:Src/LCD/TextConverter_LCD.c ****     if(wrongLine(line))
  80:Src/LCD/TextConverter_LCD.c ****         return;
  81:Src/LCD/TextConverter_LCD.c ****     if (lineEnds(text_LCD[lineNumber(line)]))
  82:Src/LCD/TextConverter_LCD.c ****         return;
  83:Src/LCD/TextConverter_LCD.c **** 
  84:Src/LCD/TextConverter_LCD.c ****     wchar_t strToFind[LINELENGTH_TEXTCONVERTER_LCD+1];
  85:Src/LCD/TextConverter_LCD.c ****     wmemcpy(strToFind, toPrint_LCD[lineNumber(line)], LINELENGTH_TEXTCONVERTER_LCD);
  86:Src/LCD/TextConverter_LCD.c ****     strToFind[LINELENGTH_TEXTCONVERTER_LCD] = '\0';
  87:Src/LCD/TextConverter_LCD.c **** 
  88:Src/LCD/TextConverter_LCD.c ****     wchar_t* pToFirstLetter = wcsstr(text_LCD[lineNumber(line)], strToFind);
  89:Src/LCD/TextConverter_LCD.c ****     if (lineEnds(pToFirstLetter))
  90:Src/LCD/TextConverter_LCD.c ****         wmemcpy(toPrint_LCD[lineNumber(line)], text_LCD[lineNumber(line)], LINELENGTH_TEXTCONVERTER
  91:Src/LCD/TextConverter_LCD.c ****     if (!lineEnds(pToFirstLetter))
  92:Src/LCD/TextConverter_LCD.c ****         wmemcpy(toPrint_LCD[lineNumber(line)], &pToFirstLetter[1], LINELENGTH_TEXTCONVERTER_LCD);
  93:Src/LCD/TextConverter_LCD.c **** }
  94:Src/LCD/TextConverter_LCD.c **** 
  95:Src/LCD/TextConverter_LCD.c **** void homeLine_TextConverter_LCD(int line)
  96:Src/LCD/TextConverter_LCD.c **** {
  97:Src/LCD/TextConverter_LCD.c ****     wmemcpy(toPrint_LCD[lineNumber(line)], text_LCD[lineNumber(line)], LINELENGTH_TEXTCONVERTER_LCD
  98:Src/LCD/TextConverter_LCD.c **** }
  99:Src/LCD/TextConverter_LCD.c **** 
 100:Src/LCD/TextConverter_LCD.c **** void addIntNumberToString(wchar_t* string, int number)
 101:Src/LCD/TextConverter_LCD.c **** {
 102:Src/LCD/TextConverter_LCD.c ****     swprintf(&string[wcslen(string)], MAXTEXTLENGTH-wcslen(string), L"%d", number);
 103:Src/LCD/TextConverter_LCD.c **** }
 104:Src/LCD/TextConverter_LCD.c **** 
 105:Src/LCD/TextConverter_LCD.c **** static int digitsBeforeDot(float number, int digits)
 106:Src/LCD/TextConverter_LCD.c **** {
 126              		.loc 1 106 1 is_stmt 1 view -0
ARM GAS  /tmp/ccsMuWUy.s 			page 5


 127              		.cfi_startproc
 128              		@ args = 0, pretend = 0, frame = 0
 129              		@ frame_needed = 0, uses_anonymous_args = 0
 107:Src/LCD/TextConverter_LCD.c ****     if (digits < 0)
 130              		.loc 1 107 5 view .LVU21
 131              		.loc 1 107 8 is_stmt 0 view .LVU22
 132 0000 0029     		cmp	r1, #0
 133              		.loc 1 107 8 view .LVU23
 134 0002 11DB     		blt	.L10
 106:Src/LCD/TextConverter_LCD.c ****     if (digits < 0)
 135              		.loc 1 106 1 view .LVU24
 136 0004 08B5     		push	{r3, lr}
 137              	.LCFI0:
 138              		.cfi_def_cfa_offset 8
 139              		.cfi_offset 3, -8
 140              		.cfi_offset 14, -4
 108:Src/LCD/TextConverter_LCD.c ****         return 0;
 109:Src/LCD/TextConverter_LCD.c ****     if (digits == 0)
 141              		.loc 1 109 5 is_stmt 1 view .LVU25
 142              		.loc 1 109 8 is_stmt 0 view .LVU26
 143 0006 29B1     		cbz	r1, .L15
 110:Src/LCD/TextConverter_LCD.c ****         return abs((int)round(number));
 111:Src/LCD/TextConverter_LCD.c ****     return abs((int)(number));
 144              		.loc 1 111 5 is_stmt 1 view .LVU27
 145              		.loc 1 111 16 is_stmt 0 view .LVU28
 146 0008 FFF7FEFF 		bl	__aeabi_f2iz
 147              	.LVL11:
 148              		.loc 1 111 12 view .LVU29
 149 000c 0028     		cmp	r0, #0
 150 000e B8BF     		it	lt
 151 0010 4042     		rsblt	r0, r0, #0
 152              	.L7:
 112:Src/LCD/TextConverter_LCD.c **** }
 153              		.loc 1 112 1 view .LVU30
 154 0012 08BD     		pop	{r3, pc}
 155              	.LVL12:
 156              	.L15:
 110:Src/LCD/TextConverter_LCD.c ****         return abs((int)round(number));
 157              		.loc 1 110 9 is_stmt 1 view .LVU31
 110:Src/LCD/TextConverter_LCD.c ****         return abs((int)round(number));
 158              		.loc 1 110 25 is_stmt 0 view .LVU32
 159 0014 FFF7FEFF 		bl	__aeabi_f2d
 160              	.LVL13:
 110:Src/LCD/TextConverter_LCD.c ****         return abs((int)round(number));
 161              		.loc 1 110 25 view .LVU33
 162 0018 FFF7FEFF 		bl	round
 163              	.LVL14:
 110:Src/LCD/TextConverter_LCD.c ****         return abs((int)round(number));
 164              		.loc 1 110 20 view .LVU34
 165 001c FFF7FEFF 		bl	__aeabi_d2iz
 166              	.LVL15:
 110:Src/LCD/TextConverter_LCD.c ****         return abs((int)round(number));
 167              		.loc 1 110 16 view .LVU35
 168 0020 0028     		cmp	r0, #0
 169 0022 B8BF     		it	lt
 170 0024 4042     		rsblt	r0, r0, #0
 171 0026 F4E7     		b	.L7
ARM GAS  /tmp/ccsMuWUy.s 			page 6


 172              	.LVL16:
 173              	.L10:
 174              	.LCFI1:
 175              		.cfi_def_cfa_offset 0
 176              		.cfi_restore 3
 177              		.cfi_restore 14
 108:Src/LCD/TextConverter_LCD.c ****         return 0;
 178              		.loc 1 108 16 view .LVU36
 179 0028 0020     		movs	r0, #0
 180              	.LVL17:
 181              		.loc 1 112 1 view .LVU37
 182 002a 7047     		bx	lr
 183              		.cfi_endproc
 184              	.LFE14:
 186              		.global	__aeabi_i2d
 187              		.global	__aeabi_i2f
 188              		.global	__aeabi_fsub
 189              		.global	__aeabi_dmul
 190              		.section	.text.digitsAfterDot,"ax",%progbits
 191              		.align	1
 192              		.syntax unified
 193              		.thumb
 194              		.thumb_func
 195              		.fpu softvfp
 197              	digitsAfterDot:
 198              	.LVL18:
 199              	.LFB15:
 113:Src/LCD/TextConverter_LCD.c **** 
 114:Src/LCD/TextConverter_LCD.c **** static int digitsAfterDot(float number, int digits)
 115:Src/LCD/TextConverter_LCD.c **** {
 200              		.loc 1 115 1 is_stmt 1 view -0
 201              		.cfi_startproc
 202              		@ args = 0, pretend = 0, frame = 0
 203              		@ frame_needed = 0, uses_anonymous_args = 0
 204              		.loc 1 115 1 is_stmt 0 view .LVU39
 205 0000 D0B5     		push	{r4, r6, r7, lr}
 206              	.LCFI2:
 207              		.cfi_def_cfa_offset 16
 208              		.cfi_offset 4, -16
 209              		.cfi_offset 6, -12
 210              		.cfi_offset 7, -8
 211              		.cfi_offset 14, -4
 212 0002 0446     		mov	r4, r0
 116:Src/LCD/TextConverter_LCD.c ****     if (digits<=0)
 213              		.loc 1 116 5 is_stmt 1 view .LVU40
 214              		.loc 1 116 8 is_stmt 0 view .LVU41
 215 0004 081E     		subs	r0, r1, #0
 216              	.LVL19:
 217              		.loc 1 116 8 view .LVU42
 218 0006 22DD     		ble	.L18
 117:Src/LCD/TextConverter_LCD.c ****         return 0;
 118:Src/LCD/TextConverter_LCD.c ****     return abs((int)round(pow(10.0, digits)*(number-(int)number)));
 219              		.loc 1 118 5 is_stmt 1 view .LVU43
 220              		.loc 1 118 27 is_stmt 0 view .LVU44
 221 0008 FFF7FEFF 		bl	__aeabi_i2d
 222              	.LVL20:
 223              		.loc 1 118 27 view .LVU45
ARM GAS  /tmp/ccsMuWUy.s 			page 7


 224 000c 0246     		mov	r2, r0
 225 000e 0B46     		mov	r3, r1
 226 0010 0020     		movs	r0, #0
 227 0012 1049     		ldr	r1, .L20
 228 0014 FFF7FEFF 		bl	pow
 229              	.LVL21:
 230 0018 0646     		mov	r6, r0
 231 001a 0F46     		mov	r7, r1
 232              		.loc 1 118 53 view .LVU46
 233 001c 2046     		mov	r0, r4
 234 001e FFF7FEFF 		bl	__aeabi_f2iz
 235              	.LVL22:
 236              		.loc 1 118 52 view .LVU47
 237 0022 FFF7FEFF 		bl	__aeabi_i2f
 238              	.LVL23:
 239 0026 0146     		mov	r1, r0
 240 0028 2046     		mov	r0, r4
 241 002a FFF7FEFF 		bl	__aeabi_fsub
 242              	.LVL24:
 243 002e FFF7FEFF 		bl	__aeabi_f2d
 244              	.LVL25:
 245 0032 0246     		mov	r2, r0
 246 0034 0B46     		mov	r3, r1
 247              		.loc 1 118 21 view .LVU48
 248 0036 3046     		mov	r0, r6
 249 0038 3946     		mov	r1, r7
 250 003a FFF7FEFF 		bl	__aeabi_dmul
 251              	.LVL26:
 252 003e FFF7FEFF 		bl	round
 253              	.LVL27:
 254              		.loc 1 118 16 view .LVU49
 255 0042 FFF7FEFF 		bl	__aeabi_d2iz
 256              	.LVL28:
 257              		.loc 1 118 12 view .LVU50
 258 0046 0028     		cmp	r0, #0
 259 0048 B8BF     		it	lt
 260 004a 4042     		rsblt	r0, r0, #0
 261              	.L16:
 119:Src/LCD/TextConverter_LCD.c **** }
 262              		.loc 1 119 1 view .LVU51
 263 004c D0BD     		pop	{r4, r6, r7, pc}
 264              	.LVL29:
 265              	.L18:
 117:Src/LCD/TextConverter_LCD.c ****         return 0;
 266              		.loc 1 117 16 view .LVU52
 267 004e 0020     		movs	r0, #0
 268              	.LVL30:
 117:Src/LCD/TextConverter_LCD.c ****         return 0;
 269              		.loc 1 117 16 view .LVU53
 270 0050 FCE7     		b	.L16
 271              	.L21:
 272 0052 00BF     		.align	2
 273              	.L20:
 274 0054 00002440 		.word	1076101120
 275              		.cfi_endproc
 276              	.LFE15:
 278              		.section	.text.create_TextConverter_LCD,"ax",%progbits
ARM GAS  /tmp/ccsMuWUy.s 			page 8


 279              		.align	1
 280              		.global	create_TextConverter_LCD
 281              		.syntax unified
 282              		.thumb
 283              		.thumb_func
 284              		.fpu softvfp
 286              	create_TextConverter_LCD:
 287              	.LFB5:
  31:Src/LCD/TextConverter_LCD.c ****     int line;
 288              		.loc 1 31 1 is_stmt 1 view -0
 289              		.cfi_startproc
 290              		@ args = 0, pretend = 0, frame = 0
 291              		@ frame_needed = 0, uses_anonymous_args = 0
 292 0000 10B5     		push	{r4, lr}
 293              	.LCFI3:
 294              		.cfi_def_cfa_offset 8
 295              		.cfi_offset 4, -8
 296              		.cfi_offset 14, -4
  32:Src/LCD/TextConverter_LCD.c ****     for (line=1; line<=NUMBEROFLINES_TEXTCONVERTER_LCD; line++)
 297              		.loc 1 32 5 view .LVU55
  33:Src/LCD/TextConverter_LCD.c ****         wmemcpy(toPrint_LCD[lineNumber(line)], EMPTY_STRING, LINELENGTH_TEXTCONVERTER_LCD);
 298              		.loc 1 33 5 view .LVU56
 299              	.LVL31:
  33:Src/LCD/TextConverter_LCD.c ****         wmemcpy(toPrint_LCD[lineNumber(line)], EMPTY_STRING, LINELENGTH_TEXTCONVERTER_LCD);
 300              		.loc 1 33 14 is_stmt 0 view .LVU57
 301 0002 0124     		movs	r4, #1
  33:Src/LCD/TextConverter_LCD.c ****         wmemcpy(toPrint_LCD[lineNumber(line)], EMPTY_STRING, LINELENGTH_TEXTCONVERTER_LCD);
 302              		.loc 1 33 5 view .LVU58
 303 0004 0CE0     		b	.L23
 304              	.LVL32:
 305              	.L24:
  34:Src/LCD/TextConverter_LCD.c ****     create_LCD();
 306              		.loc 1 34 9 is_stmt 1 discriminator 3 view .LVU59
  34:Src/LCD/TextConverter_LCD.c ****     create_LCD();
 307              		.loc 1 34 29 is_stmt 0 discriminator 3 view .LVU60
 308 0006 2046     		mov	r0, r4
 309 0008 FFF7FEFF 		bl	lineNumber
 310              	.LVL33:
  34:Src/LCD/TextConverter_LCD.c ****     create_LCD();
 311              		.loc 1 34 28 discriminator 3 view .LVU61
 312 000c 00EB8000 		add	r0, r0, r0, lsl #2
  34:Src/LCD/TextConverter_LCD.c ****     create_LCD();
 313              		.loc 1 34 9 discriminator 3 view .LVU62
 314 0010 1422     		movs	r2, #20
 315 0012 0649     		ldr	r1, .L26
 316 0014 064B     		ldr	r3, .L26+4
 317 0016 03EB0010 		add	r0, r3, r0, lsl #4
 318 001a FFF7FEFF 		bl	wmemcpy
 319              	.LVL34:
  33:Src/LCD/TextConverter_LCD.c ****         wmemcpy(toPrint_LCD[lineNumber(line)], EMPTY_STRING, LINELENGTH_TEXTCONVERTER_LCD);
 320              		.loc 1 33 57 is_stmt 1 discriminator 3 view .LVU63
  33:Src/LCD/TextConverter_LCD.c ****         wmemcpy(toPrint_LCD[lineNumber(line)], EMPTY_STRING, LINELENGTH_TEXTCONVERTER_LCD);
 321              		.loc 1 33 61 is_stmt 0 discriminator 3 view .LVU64
 322 001e 0134     		adds	r4, r4, #1
 323              	.LVL35:
 324              	.L23:
  33:Src/LCD/TextConverter_LCD.c ****         wmemcpy(toPrint_LCD[lineNumber(line)], EMPTY_STRING, LINELENGTH_TEXTCONVERTER_LCD);
ARM GAS  /tmp/ccsMuWUy.s 			page 9


 325              		.loc 1 33 18 is_stmt 1 discriminator 1 view .LVU65
  33:Src/LCD/TextConverter_LCD.c ****         wmemcpy(toPrint_LCD[lineNumber(line)], EMPTY_STRING, LINELENGTH_TEXTCONVERTER_LCD);
 326              		.loc 1 33 5 is_stmt 0 discriminator 1 view .LVU66
 327 0020 042C     		cmp	r4, #4
 328 0022 F0DD     		ble	.L24
  35:Src/LCD/TextConverter_LCD.c **** }
 329              		.loc 1 35 5 is_stmt 1 view .LVU67
 330 0024 FFF7FEFF 		bl	create_LCD
 331              	.LVL36:
  36:Src/LCD/TextConverter_LCD.c **** 
 332              		.loc 1 36 1 is_stmt 0 view .LVU68
 333 0028 10BD     		pop	{r4, pc}
 334              	.LVL37:
 335              	.L27:
  36:Src/LCD/TextConverter_LCD.c **** 
 336              		.loc 1 36 1 view .LVU69
 337 002a 00BF     		.align	2
 338              	.L26:
 339 002c 00000000 		.word	.LANCHOR1
 340 0030 00000000 		.word	.LANCHOR0
 341              		.cfi_endproc
 342              	.LFE5:
 344              		.section	.rodata.getLine_TextConverter_LCD.str4.4,"aMS",%progbits,4
 345              		.align	2
 346              	.LC0:
 347 0000 00000000 		.ascii	"\000\000\000\000"
 348              		.section	.text.getLine_TextConverter_LCD,"ax",%progbits
 349              		.align	1
 350              		.global	getLine_TextConverter_LCD
 351              		.syntax unified
 352              		.thumb
 353              		.thumb_func
 354              		.fpu softvfp
 356              	getLine_TextConverter_LCD:
 357              	.LVL38:
 358              	.LFB6:
  39:Src/LCD/TextConverter_LCD.c ****     if (wrongLine(line))
 359              		.loc 1 39 1 is_stmt 1 view -0
 360              		.cfi_startproc
 361              		@ args = 0, pretend = 0, frame = 0
 362              		@ frame_needed = 0, uses_anonymous_args = 0
  39:Src/LCD/TextConverter_LCD.c ****     if (wrongLine(line))
 363              		.loc 1 39 1 is_stmt 0 view .LVU71
 364 0000 10B5     		push	{r4, lr}
 365              	.LCFI4:
 366              		.cfi_def_cfa_offset 8
 367              		.cfi_offset 4, -8
 368              		.cfi_offset 14, -4
 369 0002 0446     		mov	r4, r0
  40:Src/LCD/TextConverter_LCD.c ****         return L"";
 370              		.loc 1 40 5 is_stmt 1 view .LVU72
  40:Src/LCD/TextConverter_LCD.c ****         return L"";
 371              		.loc 1 40 9 is_stmt 0 view .LVU73
 372 0004 FFF7FEFF 		bl	wrongLine
 373              	.LVL39:
  40:Src/LCD/TextConverter_LCD.c ****         return L"";
 374              		.loc 1 40 8 view .LVU74
ARM GAS  /tmp/ccsMuWUy.s 			page 10


 375 0008 40B9     		cbnz	r0, .L30
  42:Src/LCD/TextConverter_LCD.c **** }
 376              		.loc 1 42 5 is_stmt 1 view .LVU75
  42:Src/LCD/TextConverter_LCD.c **** }
 377              		.loc 1 42 24 is_stmt 0 view .LVU76
 378 000a 2046     		mov	r0, r4
 379 000c FFF7FEFF 		bl	lineNumber
 380              	.LVL40:
  42:Src/LCD/TextConverter_LCD.c **** }
 381              		.loc 1 42 12 view .LVU77
 382 0010 00EB8003 		add	r3, r0, r0, lsl #2
 383 0014 0248     		ldr	r0, .L32
 384 0016 00EB0310 		add	r0, r0, r3, lsl #4
 385              	.L28:
  43:Src/LCD/TextConverter_LCD.c **** 
 386              		.loc 1 43 1 view .LVU78
 387 001a 10BD     		pop	{r4, pc}
 388              	.LVL41:
 389              	.L30:
  41:Src/LCD/TextConverter_LCD.c ****     return toPrint_LCD[lineNumber(line)];
 390              		.loc 1 41 16 view .LVU79
 391 001c 0148     		ldr	r0, .L32+4
 392 001e FCE7     		b	.L28
 393              	.L33:
 394              		.align	2
 395              	.L32:
 396 0020 00000000 		.word	.LANCHOR0
 397 0024 00000000 		.word	.LC0
 398              		.cfi_endproc
 399              	.LFE6:
 401              		.section	.text.putLine_TextConverter_LCD,"ax",%progbits
 402              		.align	1
 403              		.global	putLine_TextConverter_LCD
 404              		.syntax unified
 405              		.thumb
 406              		.thumb_func
 407              		.fpu softvfp
 409              	putLine_TextConverter_LCD:
 410              	.LVL42:
 411              	.LFB7:
  46:Src/LCD/TextConverter_LCD.c ****     if (wrongLine(line))
 412              		.loc 1 46 1 is_stmt 1 view -0
 413              		.cfi_startproc
 414              		@ args = 0, pretend = 0, frame = 0
 415              		@ frame_needed = 0, uses_anonymous_args = 0
  46:Src/LCD/TextConverter_LCD.c ****     if (wrongLine(line))
 416              		.loc 1 46 1 is_stmt 0 view .LVU81
 417 0000 70B5     		push	{r4, r5, r6, lr}
 418              	.LCFI5:
 419              		.cfi_def_cfa_offset 16
 420              		.cfi_offset 4, -16
 421              		.cfi_offset 5, -12
 422              		.cfi_offset 6, -8
 423              		.cfi_offset 14, -4
 424 0002 0646     		mov	r6, r0
 425 0004 0C46     		mov	r4, r1
  47:Src/LCD/TextConverter_LCD.c ****         return;
ARM GAS  /tmp/ccsMuWUy.s 			page 11


 426              		.loc 1 47 5 is_stmt 1 view .LVU82
  47:Src/LCD/TextConverter_LCD.c ****         return;
 427              		.loc 1 47 9 is_stmt 0 view .LVU83
 428 0006 0846     		mov	r0, r1
 429              	.LVL43:
  47:Src/LCD/TextConverter_LCD.c ****         return;
 430              		.loc 1 47 9 view .LVU84
 431 0008 FFF7FEFF 		bl	wrongLine
 432              	.LVL44:
  47:Src/LCD/TextConverter_LCD.c ****         return;
 433              		.loc 1 47 8 view .LVU85
 434 000c 00B1     		cbz	r0, .L38
 435              	.LVL45:
 436              	.L34:
  55:Src/LCD/TextConverter_LCD.c **** 
 437              		.loc 1 55 1 view .LVU86
 438 000e 70BD     		pop	{r4, r5, r6, pc}
 439              	.LVL46:
 440              	.L38:
  49:Src/LCD/TextConverter_LCD.c ****     int textLength = wcslen(text);
 441              		.loc 1 49 5 is_stmt 1 view .LVU87
  49:Src/LCD/TextConverter_LCD.c ****     int textLength = wcslen(text);
 442              		.loc 1 49 21 is_stmt 0 view .LVU88
 443 0010 2046     		mov	r0, r4
 444 0012 FFF7FEFF 		bl	lineNumber
 445              	.LVL47:
 446 0016 0446     		mov	r4, r0
 447              	.LVL48:
  49:Src/LCD/TextConverter_LCD.c ****     int textLength = wcslen(text);
 448              		.loc 1 49 20 view .LVU89
 449 0018 114B     		ldr	r3, .L40
 450 001a 4FF4CA75 		mov	r5, #404
 451 001e 05FB0035 		mla	r5, r5, r0, r3
  49:Src/LCD/TextConverter_LCD.c ****     int textLength = wcslen(text);
 452              		.loc 1 49 5 view .LVU90
 453 0022 3146     		mov	r1, r6
 454 0024 2846     		mov	r0, r5
 455 0026 FFF7FEFF 		bl	wcscpy
 456              	.LVL49:
  50:Src/LCD/TextConverter_LCD.c **** 
 457              		.loc 1 50 5 is_stmt 1 view .LVU91
  50:Src/LCD/TextConverter_LCD.c **** 
 458              		.loc 1 50 22 is_stmt 0 view .LVU92
 459 002a 3046     		mov	r0, r6
 460 002c FFF7FEFF 		bl	wcslen
 461              	.LVL50:
  52:Src/LCD/TextConverter_LCD.c ****         swprintf(&text_LCD[lineNumber(line)][textLength], LINELENGTH_TEXTCONVERTER_LCD-textLength+1
 462              		.loc 1 52 5 is_stmt 1 view .LVU93
  52:Src/LCD/TextConverter_LCD.c ****         swprintf(&text_LCD[lineNumber(line)][textLength], LINELENGTH_TEXTCONVERTER_LCD-textLength+1
 463              		.loc 1 52 8 is_stmt 0 view .LVU94
 464 0030 1328     		cmp	r0, #19
 465 0032 09DD     		ble	.L39
 466              	.LVL51:
 467              	.L36:
  54:Src/LCD/TextConverter_LCD.c **** }
 468              		.loc 1 54 5 is_stmt 1 view .LVU95
  54:Src/LCD/TextConverter_LCD.c **** }
ARM GAS  /tmp/ccsMuWUy.s 			page 12


 469              		.loc 1 54 24 is_stmt 0 view .LVU96
 470 0034 04EB8404 		add	r4, r4, r4, lsl #2
  54:Src/LCD/TextConverter_LCD.c **** }
 471              		.loc 1 54 5 view .LVU97
 472 0038 1422     		movs	r2, #20
 473 003a 2946     		mov	r1, r5
 474 003c 0948     		ldr	r0, .L40+4
 475 003e 00EB0410 		add	r0, r0, r4, lsl #4
 476 0042 FFF7FEFF 		bl	wmemcpy
 477              	.LVL52:
 478 0046 E2E7     		b	.L34
 479              	.LVL53:
 480              	.L39:
  53:Src/LCD/TextConverter_LCD.c ****     wmemcpy(toPrint_LCD[lineNumber(line)], text_LCD[lineNumber(line)], LINELENGTH_TEXTCONVERTER_LCD
 481              		.loc 1 53 9 is_stmt 1 view .LVU98
 482 0048 6523     		movs	r3, #101
 483 004a 03FB0403 		mla	r3, r3, r4, r0
 484 004e 064A     		ldr	r2, .L40+8
 485 0050 C0F11501 		rsb	r1, r0, #21
 486 0054 0248     		ldr	r0, .L40
 487              	.LVL54:
  53:Src/LCD/TextConverter_LCD.c ****     wmemcpy(toPrint_LCD[lineNumber(line)], text_LCD[lineNumber(line)], LINELENGTH_TEXTCONVERTER_LCD
 488              		.loc 1 53 9 is_stmt 0 view .LVU99
 489 0056 00EB8300 		add	r0, r0, r3, lsl #2
 490 005a FFF7FEFF 		bl	swprintf
 491              	.LVL55:
 492 005e E9E7     		b	.L36
 493              	.L41:
 494              		.align	2
 495              	.L40:
 496 0060 00000000 		.word	.LANCHOR2
 497 0064 00000000 		.word	.LANCHOR0
 498 0068 00000000 		.word	.LANCHOR1
 499              		.cfi_endproc
 500              	.LFE7:
 502              		.section	.text.updateLine_TextConverter_LCD,"ax",%progbits
 503              		.align	1
 504              		.global	updateLine_TextConverter_LCD
 505              		.syntax unified
 506              		.thumb
 507              		.thumb_func
 508              		.fpu softvfp
 510              	updateLine_TextConverter_LCD:
 511              	.LVL56:
 512              	.LFB8:
  58:Src/LCD/TextConverter_LCD.c ****     if (wrongLine(line))
 513              		.loc 1 58 1 is_stmt 1 view -0
 514              		.cfi_startproc
 515              		@ args = 0, pretend = 0, frame = 0
 516              		@ frame_needed = 0, uses_anonymous_args = 0
  58:Src/LCD/TextConverter_LCD.c ****     if (wrongLine(line))
 517              		.loc 1 58 1 is_stmt 0 view .LVU101
 518 0000 10B5     		push	{r4, lr}
 519              	.LCFI6:
 520              		.cfi_def_cfa_offset 8
 521              		.cfi_offset 4, -8
 522              		.cfi_offset 14, -4
ARM GAS  /tmp/ccsMuWUy.s 			page 13


 523 0002 0446     		mov	r4, r0
  59:Src/LCD/TextConverter_LCD.c ****         return;
 524              		.loc 1 59 5 is_stmt 1 view .LVU102
  59:Src/LCD/TextConverter_LCD.c ****         return;
 525              		.loc 1 59 9 is_stmt 0 view .LVU103
 526 0004 FFF7FEFF 		bl	wrongLine
 527              	.LVL57:
  59:Src/LCD/TextConverter_LCD.c ****         return;
 528              		.loc 1 59 8 view .LVU104
 529 0008 00B1     		cbz	r0, .L45
 530              	.L42:
  62:Src/LCD/TextConverter_LCD.c **** 
 531              		.loc 1 62 1 view .LVU105
 532 000a 10BD     		pop	{r4, pc}
 533              	.LVL58:
 534              	.L45:
  61:Src/LCD/TextConverter_LCD.c **** }
 535              		.loc 1 61 5 is_stmt 1 view .LVU106
  61:Src/LCD/TextConverter_LCD.c **** }
 536              		.loc 1 61 37 is_stmt 0 view .LVU107
 537 000c 2046     		mov	r0, r4
 538 000e FFF7FEFF 		bl	lineNumber
 539              	.LVL59:
  61:Src/LCD/TextConverter_LCD.c **** }
 540              		.loc 1 61 36 view .LVU108
 541 0012 00EB8000 		add	r0, r0, r0, lsl #2
  61:Src/LCD/TextConverter_LCD.c **** }
 542              		.loc 1 61 5 view .LVU109
 543 0016 0349     		ldr	r1, .L46
 544 0018 01EB0011 		add	r1, r1, r0, lsl #4
 545 001c 2046     		mov	r0, r4
 546 001e FFF7FEFF 		bl	printLine_LCD
 547              	.LVL60:
 548 0022 F2E7     		b	.L42
 549              	.L47:
 550              		.align	2
 551              	.L46:
 552 0024 00000000 		.word	.LANCHOR0
 553              		.cfi_endproc
 554              	.LFE8:
 556              		.section	.text.clearLine_TextConverter_LCD,"ax",%progbits
 557              		.align	1
 558              		.global	clearLine_TextConverter_LCD
 559              		.syntax unified
 560              		.thumb
 561              		.thumb_func
 562              		.fpu softvfp
 564              	clearLine_TextConverter_LCD:
 565              	.LVL61:
 566              	.LFB9:
  66:Src/LCD/TextConverter_LCD.c ****     if (wrongLine(line))
 567              		.loc 1 66 1 is_stmt 1 view -0
 568              		.cfi_startproc
 569              		@ args = 0, pretend = 0, frame = 0
 570              		@ frame_needed = 0, uses_anonymous_args = 0
  66:Src/LCD/TextConverter_LCD.c ****     if (wrongLine(line))
 571              		.loc 1 66 1 is_stmt 0 view .LVU111
ARM GAS  /tmp/ccsMuWUy.s 			page 14


 572 0000 10B5     		push	{r4, lr}
 573              	.LCFI7:
 574              		.cfi_def_cfa_offset 8
 575              		.cfi_offset 4, -8
 576              		.cfi_offset 14, -4
 577 0002 0446     		mov	r4, r0
  67:Src/LCD/TextConverter_LCD.c ****         return;
 578              		.loc 1 67 5 is_stmt 1 view .LVU112
  67:Src/LCD/TextConverter_LCD.c ****         return;
 579              		.loc 1 67 9 is_stmt 0 view .LVU113
 580 0004 FFF7FEFF 		bl	wrongLine
 581              	.LVL62:
  67:Src/LCD/TextConverter_LCD.c ****         return;
 582              		.loc 1 67 8 view .LVU114
 583 0008 00B1     		cbz	r0, .L51
 584              	.L48:
  70:Src/LCD/TextConverter_LCD.c **** 
 585              		.loc 1 70 1 view .LVU115
 586 000a 10BD     		pop	{r4, pc}
 587              	.LVL63:
 588              	.L51:
  69:Src/LCD/TextConverter_LCD.c **** }
 589              		.loc 1 69 5 is_stmt 1 view .LVU116
 590 000c 2146     		mov	r1, r4
 591 000e 0248     		ldr	r0, .L52
 592 0010 FFF7FEFF 		bl	putLine_TextConverter_LCD
 593              	.LVL64:
 594 0014 F9E7     		b	.L48
 595              	.L53:
 596 0016 00BF     		.align	2
 597              	.L52:
 598 0018 00000000 		.word	.LC0
 599              		.cfi_endproc
 600              	.LFE9:
 602              		.section	.text.shiftLine_TextConverter_LCD,"ax",%progbits
 603              		.align	1
 604              		.global	shiftLine_TextConverter_LCD
 605              		.syntax unified
 606              		.thumb
 607              		.thumb_func
 608              		.fpu softvfp
 610              	shiftLine_TextConverter_LCD:
 611              	.LVL65:
 612              	.LFB11:
  78:Src/LCD/TextConverter_LCD.c ****     if(wrongLine(line))
 613              		.loc 1 78 1 view -0
 614              		.cfi_startproc
 615              		@ args = 0, pretend = 0, frame = 88
 616              		@ frame_needed = 0, uses_anonymous_args = 0
  78:Src/LCD/TextConverter_LCD.c ****     if(wrongLine(line))
 617              		.loc 1 78 1 is_stmt 0 view .LVU118
 618 0000 70B5     		push	{r4, r5, r6, lr}
 619              	.LCFI8:
 620              		.cfi_def_cfa_offset 16
 621              		.cfi_offset 4, -16
 622              		.cfi_offset 5, -12
 623              		.cfi_offset 6, -8
ARM GAS  /tmp/ccsMuWUy.s 			page 15


 624              		.cfi_offset 14, -4
 625 0002 96B0     		sub	sp, sp, #88
 626              	.LCFI9:
 627              		.cfi_def_cfa_offset 104
 628 0004 0446     		mov	r4, r0
  79:Src/LCD/TextConverter_LCD.c ****         return;
 629              		.loc 1 79 5 is_stmt 1 view .LVU119
  79:Src/LCD/TextConverter_LCD.c ****         return;
 630              		.loc 1 79 8 is_stmt 0 view .LVU120
 631 0006 FFF7FEFF 		bl	wrongLine
 632              	.LVL66:
  79:Src/LCD/TextConverter_LCD.c ****         return;
 633              		.loc 1 79 7 view .LVU121
 634 000a 60B9     		cbnz	r0, .L54
  81:Src/LCD/TextConverter_LCD.c ****         return;
 635              		.loc 1 81 5 is_stmt 1 view .LVU122
  81:Src/LCD/TextConverter_LCD.c ****         return;
 636              		.loc 1 81 27 is_stmt 0 view .LVU123
 637 000c 2046     		mov	r0, r4
 638 000e FFF7FEFF 		bl	lineNumber
 639              	.LVL67:
 640 0012 0446     		mov	r4, r0
 641              	.LVL68:
  81:Src/LCD/TextConverter_LCD.c ****         return;
 642              		.loc 1 81 26 view .LVU124
 643 0014 174B     		ldr	r3, .L62
 644 0016 4FF4CA75 		mov	r5, #404
 645 001a 05FB0035 		mla	r5, r5, r0, r3
  81:Src/LCD/TextConverter_LCD.c ****         return;
 646              		.loc 1 81 9 view .LVU125
 647 001e 2846     		mov	r0, r5
 648 0020 FFF7FEFF 		bl	lineEnds
 649              	.LVL69:
  81:Src/LCD/TextConverter_LCD.c ****         return;
 650              		.loc 1 81 8 view .LVU126
 651 0024 08B1     		cbz	r0, .L60
 652              	.L54:
  93:Src/LCD/TextConverter_LCD.c **** 
 653              		.loc 1 93 1 view .LVU127
 654 0026 16B0     		add	sp, sp, #88
 655              	.LCFI10:
 656              		.cfi_remember_state
 657              		.cfi_def_cfa_offset 16
 658              		@ sp needed
 659 0028 70BD     		pop	{r4, r5, r6, pc}
 660              	.L60:
 661              	.LCFI11:
 662              		.cfi_restore_state
  84:Src/LCD/TextConverter_LCD.c ****     wmemcpy(strToFind, toPrint_LCD[lineNumber(line)], LINELENGTH_TEXTCONVERTER_LCD);
 663              		.loc 1 84 5 is_stmt 1 view .LVU128
  85:Src/LCD/TextConverter_LCD.c ****     strToFind[LINELENGTH_TEXTCONVERTER_LCD] = '\0';
 664              		.loc 1 85 5 view .LVU129
  85:Src/LCD/TextConverter_LCD.c ****     strToFind[LINELENGTH_TEXTCONVERTER_LCD] = '\0';
 665              		.loc 1 85 35 is_stmt 0 view .LVU130
 666 002a 04EB8404 		add	r4, r4, r4, lsl #2
 667 002e 1248     		ldr	r0, .L62+4
 668 0030 00EB0414 		add	r4, r0, r4, lsl #4
ARM GAS  /tmp/ccsMuWUy.s 			page 16


  85:Src/LCD/TextConverter_LCD.c ****     strToFind[LINELENGTH_TEXTCONVERTER_LCD] = '\0';
 669              		.loc 1 85 5 view .LVU131
 670 0034 1422     		movs	r2, #20
 671 0036 2146     		mov	r1, r4
 672 0038 01A8     		add	r0, sp, #4
 673 003a FFF7FEFF 		bl	wmemcpy
 674              	.LVL70:
  86:Src/LCD/TextConverter_LCD.c **** 
 675              		.loc 1 86 5 is_stmt 1 view .LVU132
  86:Src/LCD/TextConverter_LCD.c **** 
 676              		.loc 1 86 45 is_stmt 0 view .LVU133
 677 003e 0023     		movs	r3, #0
 678 0040 1593     		str	r3, [sp, #84]
  88:Src/LCD/TextConverter_LCD.c ****     if (lineEnds(pToFirstLetter))
 679              		.loc 1 88 5 is_stmt 1 view .LVU134
  88:Src/LCD/TextConverter_LCD.c ****     if (lineEnds(pToFirstLetter))
 680              		.loc 1 88 31 is_stmt 0 view .LVU135
 681 0042 01A9     		add	r1, sp, #4
 682 0044 2846     		mov	r0, r5
 683 0046 FFF7FEFF 		bl	wcsstr
 684              	.LVL71:
 685 004a 0646     		mov	r6, r0
 686              	.LVL72:
  89:Src/LCD/TextConverter_LCD.c ****         wmemcpy(toPrint_LCD[lineNumber(line)], text_LCD[lineNumber(line)], LINELENGTH_TEXTCONVERTER
 687              		.loc 1 89 5 is_stmt 1 view .LVU136
  89:Src/LCD/TextConverter_LCD.c ****         wmemcpy(toPrint_LCD[lineNumber(line)], text_LCD[lineNumber(line)], LINELENGTH_TEXTCONVERTER
 688              		.loc 1 89 9 is_stmt 0 view .LVU137
 689 004c FFF7FEFF 		bl	lineEnds
 690              	.LVL73:
  89:Src/LCD/TextConverter_LCD.c ****         wmemcpy(toPrint_LCD[lineNumber(line)], text_LCD[lineNumber(line)], LINELENGTH_TEXTCONVERTER
 691              		.loc 1 89 8 view .LVU138
 692 0050 50B9     		cbnz	r0, .L61
 693              	.L56:
  91:Src/LCD/TextConverter_LCD.c ****         wmemcpy(toPrint_LCD[lineNumber(line)], &pToFirstLetter[1], LINELENGTH_TEXTCONVERTER_LCD);
 694              		.loc 1 91 5 is_stmt 1 view .LVU139
  91:Src/LCD/TextConverter_LCD.c ****         wmemcpy(toPrint_LCD[lineNumber(line)], &pToFirstLetter[1], LINELENGTH_TEXTCONVERTER_LCD);
 695              		.loc 1 91 10 is_stmt 0 view .LVU140
 696 0052 3046     		mov	r0, r6
 697 0054 FFF7FEFF 		bl	lineEnds
 698              	.LVL74:
  91:Src/LCD/TextConverter_LCD.c ****         wmemcpy(toPrint_LCD[lineNumber(line)], &pToFirstLetter[1], LINELENGTH_TEXTCONVERTER_LCD);
 699              		.loc 1 91 8 view .LVU141
 700 0058 0028     		cmp	r0, #0
 701 005a E4D1     		bne	.L54
  92:Src/LCD/TextConverter_LCD.c **** }
 702              		.loc 1 92 9 is_stmt 1 view .LVU142
 703 005c 1422     		movs	r2, #20
 704 005e 311D     		adds	r1, r6, #4
 705 0060 2046     		mov	r0, r4
 706 0062 FFF7FEFF 		bl	wmemcpy
 707              	.LVL75:
 708 0066 DEE7     		b	.L54
 709              	.L61:
  90:Src/LCD/TextConverter_LCD.c ****     if (!lineEnds(pToFirstLetter))
 710              		.loc 1 90 9 view .LVU143
 711 0068 1422     		movs	r2, #20
 712 006a 2946     		mov	r1, r5
ARM GAS  /tmp/ccsMuWUy.s 			page 17


 713 006c 2046     		mov	r0, r4
 714 006e FFF7FEFF 		bl	wmemcpy
 715              	.LVL76:
 716 0072 EEE7     		b	.L56
 717              	.L63:
 718              		.align	2
 719              	.L62:
 720 0074 00000000 		.word	.LANCHOR2
 721 0078 00000000 		.word	.LANCHOR0
 722              		.cfi_endproc
 723              	.LFE11:
 725              		.section	.text.homeLine_TextConverter_LCD,"ax",%progbits
 726              		.align	1
 727              		.global	homeLine_TextConverter_LCD
 728              		.syntax unified
 729              		.thumb
 730              		.thumb_func
 731              		.fpu softvfp
 733              	homeLine_TextConverter_LCD:
 734              	.LVL77:
 735              	.LFB12:
  96:Src/LCD/TextConverter_LCD.c ****     wmemcpy(toPrint_LCD[lineNumber(line)], text_LCD[lineNumber(line)], LINELENGTH_TEXTCONVERTER_LCD
 736              		.loc 1 96 1 view -0
 737              		.cfi_startproc
 738              		@ args = 0, pretend = 0, frame = 0
 739              		@ frame_needed = 0, uses_anonymous_args = 0
  96:Src/LCD/TextConverter_LCD.c ****     wmemcpy(toPrint_LCD[lineNumber(line)], text_LCD[lineNumber(line)], LINELENGTH_TEXTCONVERTER_LCD
 740              		.loc 1 96 1 is_stmt 0 view .LVU145
 741 0000 10B5     		push	{r4, lr}
 742              	.LCFI12:
 743              		.cfi_def_cfa_offset 8
 744              		.cfi_offset 4, -8
 745              		.cfi_offset 14, -4
  97:Src/LCD/TextConverter_LCD.c **** }
 746              		.loc 1 97 5 is_stmt 1 view .LVU146
  97:Src/LCD/TextConverter_LCD.c **** }
 747              		.loc 1 97 25 is_stmt 0 view .LVU147
 748 0002 FFF7FEFF 		bl	lineNumber
 749              	.LVL78:
  97:Src/LCD/TextConverter_LCD.c **** }
 750              		.loc 1 97 24 view .LVU148
 751 0006 00EB8004 		add	r4, r0, r0, lsl #2
  97:Src/LCD/TextConverter_LCD.c **** }
 752              		.loc 1 97 5 view .LVU149
 753 000a 1422     		movs	r2, #20
 754 000c 054B     		ldr	r3, .L66
 755 000e 4FF4CA71 		mov	r1, #404
 756 0012 01FB0031 		mla	r1, r1, r0, r3
 757 0016 0448     		ldr	r0, .L66+4
 758 0018 00EB0410 		add	r0, r0, r4, lsl #4
 759 001c FFF7FEFF 		bl	wmemcpy
 760              	.LVL79:
  98:Src/LCD/TextConverter_LCD.c **** 
 761              		.loc 1 98 1 view .LVU150
 762 0020 10BD     		pop	{r4, pc}
 763              	.L67:
 764 0022 00BF     		.align	2
ARM GAS  /tmp/ccsMuWUy.s 			page 18


 765              	.L66:
 766 0024 00000000 		.word	.LANCHOR2
 767 0028 00000000 		.word	.LANCHOR0
 768              		.cfi_endproc
 769              	.LFE12:
 771              		.section	.rodata.addIntNumberToString.str4.4,"aMS",%progbits,4
 772              		.align	2
 773              	.LC1:
 774 0000 25000000 		.ascii	"%\000\000\000d\000\000\000\000\000\000\000"
 774      64000000 
 774      00000000 
 775              		.section	.text.addIntNumberToString,"ax",%progbits
 776              		.align	1
 777              		.global	addIntNumberToString
 778              		.syntax unified
 779              		.thumb
 780              		.thumb_func
 781              		.fpu softvfp
 783              	addIntNumberToString:
 784              	.LVL80:
 785              	.LFB13:
 101:Src/LCD/TextConverter_LCD.c ****     swprintf(&string[wcslen(string)], MAXTEXTLENGTH-wcslen(string), L"%d", number);
 786              		.loc 1 101 1 is_stmt 1 view -0
 787              		.cfi_startproc
 788              		@ args = 0, pretend = 0, frame = 0
 789              		@ frame_needed = 0, uses_anonymous_args = 0
 101:Src/LCD/TextConverter_LCD.c ****     swprintf(&string[wcslen(string)], MAXTEXTLENGTH-wcslen(string), L"%d", number);
 790              		.loc 1 101 1 is_stmt 0 view .LVU152
 791 0000 70B5     		push	{r4, r5, r6, lr}
 792              	.LCFI13:
 793              		.cfi_def_cfa_offset 16
 794              		.cfi_offset 4, -16
 795              		.cfi_offset 5, -12
 796              		.cfi_offset 6, -8
 797              		.cfi_offset 14, -4
 798 0002 0446     		mov	r4, r0
 799 0004 0E46     		mov	r6, r1
 102:Src/LCD/TextConverter_LCD.c **** }
 800              		.loc 1 102 5 is_stmt 1 view .LVU153
 102:Src/LCD/TextConverter_LCD.c **** }
 801              		.loc 1 102 22 is_stmt 0 view .LVU154
 802 0006 FFF7FEFF 		bl	wcslen
 803              	.LVL81:
 102:Src/LCD/TextConverter_LCD.c **** }
 804              		.loc 1 102 5 view .LVU155
 805 000a 04EB8005 		add	r5, r4, r0, lsl #2
 102:Src/LCD/TextConverter_LCD.c **** }
 806              		.loc 1 102 53 view .LVU156
 807 000e 2046     		mov	r0, r4
 808 0010 FFF7FEFF 		bl	wcslen
 809              	.LVL82:
 102:Src/LCD/TextConverter_LCD.c **** }
 810              		.loc 1 102 5 view .LVU157
 811 0014 3346     		mov	r3, r6
 812 0016 034A     		ldr	r2, .L70
 813 0018 C0F16401 		rsb	r1, r0, #100
 814 001c 2846     		mov	r0, r5
ARM GAS  /tmp/ccsMuWUy.s 			page 19


 815 001e FFF7FEFF 		bl	swprintf
 816              	.LVL83:
 103:Src/LCD/TextConverter_LCD.c **** 
 817              		.loc 1 103 1 view .LVU158
 818 0022 70BD     		pop	{r4, r5, r6, pc}
 819              	.LVL84:
 820              	.L71:
 103:Src/LCD/TextConverter_LCD.c **** 
 821              		.loc 1 103 1 view .LVU159
 822              		.align	2
 823              	.L70:
 824 0024 00000000 		.word	.LC1
 825              		.cfi_endproc
 826              	.LFE13:
 828              		.global	__aeabi_fcmplt
 829              		.section	.rodata.addFloatNumberToString.str4.4,"aMS",%progbits,4
 830              		.align	2
 831              	.LC2:
 832 0000 2D000000 		.ascii	"-\000\000\000%\000\000\000d\000\000\000.\000\000\000"
 832      25000000 
 832      64000000 
 832      2E000000 
 833 0010 25000000 		.ascii	"%\000\000\000d\000\000\000\000\000\000\000"
 833      64000000 
 833      00000000 
 834              		.global	__aeabi_fcmpge
 835              		.align	2
 836              	.LC3:
 837 001c 25000000 		.ascii	"%\000\000\000d\000\000\000.\000\000\000%\000\000\000"
 837      64000000 
 837      2E000000 
 837      25000000 
 838 002c 64000000 		.ascii	"d\000\000\000\000\000\000\000"
 838      00000000 
 839              		.section	.text.addFloatNumberToString,"ax",%progbits
 840              		.align	1
 841              		.global	addFloatNumberToString
 842              		.syntax unified
 843              		.thumb
 844              		.thumb_func
 845              		.fpu softvfp
 847              	addFloatNumberToString:
 848              	.LVL85:
 849              	.LFB16:
 120:Src/LCD/TextConverter_LCD.c **** 
 121:Src/LCD/TextConverter_LCD.c **** void addFloatNumberToString(wchar_t* string, float number, int digits)
 122:Src/LCD/TextConverter_LCD.c **** {
 850              		.loc 1 122 1 is_stmt 1 view -0
 851              		.cfi_startproc
 852              		@ args = 0, pretend = 0, frame = 0
 853              		@ frame_needed = 0, uses_anonymous_args = 0
 854              		.loc 1 122 1 is_stmt 0 view .LVU161
 855 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 856              	.LCFI14:
 857              		.cfi_def_cfa_offset 28
 858              		.cfi_offset 4, -28
 859              		.cfi_offset 5, -24
ARM GAS  /tmp/ccsMuWUy.s 			page 20


 860              		.cfi_offset 6, -20
 861              		.cfi_offset 7, -16
 862              		.cfi_offset 8, -12
 863              		.cfi_offset 9, -8
 864              		.cfi_offset 14, -4
 865 0004 83B0     		sub	sp, sp, #12
 866              	.LCFI15:
 867              		.cfi_def_cfa_offset 40
 868 0006 0546     		mov	r5, r0
 869 0008 0C46     		mov	r4, r1
 870 000a 1646     		mov	r6, r2
 123:Src/LCD/TextConverter_LCD.c ****     if (number < 0)
 871              		.loc 1 123 5 is_stmt 1 view .LVU162
 872              		.loc 1 123 8 is_stmt 0 view .LVU163
 873 000c 0021     		movs	r1, #0
 874              	.LVL86:
 875              		.loc 1 123 8 view .LVU164
 876 000e 2046     		mov	r0, r4
 877              	.LVL87:
 878              		.loc 1 123 8 view .LVU165
 879 0010 FFF7FEFF 		bl	__aeabi_fcmplt
 880              	.LVL88:
 881              		.loc 1 123 8 view .LVU166
 882 0014 38B9     		cbnz	r0, .L80
 883              	.L73:
 124:Src/LCD/TextConverter_LCD.c ****         swprintf(&string[wcslen(string)], MAXTEXTLENGTH-wcslen(string), L"-%d.%d", digitsBeforeDot(
 125:Src/LCD/TextConverter_LCD.c ****     if (number >= 0)
 884              		.loc 1 125 5 is_stmt 1 view .LVU167
 885              		.loc 1 125 8 is_stmt 0 view .LVU168
 886 0016 0021     		movs	r1, #0
 887 0018 2046     		mov	r0, r4
 888 001a FFF7FEFF 		bl	__aeabi_fcmpge
 889              	.LVL89:
 890 001e E8B9     		cbnz	r0, .L81
 891              	.LVL90:
 892              	.L72:
 126:Src/LCD/TextConverter_LCD.c ****         swprintf(&string[wcslen(string)], MAXTEXTLENGTH-wcslen(string), L"%d.%d", digitsBeforeDot(n
 127:Src/LCD/TextConverter_LCD.c **** }
 893              		.loc 1 127 1 view .LVU169
 894 0020 03B0     		add	sp, sp, #12
 895              	.LCFI16:
 896              		.cfi_remember_state
 897              		.cfi_def_cfa_offset 28
 898              		@ sp needed
 899 0022 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 900              	.LVL91:
 901              	.L80:
 902              	.LCFI17:
 903              		.cfi_restore_state
 124:Src/LCD/TextConverter_LCD.c ****         swprintf(&string[wcslen(string)], MAXTEXTLENGTH-wcslen(string), L"-%d.%d", digitsBeforeDot(
 904              		.loc 1 124 9 is_stmt 1 view .LVU170
 124:Src/LCD/TextConverter_LCD.c ****         swprintf(&string[wcslen(string)], MAXTEXTLENGTH-wcslen(string), L"-%d.%d", digitsBeforeDot(
 905              		.loc 1 124 26 is_stmt 0 view .LVU171
 906 0026 2846     		mov	r0, r5
 907 0028 FFF7FEFF 		bl	wcslen
 908              	.LVL92:
 124:Src/LCD/TextConverter_LCD.c ****         swprintf(&string[wcslen(string)], MAXTEXTLENGTH-wcslen(string), L"-%d.%d", digitsBeforeDot(
ARM GAS  /tmp/ccsMuWUy.s 			page 21


 909              		.loc 1 124 9 view .LVU172
 910 002c 05EB8007 		add	r7, r5, r0, lsl #2
 124:Src/LCD/TextConverter_LCD.c ****         swprintf(&string[wcslen(string)], MAXTEXTLENGTH-wcslen(string), L"-%d.%d", digitsBeforeDot(
 911              		.loc 1 124 57 view .LVU173
 912 0030 2846     		mov	r0, r5
 913 0032 FFF7FEFF 		bl	wcslen
 914              	.LVL93:
 915 0036 8046     		mov	r8, r0
 124:Src/LCD/TextConverter_LCD.c ****         swprintf(&string[wcslen(string)], MAXTEXTLENGTH-wcslen(string), L"-%d.%d", digitsBeforeDot(
 916              		.loc 1 124 9 view .LVU174
 917 0038 3146     		mov	r1, r6
 918 003a 2046     		mov	r0, r4
 919 003c FFF7FEFF 		bl	digitsBeforeDot
 920              	.LVL94:
 921 0040 8146     		mov	r9, r0
 922 0042 3146     		mov	r1, r6
 923 0044 2046     		mov	r0, r4
 924 0046 FFF7FEFF 		bl	digitsAfterDot
 925              	.LVL95:
 926 004a 0090     		str	r0, [sp]
 927 004c 4B46     		mov	r3, r9
 928 004e 114A     		ldr	r2, .L82
 929 0050 C8F16401 		rsb	r1, r8, #100
 930 0054 3846     		mov	r0, r7
 931 0056 FFF7FEFF 		bl	swprintf
 932              	.LVL96:
 933 005a DCE7     		b	.L73
 934              	.L81:
 126:Src/LCD/TextConverter_LCD.c ****         swprintf(&string[wcslen(string)], MAXTEXTLENGTH-wcslen(string), L"%d.%d", digitsBeforeDot(n
 935              		.loc 1 126 9 is_stmt 1 view .LVU175
 126:Src/LCD/TextConverter_LCD.c ****         swprintf(&string[wcslen(string)], MAXTEXTLENGTH-wcslen(string), L"%d.%d", digitsBeforeDot(n
 936              		.loc 1 126 26 is_stmt 0 view .LVU176
 937 005c 2846     		mov	r0, r5
 938 005e FFF7FEFF 		bl	wcslen
 939              	.LVL97:
 126:Src/LCD/TextConverter_LCD.c ****         swprintf(&string[wcslen(string)], MAXTEXTLENGTH-wcslen(string), L"%d.%d", digitsBeforeDot(n
 940              		.loc 1 126 9 view .LVU177
 941 0062 05EB8007 		add	r7, r5, r0, lsl #2
 126:Src/LCD/TextConverter_LCD.c ****         swprintf(&string[wcslen(string)], MAXTEXTLENGTH-wcslen(string), L"%d.%d", digitsBeforeDot(n
 942              		.loc 1 126 57 view .LVU178
 943 0066 2846     		mov	r0, r5
 944 0068 FFF7FEFF 		bl	wcslen
 945              	.LVL98:
 946 006c 0546     		mov	r5, r0
 947              	.LVL99:
 126:Src/LCD/TextConverter_LCD.c ****         swprintf(&string[wcslen(string)], MAXTEXTLENGTH-wcslen(string), L"%d.%d", digitsBeforeDot(n
 948              		.loc 1 126 9 view .LVU179
 949 006e 3146     		mov	r1, r6
 950 0070 2046     		mov	r0, r4
 951 0072 FFF7FEFF 		bl	digitsBeforeDot
 952              	.LVL100:
 953 0076 8046     		mov	r8, r0
 954 0078 3146     		mov	r1, r6
 955 007a 2046     		mov	r0, r4
 956 007c FFF7FEFF 		bl	digitsAfterDot
 957              	.LVL101:
 958 0080 0090     		str	r0, [sp]
ARM GAS  /tmp/ccsMuWUy.s 			page 22


 959 0082 4346     		mov	r3, r8
 960 0084 044A     		ldr	r2, .L82+4
 961 0086 C5F16401 		rsb	r1, r5, #100
 962 008a 3846     		mov	r0, r7
 963 008c FFF7FEFF 		bl	swprintf
 964              	.LVL102:
 965              		.loc 1 127 1 view .LVU180
 966 0090 C6E7     		b	.L72
 967              	.L83:
 968 0092 00BF     		.align	2
 969              	.L82:
 970 0094 00000000 		.word	.LC2
 971 0098 1C000000 		.word	.LC3
 972              		.cfi_endproc
 973              	.LFE16:
 975              		.global	EMPTY_STRING
 976              		.section	.bss.text_LCD,"aw",%nobits
 977              		.align	2
 978              		.set	.LANCHOR2,. + 0
 981              	text_LCD:
 982 0000 00000000 		.space	1616
 982      00000000 
 982      00000000 
 982      00000000 
 982      00000000 
 983              		.section	.bss.toPrint_LCD,"aw",%nobits
 984              		.align	2
 985              		.set	.LANCHOR0,. + 0
 988              	toPrint_LCD:
 989 0000 00000000 		.space	320
 989      00000000 
 989      00000000 
 989      00000000 
 989      00000000 
 990              		.section	.rodata.EMPTY_STRING,"a"
 991              		.align	2
 992              		.set	.LANCHOR1,. + 0
 995              	EMPTY_STRING:
 996 0000 20000000 		.ascii	" \000\000\000 \000\000\000 \000\000\000 \000\000\000"
 996      20000000 
 996      20000000 
 996      20000000 
 997 0010 20000000 		.ascii	" \000\000\000 \000\000\000 \000\000\000 \000\000\000"
 997      20000000 
 997      20000000 
 997      20000000 
 998 0020 20000000 		.ascii	" \000\000\000 \000\000\000 \000\000\000 \000\000\000"
 998      20000000 
 998      20000000 
 998      20000000 
 999 0030 20000000 		.ascii	" \000\000\000 \000\000\000 \000\000\000 \000\000\000"
 999      20000000 
 999      20000000 
 999      20000000 
 1000 0040 20000000 		.ascii	" \000\000\000 \000\000\000 \000\000\000 \000\000\000"
 1000      20000000 
 1000      20000000 
ARM GAS  /tmp/ccsMuWUy.s 			page 23


 1000      20000000 
 1001 0050 00000000 		.ascii	"\000\000\000\000"
 1002              		.text
 1003              	.Letext0:
 1004              		.file 2 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 1005              		.file 3 "/usr/include/newlib/sys/_types.h"
 1006              		.file 4 "/usr/include/newlib/sys/reent.h"
 1007              		.file 5 "/usr/include/newlib/sys/lock.h"
 1008              		.file 6 "Inc/LCD/TextConverter_LCD.h"
 1009              		.file 7 "/usr/include/newlib/math.h"
 1010              		.file 8 "/usr/include/newlib/stdlib.h"
 1011              		.file 9 "/usr/include/newlib/wchar.h"
 1012              		.file 10 "Inc/LCD/Interface_LCD.h"
ARM GAS  /tmp/ccsMuWUy.s 			page 24


DEFINED SYMBOLS
                            *ABS*:0000000000000000 TextConverter_LCD.c
     /tmp/ccsMuWUy.s:16     .text.lineNumber:0000000000000000 $t
     /tmp/ccsMuWUy.s:23     .text.lineNumber:0000000000000000 lineNumber
     /tmp/ccsMuWUy.s:42     .text.wrongLine:0000000000000000 $t
     /tmp/ccsMuWUy.s:48     .text.wrongLine:0000000000000000 wrongLine
     /tmp/ccsMuWUy.s:88     .text.lineEnds:0000000000000000 $t
     /tmp/ccsMuWUy.s:94     .text.lineEnds:0000000000000000 lineEnds
     /tmp/ccsMuWUy.s:117    .text.digitsBeforeDot:0000000000000000 $t
     /tmp/ccsMuWUy.s:123    .text.digitsBeforeDot:0000000000000000 digitsBeforeDot
     /tmp/ccsMuWUy.s:191    .text.digitsAfterDot:0000000000000000 $t
     /tmp/ccsMuWUy.s:197    .text.digitsAfterDot:0000000000000000 digitsAfterDot
     /tmp/ccsMuWUy.s:274    .text.digitsAfterDot:0000000000000054 $d
     /tmp/ccsMuWUy.s:279    .text.create_TextConverter_LCD:0000000000000000 $t
     /tmp/ccsMuWUy.s:286    .text.create_TextConverter_LCD:0000000000000000 create_TextConverter_LCD
     /tmp/ccsMuWUy.s:339    .text.create_TextConverter_LCD:000000000000002c $d
     /tmp/ccsMuWUy.s:345    .rodata.getLine_TextConverter_LCD.str4.4:0000000000000000 $d
     /tmp/ccsMuWUy.s:349    .text.getLine_TextConverter_LCD:0000000000000000 $t
     /tmp/ccsMuWUy.s:356    .text.getLine_TextConverter_LCD:0000000000000000 getLine_TextConverter_LCD
     /tmp/ccsMuWUy.s:396    .text.getLine_TextConverter_LCD:0000000000000020 $d
     /tmp/ccsMuWUy.s:402    .text.putLine_TextConverter_LCD:0000000000000000 $t
     /tmp/ccsMuWUy.s:409    .text.putLine_TextConverter_LCD:0000000000000000 putLine_TextConverter_LCD
     /tmp/ccsMuWUy.s:496    .text.putLine_TextConverter_LCD:0000000000000060 $d
     /tmp/ccsMuWUy.s:503    .text.updateLine_TextConverter_LCD:0000000000000000 $t
     /tmp/ccsMuWUy.s:510    .text.updateLine_TextConverter_LCD:0000000000000000 updateLine_TextConverter_LCD
     /tmp/ccsMuWUy.s:552    .text.updateLine_TextConverter_LCD:0000000000000024 $d
     /tmp/ccsMuWUy.s:557    .text.clearLine_TextConverter_LCD:0000000000000000 $t
     /tmp/ccsMuWUy.s:564    .text.clearLine_TextConverter_LCD:0000000000000000 clearLine_TextConverter_LCD
     /tmp/ccsMuWUy.s:598    .text.clearLine_TextConverter_LCD:0000000000000018 $d
     /tmp/ccsMuWUy.s:603    .text.shiftLine_TextConverter_LCD:0000000000000000 $t
     /tmp/ccsMuWUy.s:610    .text.shiftLine_TextConverter_LCD:0000000000000000 shiftLine_TextConverter_LCD
     /tmp/ccsMuWUy.s:720    .text.shiftLine_TextConverter_LCD:0000000000000074 $d
     /tmp/ccsMuWUy.s:726    .text.homeLine_TextConverter_LCD:0000000000000000 $t
     /tmp/ccsMuWUy.s:733    .text.homeLine_TextConverter_LCD:0000000000000000 homeLine_TextConverter_LCD
     /tmp/ccsMuWUy.s:766    .text.homeLine_TextConverter_LCD:0000000000000024 $d
     /tmp/ccsMuWUy.s:772    .rodata.addIntNumberToString.str4.4:0000000000000000 $d
     /tmp/ccsMuWUy.s:776    .text.addIntNumberToString:0000000000000000 $t
     /tmp/ccsMuWUy.s:783    .text.addIntNumberToString:0000000000000000 addIntNumberToString
     /tmp/ccsMuWUy.s:824    .text.addIntNumberToString:0000000000000024 $d
     /tmp/ccsMuWUy.s:830    .rodata.addFloatNumberToString.str4.4:0000000000000000 $d
     /tmp/ccsMuWUy.s:840    .text.addFloatNumberToString:0000000000000000 $t
     /tmp/ccsMuWUy.s:847    .text.addFloatNumberToString:0000000000000000 addFloatNumberToString
     /tmp/ccsMuWUy.s:970    .text.addFloatNumberToString:0000000000000094 $d
     /tmp/ccsMuWUy.s:995    .rodata.EMPTY_STRING:0000000000000000 EMPTY_STRING
     /tmp/ccsMuWUy.s:977    .bss.text_LCD:0000000000000000 $d
     /tmp/ccsMuWUy.s:981    .bss.text_LCD:0000000000000000 text_LCD
     /tmp/ccsMuWUy.s:984    .bss.toPrint_LCD:0000000000000000 $d
     /tmp/ccsMuWUy.s:988    .bss.toPrint_LCD:0000000000000000 toPrint_LCD
     /tmp/ccsMuWUy.s:991    .rodata.EMPTY_STRING:0000000000000000 $d

UNDEFINED SYMBOLS
__aeabi_f2d
__aeabi_d2iz
__aeabi_f2iz
round
__aeabi_i2d
__aeabi_i2f
ARM GAS  /tmp/ccsMuWUy.s 			page 25


__aeabi_fsub
__aeabi_dmul
pow
wmemcpy
create_LCD
wcscpy
wcslen
swprintf
printLine_LCD
wcsstr
__aeabi_fcmplt
__aeabi_fcmpge
