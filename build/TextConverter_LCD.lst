ARM GAS  /tmp/cc7lMHVS.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"TextConverter_LCD.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.lineNumber,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	lineNumber:
  23              	.LFB3:
  24              		.file 1 "Src/LCD/TextConverter_LCD.c"
   1:Src/LCD/TextConverter_LCD.c **** #include "TextConverter_LCD.h"
   2:Src/LCD/TextConverter_LCD.c **** 
   3:Src/LCD/TextConverter_LCD.c **** #include "Interface_LCD.h"
   4:Src/LCD/TextConverter_LCD.c **** 
   5:Src/LCD/TextConverter_LCD.c **** #include <stdint.h>
   6:Src/LCD/TextConverter_LCD.c **** #include <stdbool.h>
   7:Src/LCD/TextConverter_LCD.c **** #include <stdio.h>
   8:Src/LCD/TextConverter_LCD.c **** #include <string.h>
   9:Src/LCD/TextConverter_LCD.c **** #include <math.h>
  10:Src/LCD/TextConverter_LCD.c **** #include <wchar.h>
  11:Src/LCD/TextConverter_LCD.c **** #include <stdlib.h>
  12:Src/LCD/TextConverter_LCD.c **** 
  13:Src/LCD/TextConverter_LCD.c **** const wchar_t EMPTY_STRING[] = L"                    ";
  14:Src/LCD/TextConverter_LCD.c **** 
  15:Src/LCD/TextConverter_LCD.c **** static wchar_t toPrint_LCD[NUMBEROFLINES_TEXTCONVERTER_LCD][LINELENGTH_TEXTCONVERTER_LCD];
  16:Src/LCD/TextConverter_LCD.c **** static wchar_t text_LCD[NUMBEROFLINES_TEXTCONVERTER_LCD][MAXTEXTLENGTH+1];
  17:Src/LCD/TextConverter_LCD.c **** 
  18:Src/LCD/TextConverter_LCD.c **** 
  19:Src/LCD/TextConverter_LCD.c **** static int lineNumber(int line) {return line-1;}
  25              		.loc 1 19 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              		@ link register save eliminated.
  30              	.LVL0:
  31              		.loc 1 19 0
  32 0000 0138     		subs	r0, r0, #1
  33              	.LVL1:
  34 0002 7047     		bx	lr
  35              		.cfi_endproc
  36              	.LFE3:
  38              		.section	.text.wrongLine,"ax",%progbits
  39              		.align	1
  40              		.syntax unified
ARM GAS  /tmp/cc7lMHVS.s 			page 2


  41              		.thumb
  42              		.thumb_func
  43              		.fpu softvfp
  45              	wrongLine:
  46              	.LFB4:
  20:Src/LCD/TextConverter_LCD.c **** 
  21:Src/LCD/TextConverter_LCD.c **** static _Bool wrongLine(int line)
  22:Src/LCD/TextConverter_LCD.c **** {
  47              		.loc 1 22 0
  48              		.cfi_startproc
  49              		@ args = 0, pretend = 0, frame = 0
  50              		@ frame_needed = 0, uses_anonymous_args = 0
  51              		@ link register save eliminated.
  52              	.LVL2:
  23:Src/LCD/TextConverter_LCD.c ****     if (line < 1)
  53              		.loc 1 23 0
  54 0000 0028     		cmp	r0, #0
  55 0002 05DD     		ble	.L4
  24:Src/LCD/TextConverter_LCD.c ****         return true;
  25:Src/LCD/TextConverter_LCD.c ****     if (line > NUMBEROFLINES_TEXTCONVERTER_LCD)
  56              		.loc 1 25 0
  57 0004 0428     		cmp	r0, #4
  58 0006 01DC     		bgt	.L6
  26:Src/LCD/TextConverter_LCD.c ****         return true;
  27:Src/LCD/TextConverter_LCD.c ****     return false;
  59              		.loc 1 27 0
  60 0008 0020     		movs	r0, #0
  61              	.LVL3:
  28:Src/LCD/TextConverter_LCD.c **** }
  62              		.loc 1 28 0
  63 000a 7047     		bx	lr
  64              	.LVL4:
  65              	.L6:
  26:Src/LCD/TextConverter_LCD.c ****         return true;
  66              		.loc 1 26 0
  67 000c 0120     		movs	r0, #1
  68              	.LVL5:
  69 000e 7047     		bx	lr
  70              	.LVL6:
  71              	.L4:
  24:Src/LCD/TextConverter_LCD.c ****         return true;
  72              		.loc 1 24 0
  73 0010 0120     		movs	r0, #1
  74              	.LVL7:
  75 0012 7047     		bx	lr
  76              		.cfi_endproc
  77              	.LFE4:
  79              		.section	.text.lineEnds,"ax",%progbits
  80              		.align	1
  81              		.syntax unified
  82              		.thumb
  83              		.thumb_func
  84              		.fpu softvfp
  86              	lineEnds:
  87              	.LFB10:
  29:Src/LCD/TextConverter_LCD.c **** 
  30:Src/LCD/TextConverter_LCD.c **** void create_TextConverter_LCD(void)
ARM GAS  /tmp/cc7lMHVS.s 			page 3


  31:Src/LCD/TextConverter_LCD.c **** {
  32:Src/LCD/TextConverter_LCD.c ****     int line;
  33:Src/LCD/TextConverter_LCD.c ****     for (line=1; line<=NUMBEROFLINES_TEXTCONVERTER_LCD; line++)
  34:Src/LCD/TextConverter_LCD.c ****         wmemcpy(toPrint_LCD[lineNumber(line)], EMPTY_STRING, LINELENGTH_TEXTCONVERTER_LCD);
  35:Src/LCD/TextConverter_LCD.c ****     create_LCD();
  36:Src/LCD/TextConverter_LCD.c **** }
  37:Src/LCD/TextConverter_LCD.c **** 
  38:Src/LCD/TextConverter_LCD.c **** const wchar_t* getLine_TextConverter_LCD(int line)
  39:Src/LCD/TextConverter_LCD.c **** {
  40:Src/LCD/TextConverter_LCD.c ****     if (wrongLine(line))
  41:Src/LCD/TextConverter_LCD.c ****         return L"";
  42:Src/LCD/TextConverter_LCD.c ****     return toPrint_LCD[lineNumber(line)];
  43:Src/LCD/TextConverter_LCD.c **** }
  44:Src/LCD/TextConverter_LCD.c **** 
  45:Src/LCD/TextConverter_LCD.c **** void putLine_TextConverter_LCD(const wchar_t* text, int line)
  46:Src/LCD/TextConverter_LCD.c **** {
  47:Src/LCD/TextConverter_LCD.c ****     if (wrongLine(line))
  48:Src/LCD/TextConverter_LCD.c ****         return;
  49:Src/LCD/TextConverter_LCD.c ****     wcscpy(text_LCD[lineNumber(line)], text);
  50:Src/LCD/TextConverter_LCD.c ****     int textLength = wcslen(text);
  51:Src/LCD/TextConverter_LCD.c **** 
  52:Src/LCD/TextConverter_LCD.c ****     if (textLength < LINELENGTH_TEXTCONVERTER_LCD)
  53:Src/LCD/TextConverter_LCD.c ****         swprintf(&text_LCD[lineNumber(line)][textLength], LINELENGTH_TEXTCONVERTER_LCD-textLength+1
  54:Src/LCD/TextConverter_LCD.c ****     wmemcpy(toPrint_LCD[lineNumber(line)], text_LCD[lineNumber(line)], LINELENGTH_TEXTCONVERTER_LCD
  55:Src/LCD/TextConverter_LCD.c **** }
  56:Src/LCD/TextConverter_LCD.c **** 
  57:Src/LCD/TextConverter_LCD.c **** void updateLine_TextConverter_LCD(int line)
  58:Src/LCD/TextConverter_LCD.c **** {
  59:Src/LCD/TextConverter_LCD.c ****     if (wrongLine(line))
  60:Src/LCD/TextConverter_LCD.c ****         return;
  61:Src/LCD/TextConverter_LCD.c ****     printLine_LCD(line, toPrint_LCD[lineNumber(line)]);
  62:Src/LCD/TextConverter_LCD.c **** }
  63:Src/LCD/TextConverter_LCD.c **** 
  64:Src/LCD/TextConverter_LCD.c **** 
  65:Src/LCD/TextConverter_LCD.c **** void clearLine_TextConverter_LCD(int line)
  66:Src/LCD/TextConverter_LCD.c **** {
  67:Src/LCD/TextConverter_LCD.c ****     if (wrongLine(line))
  68:Src/LCD/TextConverter_LCD.c ****         return;
  69:Src/LCD/TextConverter_LCD.c ****     putLine_TextConverter_LCD(L"", line);
  70:Src/LCD/TextConverter_LCD.c **** }
  71:Src/LCD/TextConverter_LCD.c **** 
  72:Src/LCD/TextConverter_LCD.c **** static _Bool lineEnds(const wchar_t* string)
  73:Src/LCD/TextConverter_LCD.c **** {
  88              		.loc 1 73 0
  89              		.cfi_startproc
  90              		@ args = 0, pretend = 0, frame = 0
  91              		@ frame_needed = 0, uses_anonymous_args = 0
  92              		@ link register save eliminated.
  93              	.LVL8:
  74:Src/LCD/TextConverter_LCD.c ****     return string[LINELENGTH_TEXTCONVERTER_LCD] == '\0';
  94              		.loc 1 74 0
  95 0000 006D     		ldr	r0, [r0, #80]
  96              	.LVL9:
  75:Src/LCD/TextConverter_LCD.c **** }
  97              		.loc 1 75 0
  98 0002 B0FA80F0 		clz	r0, r0
  99 0006 4009     		lsrs	r0, r0, #5
ARM GAS  /tmp/cc7lMHVS.s 			page 4


 100 0008 7047     		bx	lr
 101              		.cfi_endproc
 102              	.LFE10:
 104              		.global	__aeabi_f2d
 105              		.global	__aeabi_d2iz
 106              		.global	__aeabi_f2iz
 107              		.section	.text.digitsBeforeDot,"ax",%progbits
 108              		.align	1
 109              		.syntax unified
 110              		.thumb
 111              		.thumb_func
 112              		.fpu softvfp
 114              	digitsBeforeDot:
 115              	.LFB14:
  76:Src/LCD/TextConverter_LCD.c **** 
  77:Src/LCD/TextConverter_LCD.c **** void shiftLine_TextConverter_LCD(int line)
  78:Src/LCD/TextConverter_LCD.c **** {
  79:Src/LCD/TextConverter_LCD.c ****     if(wrongLine(line))
  80:Src/LCD/TextConverter_LCD.c ****         return;
  81:Src/LCD/TextConverter_LCD.c ****     if (lineEnds(text_LCD[lineNumber(line)]))
  82:Src/LCD/TextConverter_LCD.c ****         return;
  83:Src/LCD/TextConverter_LCD.c **** 
  84:Src/LCD/TextConverter_LCD.c ****     wchar_t strToFind[LINELENGTH_TEXTCONVERTER_LCD+1];
  85:Src/LCD/TextConverter_LCD.c ****     wmemcpy(strToFind, toPrint_LCD[lineNumber(line)], LINELENGTH_TEXTCONVERTER_LCD);
  86:Src/LCD/TextConverter_LCD.c ****     strToFind[LINELENGTH_TEXTCONVERTER_LCD] = '\0';
  87:Src/LCD/TextConverter_LCD.c **** 
  88:Src/LCD/TextConverter_LCD.c ****     wchar_t* pToFirstLetter = wcsstr(text_LCD[lineNumber(line)], strToFind);
  89:Src/LCD/TextConverter_LCD.c ****     if (lineEnds(pToFirstLetter))
  90:Src/LCD/TextConverter_LCD.c ****         wmemcpy(toPrint_LCD[lineNumber(line)], text_LCD[lineNumber(line)], LINELENGTH_TEXTCONVERTER
  91:Src/LCD/TextConverter_LCD.c ****     if (!lineEnds(pToFirstLetter))
  92:Src/LCD/TextConverter_LCD.c ****         wmemcpy(toPrint_LCD[lineNumber(line)], &pToFirstLetter[1], LINELENGTH_TEXTCONVERTER_LCD);
  93:Src/LCD/TextConverter_LCD.c **** }
  94:Src/LCD/TextConverter_LCD.c **** 
  95:Src/LCD/TextConverter_LCD.c **** void homeLine_TextConverter_LCD(int line)
  96:Src/LCD/TextConverter_LCD.c **** {
  97:Src/LCD/TextConverter_LCD.c ****     wmemcpy(toPrint_LCD[lineNumber(line)], text_LCD[lineNumber(line)], LINELENGTH_TEXTCONVERTER_LCD
  98:Src/LCD/TextConverter_LCD.c **** }
  99:Src/LCD/TextConverter_LCD.c **** 
 100:Src/LCD/TextConverter_LCD.c **** void addIntNumberToString(wchar_t* string, int number)
 101:Src/LCD/TextConverter_LCD.c **** {
 102:Src/LCD/TextConverter_LCD.c ****     swprintf(&string[wcslen(string)], MAXTEXTLENGTH-wcslen(string), L"%d", number);
 103:Src/LCD/TextConverter_LCD.c **** }
 104:Src/LCD/TextConverter_LCD.c **** 
 105:Src/LCD/TextConverter_LCD.c **** static int digitsBeforeDot(float number, int digits)
 106:Src/LCD/TextConverter_LCD.c **** {
 116              		.loc 1 106 0
 117              		.cfi_startproc
 118              		@ args = 0, pretend = 0, frame = 0
 119              		@ frame_needed = 0, uses_anonymous_args = 0
 120              	.LVL10:
 107:Src/LCD/TextConverter_LCD.c ****     if (digits < 0)
 121              		.loc 1 107 0
 122 0000 0029     		cmp	r1, #0
 123 0002 11DB     		blt	.L11
 106:Src/LCD/TextConverter_LCD.c ****     if (digits < 0)
 124              		.loc 1 106 0
 125 0004 08B5     		push	{r3, lr}
ARM GAS  /tmp/cc7lMHVS.s 			page 5


 126              	.LCFI0:
 127              		.cfi_def_cfa_offset 8
 128              		.cfi_offset 3, -8
 129              		.cfi_offset 14, -4
 108:Src/LCD/TextConverter_LCD.c ****         return 0;
 109:Src/LCD/TextConverter_LCD.c ****     if (digits == 0)
 130              		.loc 1 109 0
 131 0006 29B1     		cbz	r1, .L16
 110:Src/LCD/TextConverter_LCD.c ****         return abs((int)round(number));
 111:Src/LCD/TextConverter_LCD.c ****     return abs((int)(number));
 132              		.loc 1 111 0
 133 0008 FFF7FEFF 		bl	__aeabi_f2iz
 134              	.LVL11:
 135 000c 0028     		cmp	r0, #0
 136 000e B8BF     		it	lt
 137 0010 4042     		rsblt	r0, r0, #0
 138              	.L8:
 112:Src/LCD/TextConverter_LCD.c **** }
 139              		.loc 1 112 0
 140 0012 08BD     		pop	{r3, pc}
 141              	.LVL12:
 142              	.L16:
 110:Src/LCD/TextConverter_LCD.c ****         return abs((int)round(number));
 143              		.loc 1 110 0
 144 0014 FFF7FEFF 		bl	__aeabi_f2d
 145              	.LVL13:
 146 0018 FFF7FEFF 		bl	round
 147              	.LVL14:
 148 001c FFF7FEFF 		bl	__aeabi_d2iz
 149              	.LVL15:
 150 0020 0028     		cmp	r0, #0
 151 0022 B8BF     		it	lt
 152 0024 4042     		rsblt	r0, r0, #0
 153 0026 F4E7     		b	.L8
 154              	.LVL16:
 155              	.L11:
 156              	.LCFI1:
 157              		.cfi_def_cfa_offset 0
 158              		.cfi_restore 3
 159              		.cfi_restore 14
 108:Src/LCD/TextConverter_LCD.c ****         return 0;
 160              		.loc 1 108 0
 161 0028 0020     		movs	r0, #0
 162              	.LVL17:
 163              		.loc 1 112 0
 164 002a 7047     		bx	lr
 165              		.cfi_endproc
 166              	.LFE14:
 168              		.global	__aeabi_i2d
 169              		.global	__aeabi_i2f
 170              		.global	__aeabi_fsub
 171              		.global	__aeabi_dmul
 172              		.section	.text.digitsAfterDot,"ax",%progbits
 173              		.align	1
 174              		.syntax unified
 175              		.thumb
 176              		.thumb_func
ARM GAS  /tmp/cc7lMHVS.s 			page 6


 177              		.fpu softvfp
 179              	digitsAfterDot:
 180              	.LFB15:
 113:Src/LCD/TextConverter_LCD.c **** 
 114:Src/LCD/TextConverter_LCD.c **** static int digitsAfterDot(float number, int digits)
 115:Src/LCD/TextConverter_LCD.c **** {
 181              		.loc 1 115 0
 182              		.cfi_startproc
 183              		@ args = 0, pretend = 0, frame = 0
 184              		@ frame_needed = 0, uses_anonymous_args = 0
 185              	.LVL18:
 116:Src/LCD/TextConverter_LCD.c ****     if (digits<=0)
 186              		.loc 1 116 0
 187 0000 0029     		cmp	r1, #0
 188 0002 25DD     		ble	.L19
 115:Src/LCD/TextConverter_LCD.c ****     if (digits<=0)
 189              		.loc 1 115 0
 190 0004 D0B5     		push	{r4, r6, r7, lr}
 191              	.LCFI2:
 192              		.cfi_def_cfa_offset 16
 193              		.cfi_offset 4, -16
 194              		.cfi_offset 6, -12
 195              		.cfi_offset 7, -8
 196              		.cfi_offset 14, -4
 197 0006 0446     		mov	r4, r0
 117:Src/LCD/TextConverter_LCD.c ****         return 0;
 118:Src/LCD/TextConverter_LCD.c ****     return abs((int)round(pow(10.0, digits)*(number-(int)number)));
 198              		.loc 1 118 0
 199 0008 0846     		mov	r0, r1
 200              	.LVL19:
 201 000a FFF7FEFF 		bl	__aeabi_i2d
 202              	.LVL20:
 203 000e 0246     		mov	r2, r0
 204 0010 0B46     		mov	r3, r1
 205 0012 0020     		movs	r0, #0
 206 0014 0F49     		ldr	r1, .L24
 207 0016 FFF7FEFF 		bl	pow
 208              	.LVL21:
 209 001a 0646     		mov	r6, r0
 210 001c 0F46     		mov	r7, r1
 211 001e 2046     		mov	r0, r4
 212 0020 FFF7FEFF 		bl	__aeabi_f2iz
 213              	.LVL22:
 214 0024 FFF7FEFF 		bl	__aeabi_i2f
 215              	.LVL23:
 216 0028 0146     		mov	r1, r0
 217 002a 2046     		mov	r0, r4
 218 002c FFF7FEFF 		bl	__aeabi_fsub
 219              	.LVL24:
 220 0030 FFF7FEFF 		bl	__aeabi_f2d
 221              	.LVL25:
 222 0034 0246     		mov	r2, r0
 223 0036 0B46     		mov	r3, r1
 224 0038 3046     		mov	r0, r6
 225 003a 3946     		mov	r1, r7
 226 003c FFF7FEFF 		bl	__aeabi_dmul
 227              	.LVL26:
ARM GAS  /tmp/cc7lMHVS.s 			page 7


 228 0040 FFF7FEFF 		bl	round
 229              	.LVL27:
 230 0044 FFF7FEFF 		bl	__aeabi_d2iz
 231              	.LVL28:
 232 0048 0028     		cmp	r0, #0
 233 004a B8BF     		it	lt
 234 004c 4042     		rsblt	r0, r0, #0
 119:Src/LCD/TextConverter_LCD.c **** }
 235              		.loc 1 119 0
 236 004e D0BD     		pop	{r4, r6, r7, pc}
 237              	.LVL29:
 238              	.L19:
 239              	.LCFI3:
 240              		.cfi_def_cfa_offset 0
 241              		.cfi_restore 4
 242              		.cfi_restore 6
 243              		.cfi_restore 7
 244              		.cfi_restore 14
 117:Src/LCD/TextConverter_LCD.c ****         return 0;
 245              		.loc 1 117 0
 246 0050 0020     		movs	r0, #0
 247              	.LVL30:
 248              		.loc 1 119 0
 249 0052 7047     		bx	lr
 250              	.L25:
 251              		.align	2
 252              	.L24:
 253 0054 00002440 		.word	1076101120
 254              		.cfi_endproc
 255              	.LFE15:
 257              		.section	.text.create_TextConverter_LCD,"ax",%progbits
 258              		.align	1
 259              		.global	create_TextConverter_LCD
 260              		.syntax unified
 261              		.thumb
 262              		.thumb_func
 263              		.fpu softvfp
 265              	create_TextConverter_LCD:
 266              	.LFB5:
  31:Src/LCD/TextConverter_LCD.c ****     int line;
 267              		.loc 1 31 0
 268              		.cfi_startproc
 269              		@ args = 0, pretend = 0, frame = 0
 270              		@ frame_needed = 0, uses_anonymous_args = 0
 271 0000 10B5     		push	{r4, lr}
 272              	.LCFI4:
 273              		.cfi_def_cfa_offset 8
 274              		.cfi_offset 4, -8
 275              		.cfi_offset 14, -4
 276              	.LVL31:
  33:Src/LCD/TextConverter_LCD.c ****         wmemcpy(toPrint_LCD[lineNumber(line)], EMPTY_STRING, LINELENGTH_TEXTCONVERTER_LCD);
 277              		.loc 1 33 0
 278 0002 0124     		movs	r4, #1
 279 0004 0CE0     		b	.L27
 280              	.LVL32:
 281              	.L28:
  34:Src/LCD/TextConverter_LCD.c ****     create_LCD();
ARM GAS  /tmp/cc7lMHVS.s 			page 8


 282              		.loc 1 34 0 discriminator 3
 283 0006 2046     		mov	r0, r4
 284 0008 FFF7FEFF 		bl	lineNumber
 285              	.LVL33:
 286 000c 00EB8000 		add	r0, r0, r0, lsl #2
 287 0010 0301     		lsls	r3, r0, #4
 288 0012 1422     		movs	r2, #20
 289 0014 0549     		ldr	r1, .L30
 290 0016 0648     		ldr	r0, .L30+4
 291 0018 1844     		add	r0, r0, r3
 292 001a FFF7FEFF 		bl	wmemcpy
 293              	.LVL34:
  33:Src/LCD/TextConverter_LCD.c ****         wmemcpy(toPrint_LCD[lineNumber(line)], EMPTY_STRING, LINELENGTH_TEXTCONVERTER_LCD);
 294              		.loc 1 33 0 discriminator 3
 295 001e 0134     		adds	r4, r4, #1
 296              	.LVL35:
 297              	.L27:
  33:Src/LCD/TextConverter_LCD.c ****         wmemcpy(toPrint_LCD[lineNumber(line)], EMPTY_STRING, LINELENGTH_TEXTCONVERTER_LCD);
 298              		.loc 1 33 0 is_stmt 0 discriminator 1
 299 0020 042C     		cmp	r4, #4
 300 0022 F0DD     		ble	.L28
  35:Src/LCD/TextConverter_LCD.c **** }
 301              		.loc 1 35 0 is_stmt 1
 302 0024 FFF7FEFF 		bl	create_LCD
 303              	.LVL36:
  36:Src/LCD/TextConverter_LCD.c **** 
 304              		.loc 1 36 0
 305 0028 10BD     		pop	{r4, pc}
 306              	.LVL37:
 307              	.L31:
 308 002a 00BF     		.align	2
 309              	.L30:
 310 002c 00000000 		.word	.LANCHOR1
 311 0030 00000000 		.word	.LANCHOR0
 312              		.cfi_endproc
 313              	.LFE5:
 315              		.section	.text.getLine_TextConverter_LCD,"ax",%progbits
 316              		.align	1
 317              		.global	getLine_TextConverter_LCD
 318              		.syntax unified
 319              		.thumb
 320              		.thumb_func
 321              		.fpu softvfp
 323              	getLine_TextConverter_LCD:
 324              	.LFB6:
  39:Src/LCD/TextConverter_LCD.c ****     if (wrongLine(line))
 325              		.loc 1 39 0
 326              		.cfi_startproc
 327              		@ args = 0, pretend = 0, frame = 0
 328              		@ frame_needed = 0, uses_anonymous_args = 0
 329              	.LVL38:
 330 0000 10B5     		push	{r4, lr}
 331              	.LCFI5:
 332              		.cfi_def_cfa_offset 8
 333              		.cfi_offset 4, -8
 334              		.cfi_offset 14, -4
 335 0002 0446     		mov	r4, r0
ARM GAS  /tmp/cc7lMHVS.s 			page 9


  40:Src/LCD/TextConverter_LCD.c ****         return L"";
 336              		.loc 1 40 0
 337 0004 FFF7FEFF 		bl	wrongLine
 338              	.LVL39:
 339 0008 40B9     		cbnz	r0, .L34
  42:Src/LCD/TextConverter_LCD.c **** }
 340              		.loc 1 42 0
 341 000a 2046     		mov	r0, r4
 342 000c FFF7FEFF 		bl	lineNumber
 343              	.LVL40:
 344 0010 00EB8000 		add	r0, r0, r0, lsl #2
 345 0014 0301     		lsls	r3, r0, #4
 346 0016 0248     		ldr	r0, .L36
 347 0018 1844     		add	r0, r0, r3
 348              	.L32:
  43:Src/LCD/TextConverter_LCD.c **** 
 349              		.loc 1 43 0
 350 001a 10BD     		pop	{r4, pc}
 351              	.LVL41:
 352              	.L34:
  41:Src/LCD/TextConverter_LCD.c ****     return toPrint_LCD[lineNumber(line)];
 353              		.loc 1 41 0
 354 001c 0148     		ldr	r0, .L36+4
 355 001e FCE7     		b	.L32
 356              	.L37:
 357              		.align	2
 358              	.L36:
 359 0020 00000000 		.word	.LANCHOR0
 360 0024 00000000 		.word	.LC0
 361              		.cfi_endproc
 362              	.LFE6:
 364              		.section	.text.putLine_TextConverter_LCD,"ax",%progbits
 365              		.align	1
 366              		.global	putLine_TextConverter_LCD
 367              		.syntax unified
 368              		.thumb
 369              		.thumb_func
 370              		.fpu softvfp
 372              	putLine_TextConverter_LCD:
 373              	.LFB7:
  46:Src/LCD/TextConverter_LCD.c ****     if (wrongLine(line))
 374              		.loc 1 46 0
 375              		.cfi_startproc
 376              		@ args = 0, pretend = 0, frame = 0
 377              		@ frame_needed = 0, uses_anonymous_args = 0
 378              	.LVL42:
 379 0000 70B5     		push	{r4, r5, r6, lr}
 380              	.LCFI6:
 381              		.cfi_def_cfa_offset 16
 382              		.cfi_offset 4, -16
 383              		.cfi_offset 5, -12
 384              		.cfi_offset 6, -8
 385              		.cfi_offset 14, -4
 386 0002 0646     		mov	r6, r0
 387 0004 0C46     		mov	r4, r1
  47:Src/LCD/TextConverter_LCD.c ****         return;
 388              		.loc 1 47 0
ARM GAS  /tmp/cc7lMHVS.s 			page 10


 389 0006 0846     		mov	r0, r1
 390              	.LVL43:
 391 0008 FFF7FEFF 		bl	wrongLine
 392              	.LVL44:
 393 000c 00B1     		cbz	r0, .L42
 394              	.LVL45:
 395              	.L38:
  55:Src/LCD/TextConverter_LCD.c **** 
 396              		.loc 1 55 0
 397 000e 70BD     		pop	{r4, r5, r6, pc}
 398              	.LVL46:
 399              	.L42:
  49:Src/LCD/TextConverter_LCD.c ****     int textLength = wcslen(text);
 400              		.loc 1 49 0
 401 0010 2046     		mov	r0, r4
 402 0012 FFF7FEFF 		bl	lineNumber
 403              	.LVL47:
 404 0016 0446     		mov	r4, r0
 405              	.LVL48:
 406 0018 114B     		ldr	r3, .L44
 407 001a 4FF4CA75 		mov	r5, #404
 408 001e 05FB0035 		mla	r5, r5, r0, r3
 409 0022 3146     		mov	r1, r6
 410 0024 2846     		mov	r0, r5
 411 0026 FFF7FEFF 		bl	wcscpy
 412              	.LVL49:
  50:Src/LCD/TextConverter_LCD.c **** 
 413              		.loc 1 50 0
 414 002a 3046     		mov	r0, r6
 415 002c FFF7FEFF 		bl	wcslen
 416              	.LVL50:
  52:Src/LCD/TextConverter_LCD.c ****         swprintf(&text_LCD[lineNumber(line)][textLength], LINELENGTH_TEXTCONVERTER_LCD-textLength+1
 417              		.loc 1 52 0
 418 0030 1328     		cmp	r0, #19
 419 0032 09DD     		ble	.L43
 420              	.LVL51:
 421              	.L40:
  54:Src/LCD/TextConverter_LCD.c **** }
 422              		.loc 1 54 0
 423 0034 04EB8404 		add	r4, r4, r4, lsl #2
 424 0038 2301     		lsls	r3, r4, #4
 425 003a 1422     		movs	r2, #20
 426 003c 2946     		mov	r1, r5
 427 003e 0948     		ldr	r0, .L44+4
 428 0040 1844     		add	r0, r0, r3
 429 0042 FFF7FEFF 		bl	wmemcpy
 430              	.LVL52:
 431 0046 E2E7     		b	.L38
 432              	.LVL53:
 433              	.L43:
  53:Src/LCD/TextConverter_LCD.c ****     wmemcpy(toPrint_LCD[lineNumber(line)], text_LCD[lineNumber(line)], LINELENGTH_TEXTCONVERTER_LCD
 434              		.loc 1 53 0
 435 0048 6523     		movs	r3, #101
 436 004a 03FB0403 		mla	r3, r3, r4, r0
 437 004e 064A     		ldr	r2, .L44+8
 438 0050 C0F11501 		rsb	r1, r0, #21
 439 0054 0248     		ldr	r0, .L44
ARM GAS  /tmp/cc7lMHVS.s 			page 11


 440              	.LVL54:
 441 0056 00EB8300 		add	r0, r0, r3, lsl #2
 442 005a FFF7FEFF 		bl	swprintf
 443              	.LVL55:
 444 005e E9E7     		b	.L40
 445              	.L45:
 446              		.align	2
 447              	.L44:
 448 0060 00000000 		.word	.LANCHOR2
 449 0064 00000000 		.word	.LANCHOR0
 450 0068 00000000 		.word	.LANCHOR1
 451              		.cfi_endproc
 452              	.LFE7:
 454              		.section	.text.updateLine_TextConverter_LCD,"ax",%progbits
 455              		.align	1
 456              		.global	updateLine_TextConverter_LCD
 457              		.syntax unified
 458              		.thumb
 459              		.thumb_func
 460              		.fpu softvfp
 462              	updateLine_TextConverter_LCD:
 463              	.LFB8:
  58:Src/LCD/TextConverter_LCD.c ****     if (wrongLine(line))
 464              		.loc 1 58 0
 465              		.cfi_startproc
 466              		@ args = 0, pretend = 0, frame = 0
 467              		@ frame_needed = 0, uses_anonymous_args = 0
 468              	.LVL56:
 469 0000 10B5     		push	{r4, lr}
 470              	.LCFI7:
 471              		.cfi_def_cfa_offset 8
 472              		.cfi_offset 4, -8
 473              		.cfi_offset 14, -4
 474 0002 0446     		mov	r4, r0
  59:Src/LCD/TextConverter_LCD.c ****         return;
 475              		.loc 1 59 0
 476 0004 FFF7FEFF 		bl	wrongLine
 477              	.LVL57:
 478 0008 00B1     		cbz	r0, .L49
 479              	.L46:
  62:Src/LCD/TextConverter_LCD.c **** 
 480              		.loc 1 62 0
 481 000a 10BD     		pop	{r4, pc}
 482              	.LVL58:
 483              	.L49:
  61:Src/LCD/TextConverter_LCD.c **** }
 484              		.loc 1 61 0
 485 000c 2046     		mov	r0, r4
 486 000e FFF7FEFF 		bl	lineNumber
 487              	.LVL59:
 488 0012 00EB8000 		add	r0, r0, r0, lsl #2
 489 0016 0301     		lsls	r3, r0, #4
 490 0018 0249     		ldr	r1, .L50
 491 001a 1944     		add	r1, r1, r3
 492 001c 2046     		mov	r0, r4
 493 001e FFF7FEFF 		bl	printLine_LCD
 494              	.LVL60:
ARM GAS  /tmp/cc7lMHVS.s 			page 12


 495 0022 F2E7     		b	.L46
 496              	.L51:
 497              		.align	2
 498              	.L50:
 499 0024 00000000 		.word	.LANCHOR0
 500              		.cfi_endproc
 501              	.LFE8:
 503              		.section	.text.clearLine_TextConverter_LCD,"ax",%progbits
 504              		.align	1
 505              		.global	clearLine_TextConverter_LCD
 506              		.syntax unified
 507              		.thumb
 508              		.thumb_func
 509              		.fpu softvfp
 511              	clearLine_TextConverter_LCD:
 512              	.LFB9:
  66:Src/LCD/TextConverter_LCD.c ****     if (wrongLine(line))
 513              		.loc 1 66 0
 514              		.cfi_startproc
 515              		@ args = 0, pretend = 0, frame = 0
 516              		@ frame_needed = 0, uses_anonymous_args = 0
 517              	.LVL61:
 518 0000 10B5     		push	{r4, lr}
 519              	.LCFI8:
 520              		.cfi_def_cfa_offset 8
 521              		.cfi_offset 4, -8
 522              		.cfi_offset 14, -4
 523 0002 0446     		mov	r4, r0
  67:Src/LCD/TextConverter_LCD.c ****         return;
 524              		.loc 1 67 0
 525 0004 FFF7FEFF 		bl	wrongLine
 526              	.LVL62:
 527 0008 00B1     		cbz	r0, .L55
 528              	.L52:
  70:Src/LCD/TextConverter_LCD.c **** 
 529              		.loc 1 70 0
 530 000a 10BD     		pop	{r4, pc}
 531              	.LVL63:
 532              	.L55:
  69:Src/LCD/TextConverter_LCD.c **** }
 533              		.loc 1 69 0
 534 000c 2146     		mov	r1, r4
 535 000e 0248     		ldr	r0, .L56
 536 0010 FFF7FEFF 		bl	putLine_TextConverter_LCD
 537              	.LVL64:
 538 0014 F9E7     		b	.L52
 539              	.L57:
 540 0016 00BF     		.align	2
 541              	.L56:
 542 0018 00000000 		.word	.LC0
 543              		.cfi_endproc
 544              	.LFE9:
 546              		.section	.text.shiftLine_TextConverter_LCD,"ax",%progbits
 547              		.align	1
 548              		.global	shiftLine_TextConverter_LCD
 549              		.syntax unified
 550              		.thumb
ARM GAS  /tmp/cc7lMHVS.s 			page 13


 551              		.thumb_func
 552              		.fpu softvfp
 554              	shiftLine_TextConverter_LCD:
 555              	.LFB11:
  78:Src/LCD/TextConverter_LCD.c ****     if(wrongLine(line))
 556              		.loc 1 78 0
 557              		.cfi_startproc
 558              		@ args = 0, pretend = 0, frame = 88
 559              		@ frame_needed = 0, uses_anonymous_args = 0
 560              	.LVL65:
 561 0000 70B5     		push	{r4, r5, r6, lr}
 562              	.LCFI9:
 563              		.cfi_def_cfa_offset 16
 564              		.cfi_offset 4, -16
 565              		.cfi_offset 5, -12
 566              		.cfi_offset 6, -8
 567              		.cfi_offset 14, -4
 568 0002 96B0     		sub	sp, sp, #88
 569              	.LCFI10:
 570              		.cfi_def_cfa_offset 104
 571 0004 0446     		mov	r4, r0
  79:Src/LCD/TextConverter_LCD.c ****         return;
 572              		.loc 1 79 0
 573 0006 FFF7FEFF 		bl	wrongLine
 574              	.LVL66:
 575 000a 60B9     		cbnz	r0, .L58
  81:Src/LCD/TextConverter_LCD.c ****         return;
 576              		.loc 1 81 0
 577 000c 2046     		mov	r0, r4
 578 000e FFF7FEFF 		bl	lineNumber
 579              	.LVL67:
 580 0012 0546     		mov	r5, r0
 581 0014 174B     		ldr	r3, .L66
 582 0016 4FF4CA74 		mov	r4, #404
 583              	.LVL68:
 584 001a 04FB0034 		mla	r4, r4, r0, r3
 585 001e 2046     		mov	r0, r4
 586 0020 FFF7FEFF 		bl	lineEnds
 587              	.LVL69:
 588 0024 08B1     		cbz	r0, .L64
 589              	.L58:
  93:Src/LCD/TextConverter_LCD.c **** 
 590              		.loc 1 93 0
 591 0026 16B0     		add	sp, sp, #88
 592              	.LCFI11:
 593              		.cfi_remember_state
 594              		.cfi_def_cfa_offset 16
 595              		@ sp needed
 596 0028 70BD     		pop	{r4, r5, r6, pc}
 597              	.L64:
 598              	.LCFI12:
 599              		.cfi_restore_state
  85:Src/LCD/TextConverter_LCD.c ****     strToFind[LINELENGTH_TEXTCONVERTER_LCD] = '\0';
 600              		.loc 1 85 0
 601 002a 05EB8505 		add	r5, r5, r5, lsl #2
 602 002e 2B01     		lsls	r3, r5, #4
 603 0030 114D     		ldr	r5, .L66+4
ARM GAS  /tmp/cc7lMHVS.s 			page 14


 604 0032 1D44     		add	r5, r5, r3
 605 0034 1422     		movs	r2, #20
 606 0036 2946     		mov	r1, r5
 607 0038 01A8     		add	r0, sp, #4
 608 003a FFF7FEFF 		bl	wmemcpy
 609              	.LVL70:
  86:Src/LCD/TextConverter_LCD.c **** 
 610              		.loc 1 86 0
 611 003e 0023     		movs	r3, #0
 612 0040 1593     		str	r3, [sp, #84]
  88:Src/LCD/TextConverter_LCD.c ****     if (lineEnds(pToFirstLetter))
 613              		.loc 1 88 0
 614 0042 01A9     		add	r1, sp, #4
 615 0044 2046     		mov	r0, r4
 616 0046 FFF7FEFF 		bl	wcsstr
 617              	.LVL71:
 618 004a 0646     		mov	r6, r0
 619              	.LVL72:
  89:Src/LCD/TextConverter_LCD.c ****         wmemcpy(toPrint_LCD[lineNumber(line)], text_LCD[lineNumber(line)], LINELENGTH_TEXTCONVERTER
 620              		.loc 1 89 0
 621 004c FFF7FEFF 		bl	lineEnds
 622              	.LVL73:
 623 0050 50B9     		cbnz	r0, .L65
 624              	.L60:
  91:Src/LCD/TextConverter_LCD.c ****         wmemcpy(toPrint_LCD[lineNumber(line)], &pToFirstLetter[1], LINELENGTH_TEXTCONVERTER_LCD);
 625              		.loc 1 91 0
 626 0052 3046     		mov	r0, r6
 627 0054 FFF7FEFF 		bl	lineEnds
 628              	.LVL74:
 629 0058 0028     		cmp	r0, #0
 630 005a E4D1     		bne	.L58
  92:Src/LCD/TextConverter_LCD.c **** }
 631              		.loc 1 92 0
 632 005c 1422     		movs	r2, #20
 633 005e 311D     		adds	r1, r6, #4
 634 0060 2846     		mov	r0, r5
 635 0062 FFF7FEFF 		bl	wmemcpy
 636              	.LVL75:
 637 0066 DEE7     		b	.L58
 638              	.L65:
  90:Src/LCD/TextConverter_LCD.c ****     if (!lineEnds(pToFirstLetter))
 639              		.loc 1 90 0
 640 0068 1422     		movs	r2, #20
 641 006a 2146     		mov	r1, r4
 642 006c 2846     		mov	r0, r5
 643 006e FFF7FEFF 		bl	wmemcpy
 644              	.LVL76:
 645 0072 EEE7     		b	.L60
 646              	.L67:
 647              		.align	2
 648              	.L66:
 649 0074 00000000 		.word	.LANCHOR2
 650 0078 00000000 		.word	.LANCHOR0
 651              		.cfi_endproc
 652              	.LFE11:
 654              		.section	.text.homeLine_TextConverter_LCD,"ax",%progbits
 655              		.align	1
ARM GAS  /tmp/cc7lMHVS.s 			page 15


 656              		.global	homeLine_TextConverter_LCD
 657              		.syntax unified
 658              		.thumb
 659              		.thumb_func
 660              		.fpu softvfp
 662              	homeLine_TextConverter_LCD:
 663              	.LFB12:
  96:Src/LCD/TextConverter_LCD.c ****     wmemcpy(toPrint_LCD[lineNumber(line)], text_LCD[lineNumber(line)], LINELENGTH_TEXTCONVERTER_LCD
 664              		.loc 1 96 0
 665              		.cfi_startproc
 666              		@ args = 0, pretend = 0, frame = 0
 667              		@ frame_needed = 0, uses_anonymous_args = 0
 668              	.LVL77:
 669 0000 10B5     		push	{r4, lr}
 670              	.LCFI13:
 671              		.cfi_def_cfa_offset 8
 672              		.cfi_offset 4, -8
 673              		.cfi_offset 14, -4
  97:Src/LCD/TextConverter_LCD.c **** }
 674              		.loc 1 97 0
 675 0002 FFF7FEFF 		bl	lineNumber
 676              	.LVL78:
 677 0006 00EB8002 		add	r2, r0, r0, lsl #2
 678 000a 1301     		lsls	r3, r2, #4
 679 000c 1422     		movs	r2, #20
 680 000e 0549     		ldr	r1, .L70
 681 0010 4FF4CA74 		mov	r4, #404
 682 0014 04FB0011 		mla	r1, r4, r0, r1
 683 0018 0348     		ldr	r0, .L70+4
 684 001a 1844     		add	r0, r0, r3
 685 001c FFF7FEFF 		bl	wmemcpy
 686              	.LVL79:
  98:Src/LCD/TextConverter_LCD.c **** 
 687              		.loc 1 98 0
 688 0020 10BD     		pop	{r4, pc}
 689              	.L71:
 690 0022 00BF     		.align	2
 691              	.L70:
 692 0024 00000000 		.word	.LANCHOR2
 693 0028 00000000 		.word	.LANCHOR0
 694              		.cfi_endproc
 695              	.LFE12:
 697              		.section	.text.addIntNumberToString,"ax",%progbits
 698              		.align	1
 699              		.global	addIntNumberToString
 700              		.syntax unified
 701              		.thumb
 702              		.thumb_func
 703              		.fpu softvfp
 705              	addIntNumberToString:
 706              	.LFB13:
 101:Src/LCD/TextConverter_LCD.c ****     swprintf(&string[wcslen(string)], MAXTEXTLENGTH-wcslen(string), L"%d", number);
 707              		.loc 1 101 0
 708              		.cfi_startproc
 709              		@ args = 0, pretend = 0, frame = 0
 710              		@ frame_needed = 0, uses_anonymous_args = 0
 711              	.LVL80:
ARM GAS  /tmp/cc7lMHVS.s 			page 16


 712 0000 70B5     		push	{r4, r5, r6, lr}
 713              	.LCFI14:
 714              		.cfi_def_cfa_offset 16
 715              		.cfi_offset 4, -16
 716              		.cfi_offset 5, -12
 717              		.cfi_offset 6, -8
 718              		.cfi_offset 14, -4
 719 0002 0446     		mov	r4, r0
 720 0004 0E46     		mov	r6, r1
 102:Src/LCD/TextConverter_LCD.c **** }
 721              		.loc 1 102 0
 722 0006 FFF7FEFF 		bl	wcslen
 723              	.LVL81:
 724 000a 04EB8005 		add	r5, r4, r0, lsl #2
 725 000e 2046     		mov	r0, r4
 726 0010 FFF7FEFF 		bl	wcslen
 727              	.LVL82:
 728 0014 3346     		mov	r3, r6
 729 0016 034A     		ldr	r2, .L74
 730 0018 C0F16401 		rsb	r1, r0, #100
 731 001c 2846     		mov	r0, r5
 732 001e FFF7FEFF 		bl	swprintf
 733              	.LVL83:
 103:Src/LCD/TextConverter_LCD.c **** 
 734              		.loc 1 103 0
 735 0022 70BD     		pop	{r4, r5, r6, pc}
 736              	.LVL84:
 737              	.L75:
 738              		.align	2
 739              	.L74:
 740 0024 00000000 		.word	.LC1
 741              		.cfi_endproc
 742              	.LFE13:
 744              		.global	__aeabi_fcmplt
 745              		.global	__aeabi_fcmpge
 746              		.section	.text.addFloatNumberToString,"ax",%progbits
 747              		.align	1
 748              		.global	addFloatNumberToString
 749              		.syntax unified
 750              		.thumb
 751              		.thumb_func
 752              		.fpu softvfp
 754              	addFloatNumberToString:
 755              	.LFB16:
 120:Src/LCD/TextConverter_LCD.c **** 
 121:Src/LCD/TextConverter_LCD.c **** void addFloatNumberToString(wchar_t* string, float number, int digits)
 122:Src/LCD/TextConverter_LCD.c **** {
 756              		.loc 1 122 0
 757              		.cfi_startproc
 758              		@ args = 0, pretend = 0, frame = 0
 759              		@ frame_needed = 0, uses_anonymous_args = 0
 760              	.LVL85:
 761 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 762              	.LCFI15:
 763              		.cfi_def_cfa_offset 28
 764              		.cfi_offset 4, -28
 765              		.cfi_offset 5, -24
ARM GAS  /tmp/cc7lMHVS.s 			page 17


 766              		.cfi_offset 6, -20
 767              		.cfi_offset 7, -16
 768              		.cfi_offset 8, -12
 769              		.cfi_offset 9, -8
 770              		.cfi_offset 14, -4
 771 0004 83B0     		sub	sp, sp, #12
 772              	.LCFI16:
 773              		.cfi_def_cfa_offset 40
 774 0006 0546     		mov	r5, r0
 775 0008 0C46     		mov	r4, r1
 776 000a 1646     		mov	r6, r2
 123:Src/LCD/TextConverter_LCD.c ****     if (number < 0)
 777              		.loc 1 123 0
 778 000c 0021     		movs	r1, #0
 779              	.LVL86:
 780 000e 2046     		mov	r0, r4
 781              	.LVL87:
 782 0010 FFF7FEFF 		bl	__aeabi_fcmplt
 783              	.LVL88:
 784 0014 08BB     		cbnz	r0, .L84
 785              	.L77:
 124:Src/LCD/TextConverter_LCD.c ****         swprintf(&string[wcslen(string)], MAXTEXTLENGTH-wcslen(string), L"-%d.%d", digitsBeforeDot(
 125:Src/LCD/TextConverter_LCD.c ****     if (number >= 0)
 786              		.loc 1 125 0
 787 0016 0021     		movs	r1, #0
 788 0018 2046     		mov	r0, r4
 789 001a FFF7FEFF 		bl	__aeabi_fcmpge
 790              	.LVL89:
 791 001e C8B1     		cbz	r0, .L76
 126:Src/LCD/TextConverter_LCD.c ****         swprintf(&string[wcslen(string)], MAXTEXTLENGTH-wcslen(string), L"%d.%d", digitsBeforeDot(n
 792              		.loc 1 126 0
 793 0020 2846     		mov	r0, r5
 794 0022 FFF7FEFF 		bl	wcslen
 795              	.LVL90:
 796 0026 05EB8007 		add	r7, r5, r0, lsl #2
 797 002a 2846     		mov	r0, r5
 798 002c FFF7FEFF 		bl	wcslen
 799              	.LVL91:
 800 0030 0546     		mov	r5, r0
 801              	.LVL92:
 802 0032 3146     		mov	r1, r6
 803 0034 2046     		mov	r0, r4
 804 0036 FFF7FEFF 		bl	digitsBeforeDot
 805              	.LVL93:
 806 003a 8046     		mov	r8, r0
 807 003c 3146     		mov	r1, r6
 808 003e 2046     		mov	r0, r4
 809 0040 FFF7FEFF 		bl	digitsAfterDot
 810              	.LVL94:
 811 0044 0090     		str	r0, [sp]
 812 0046 4346     		mov	r3, r8
 813 0048 114A     		ldr	r2, .L85
 814 004a C5F16401 		rsb	r1, r5, #100
 815 004e 3846     		mov	r0, r7
 816 0050 FFF7FEFF 		bl	swprintf
 817              	.LVL95:
 818              	.L76:
ARM GAS  /tmp/cc7lMHVS.s 			page 18


 127:Src/LCD/TextConverter_LCD.c **** }
 819              		.loc 1 127 0
 820 0054 03B0     		add	sp, sp, #12
 821              	.LCFI17:
 822              		.cfi_remember_state
 823              		.cfi_def_cfa_offset 28
 824              		@ sp needed
 825 0056 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 826              	.LVL96:
 827              	.L84:
 828              	.LCFI18:
 829              		.cfi_restore_state
 124:Src/LCD/TextConverter_LCD.c ****         swprintf(&string[wcslen(string)], MAXTEXTLENGTH-wcslen(string), L"-%d.%d", digitsBeforeDot(
 830              		.loc 1 124 0
 831 005a 2846     		mov	r0, r5
 832 005c FFF7FEFF 		bl	wcslen
 833              	.LVL97:
 834 0060 05EB8007 		add	r7, r5, r0, lsl #2
 835 0064 2846     		mov	r0, r5
 836 0066 FFF7FEFF 		bl	wcslen
 837              	.LVL98:
 838 006a 8046     		mov	r8, r0
 839 006c 3146     		mov	r1, r6
 840 006e 2046     		mov	r0, r4
 841 0070 FFF7FEFF 		bl	digitsBeforeDot
 842              	.LVL99:
 843 0074 8146     		mov	r9, r0
 844 0076 3146     		mov	r1, r6
 845 0078 2046     		mov	r0, r4
 846 007a FFF7FEFF 		bl	digitsAfterDot
 847              	.LVL100:
 848 007e 0090     		str	r0, [sp]
 849 0080 4B46     		mov	r3, r9
 850 0082 044A     		ldr	r2, .L85+4
 851 0084 C8F16401 		rsb	r1, r8, #100
 852 0088 3846     		mov	r0, r7
 853 008a FFF7FEFF 		bl	swprintf
 854              	.LVL101:
 855 008e C2E7     		b	.L77
 856              	.L86:
 857              		.align	2
 858              	.L85:
 859 0090 1C000000 		.word	.LC3
 860 0094 00000000 		.word	.LC2
 861              		.cfi_endproc
 862              	.LFE16:
 864              		.global	EMPTY_STRING
 865              		.section	.bss.text_LCD,"aw",%nobits
 866              		.align	2
 867              		.set	.LANCHOR2,. + 0
 870              	text_LCD:
 871 0000 00000000 		.space	1616
 871      00000000 
 871      00000000 
 871      00000000 
 871      00000000 
 872              		.section	.bss.toPrint_LCD,"aw",%nobits
ARM GAS  /tmp/cc7lMHVS.s 			page 19


 873              		.align	2
 874              		.set	.LANCHOR0,. + 0
 877              	toPrint_LCD:
 878 0000 00000000 		.space	320
 878      00000000 
 878      00000000 
 878      00000000 
 878      00000000 
 879              		.section	.rodata.EMPTY_STRING,"a",%progbits
 880              		.align	2
 881              		.set	.LANCHOR1,. + 0
 884              	EMPTY_STRING:
 885 0000 20000000 		.ascii	" \000\000\000 \000\000\000 \000\000\000 \000\000\000"
 885      20000000 
 885      20000000 
 885      20000000 
 886 0010 20000000 		.ascii	" \000\000\000 \000\000\000 \000\000\000 \000\000\000"
 886      20000000 
 886      20000000 
 886      20000000 
 887 0020 20000000 		.ascii	" \000\000\000 \000\000\000 \000\000\000 \000\000\000"
 887      20000000 
 887      20000000 
 887      20000000 
 888 0030 20000000 		.ascii	" \000\000\000 \000\000\000 \000\000\000 \000\000\000"
 888      20000000 
 888      20000000 
 888      20000000 
 889 0040 20000000 		.ascii	" \000\000\000 \000\000\000 \000\000\000 \000\000\000"
 889      20000000 
 889      20000000 
 889      20000000 
 890 0050 00000000 		.ascii	"\000\000\000\000"
 891              		.section	.rodata.addFloatNumberToString.str4.4,"aMS",%progbits,4
 892              		.align	2
 893              	.LC2:
 894 0000 2D000000 		.ascii	"-\000\000\000%\000\000\000d\000\000\000.\000\000\000"
 894      25000000 
 894      64000000 
 894      2E000000 
 895 0010 25000000 		.ascii	"%\000\000\000d\000\000\000\000\000\000\000"
 895      64000000 
 895      00000000 
 896              	.LC3:
 897 001c 25000000 		.ascii	"%\000\000\000d\000\000\000.\000\000\000%\000\000\000"
 897      64000000 
 897      2E000000 
 897      25000000 
 898 002c 64000000 		.ascii	"d\000\000\000\000\000\000\000"
 898      00000000 
 899              		.section	.rodata.addIntNumberToString.str4.4,"aMS",%progbits,4
 900              		.align	2
 901              	.LC1:
 902 0000 25000000 		.ascii	"%\000\000\000d\000\000\000\000\000\000\000"
 902      64000000 
 902      00000000 
 903              		.section	.rodata.getLine_TextConverter_LCD.str4.4,"aMS",%progbits,4
ARM GAS  /tmp/cc7lMHVS.s 			page 20


 904              		.align	2
 905              	.LC0:
 906 0000 00000000 		.ascii	"\000\000\000\000"
 907              		.text
 908              	.Letext0:
 909              		.file 2 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 910              		.file 3 "/usr/arm-none-eabi/include/sys/lock.h"
 911              		.file 4 "/usr/arm-none-eabi/include/sys/_types.h"
 912              		.file 5 "/usr/arm-none-eabi/include/sys/reent.h"
 913              		.file 6 "Inc/LCD/TextConverter_LCD.h"
 914              		.file 7 "/usr/arm-none-eabi/include/math.h"
 915              		.file 8 "/usr/arm-none-eabi/include/stdlib.h"
 916              		.file 9 "/usr/arm-none-eabi/include/wchar.h"
 917              		.file 10 "Inc/LCD/Interface_LCD.h"
ARM GAS  /tmp/cc7lMHVS.s 			page 21


DEFINED SYMBOLS
                            *ABS*:0000000000000000 TextConverter_LCD.c
     /tmp/cc7lMHVS.s:16     .text.lineNumber:0000000000000000 $t
     /tmp/cc7lMHVS.s:22     .text.lineNumber:0000000000000000 lineNumber
     /tmp/cc7lMHVS.s:39     .text.wrongLine:0000000000000000 $t
     /tmp/cc7lMHVS.s:45     .text.wrongLine:0000000000000000 wrongLine
     /tmp/cc7lMHVS.s:80     .text.lineEnds:0000000000000000 $t
     /tmp/cc7lMHVS.s:86     .text.lineEnds:0000000000000000 lineEnds
     /tmp/cc7lMHVS.s:108    .text.digitsBeforeDot:0000000000000000 $t
     /tmp/cc7lMHVS.s:114    .text.digitsBeforeDot:0000000000000000 digitsBeforeDot
     /tmp/cc7lMHVS.s:173    .text.digitsAfterDot:0000000000000000 $t
     /tmp/cc7lMHVS.s:179    .text.digitsAfterDot:0000000000000000 digitsAfterDot
     /tmp/cc7lMHVS.s:253    .text.digitsAfterDot:0000000000000054 $d
     /tmp/cc7lMHVS.s:258    .text.create_TextConverter_LCD:0000000000000000 $t
     /tmp/cc7lMHVS.s:265    .text.create_TextConverter_LCD:0000000000000000 create_TextConverter_LCD
     /tmp/cc7lMHVS.s:310    .text.create_TextConverter_LCD:000000000000002c $d
     /tmp/cc7lMHVS.s:316    .text.getLine_TextConverter_LCD:0000000000000000 $t
     /tmp/cc7lMHVS.s:323    .text.getLine_TextConverter_LCD:0000000000000000 getLine_TextConverter_LCD
     /tmp/cc7lMHVS.s:359    .text.getLine_TextConverter_LCD:0000000000000020 $d
     /tmp/cc7lMHVS.s:365    .text.putLine_TextConverter_LCD:0000000000000000 $t
     /tmp/cc7lMHVS.s:372    .text.putLine_TextConverter_LCD:0000000000000000 putLine_TextConverter_LCD
     /tmp/cc7lMHVS.s:448    .text.putLine_TextConverter_LCD:0000000000000060 $d
     /tmp/cc7lMHVS.s:455    .text.updateLine_TextConverter_LCD:0000000000000000 $t
     /tmp/cc7lMHVS.s:462    .text.updateLine_TextConverter_LCD:0000000000000000 updateLine_TextConverter_LCD
     /tmp/cc7lMHVS.s:499    .text.updateLine_TextConverter_LCD:0000000000000024 $d
     /tmp/cc7lMHVS.s:504    .text.clearLine_TextConverter_LCD:0000000000000000 $t
     /tmp/cc7lMHVS.s:511    .text.clearLine_TextConverter_LCD:0000000000000000 clearLine_TextConverter_LCD
     /tmp/cc7lMHVS.s:542    .text.clearLine_TextConverter_LCD:0000000000000018 $d
     /tmp/cc7lMHVS.s:547    .text.shiftLine_TextConverter_LCD:0000000000000000 $t
     /tmp/cc7lMHVS.s:554    .text.shiftLine_TextConverter_LCD:0000000000000000 shiftLine_TextConverter_LCD
     /tmp/cc7lMHVS.s:649    .text.shiftLine_TextConverter_LCD:0000000000000074 $d
     /tmp/cc7lMHVS.s:655    .text.homeLine_TextConverter_LCD:0000000000000000 $t
     /tmp/cc7lMHVS.s:662    .text.homeLine_TextConverter_LCD:0000000000000000 homeLine_TextConverter_LCD
     /tmp/cc7lMHVS.s:692    .text.homeLine_TextConverter_LCD:0000000000000024 $d
     /tmp/cc7lMHVS.s:698    .text.addIntNumberToString:0000000000000000 $t
     /tmp/cc7lMHVS.s:705    .text.addIntNumberToString:0000000000000000 addIntNumberToString
     /tmp/cc7lMHVS.s:740    .text.addIntNumberToString:0000000000000024 $d
     /tmp/cc7lMHVS.s:747    .text.addFloatNumberToString:0000000000000000 $t
     /tmp/cc7lMHVS.s:754    .text.addFloatNumberToString:0000000000000000 addFloatNumberToString
     /tmp/cc7lMHVS.s:859    .text.addFloatNumberToString:0000000000000090 $d
     /tmp/cc7lMHVS.s:884    .rodata.EMPTY_STRING:0000000000000000 EMPTY_STRING
     /tmp/cc7lMHVS.s:866    .bss.text_LCD:0000000000000000 $d
     /tmp/cc7lMHVS.s:870    .bss.text_LCD:0000000000000000 text_LCD
     /tmp/cc7lMHVS.s:873    .bss.toPrint_LCD:0000000000000000 $d
     /tmp/cc7lMHVS.s:877    .bss.toPrint_LCD:0000000000000000 toPrint_LCD
     /tmp/cc7lMHVS.s:880    .rodata.EMPTY_STRING:0000000000000000 $d
     /tmp/cc7lMHVS.s:892    .rodata.addFloatNumberToString.str4.4:0000000000000000 $d
     /tmp/cc7lMHVS.s:900    .rodata.addIntNumberToString.str4.4:0000000000000000 $d
     /tmp/cc7lMHVS.s:904    .rodata.getLine_TextConverter_LCD.str4.4:0000000000000000 $d

UNDEFINED SYMBOLS
__aeabi_f2d
__aeabi_d2iz
__aeabi_f2iz
round
__aeabi_i2d
__aeabi_i2f
ARM GAS  /tmp/cc7lMHVS.s 			page 22


__aeabi_fsub
__aeabi_dmul
pow
wmemcpy
create_LCD
wcscpy
wcslen
swprintf
printLine_LCD
wcsstr
__aeabi_fcmplt
__aeabi_fcmpge
