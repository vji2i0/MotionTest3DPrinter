ARM GAS  /tmp/ccE4hmGq.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"Driver_Motors.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.create_Motors,"ax",%progbits
  16              		.align	1
  17              		.global	create_Motors
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	create_Motors:
  24              	.LFB0:
  25              		.file 1 "Src/Motors/Driver_Motors.c"
   1:Src/Motors/Driver_Motors.c **** #include "Driver_Motors.h"
   2:Src/Motors/Driver_Motors.c **** 
   3:Src/Motors/Driver_Motors.c **** #include "GPIO_Motors.h"
   4:Src/Motors/Driver_Motors.c **** 
   5:Src/Motors/Driver_Motors.c **** static int motorXstate, motorYstate, motorZstate, motorEstate;
   6:Src/Motors/Driver_Motors.c **** 
   7:Src/Motors/Driver_Motors.c **** 
   8:Src/Motors/Driver_Motors.c **** void create_Motors(void)
   9:Src/Motors/Driver_Motors.c **** {
  26              		.loc 1 9 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  10:Src/Motors/Driver_Motors.c ****     motorXstate = IDLE_MOTORS;
  31              		.loc 1 10 0
  32 0000 0023     		movs	r3, #0
  33 0002 044A     		ldr	r2, .L2
  34 0004 1360     		str	r3, [r2]
  11:Src/Motors/Driver_Motors.c ****     motorYstate = IDLE_MOTORS;
  35              		.loc 1 11 0
  36 0006 044A     		ldr	r2, .L2+4
  37 0008 1360     		str	r3, [r2]
  12:Src/Motors/Driver_Motors.c ****     motorZstate = IDLE_MOTORS;
  38              		.loc 1 12 0
  39 000a 044A     		ldr	r2, .L2+8
  40 000c 1360     		str	r3, [r2]
  13:Src/Motors/Driver_Motors.c ****     motorEstate = IDLE_MOTORS;
  41              		.loc 1 13 0
  42 000e 044A     		ldr	r2, .L2+12
  43 0010 1360     		str	r3, [r2]
  14:Src/Motors/Driver_Motors.c **** }
  44              		.loc 1 14 0
ARM GAS  /tmp/ccE4hmGq.s 			page 2


  45 0012 7047     		bx	lr
  46              	.L3:
  47              		.align	2
  48              	.L2:
  49 0014 00000000 		.word	.LANCHOR0
  50 0018 00000000 		.word	.LANCHOR1
  51 001c 00000000 		.word	.LANCHOR2
  52 0020 00000000 		.word	.LANCHOR3
  53              		.cfi_endproc
  54              	.LFE0:
  56              		.section	.text.enable_Motors,"ax",%progbits
  57              		.align	1
  58              		.global	enable_Motors
  59              		.syntax unified
  60              		.thumb
  61              		.thumb_func
  62              		.fpu softvfp
  64              	enable_Motors:
  65              	.LFB1:
  15:Src/Motors/Driver_Motors.c **** 
  16:Src/Motors/Driver_Motors.c **** void enable_Motors(void)
  17:Src/Motors/Driver_Motors.c **** {
  66              		.loc 1 17 0
  67              		.cfi_startproc
  68              		@ args = 0, pretend = 0, frame = 0
  69              		@ frame_needed = 0, uses_anonymous_args = 0
  70 0000 08B5     		push	{r3, lr}
  71              	.LCFI0:
  72              		.cfi_def_cfa_offset 8
  73              		.cfi_offset 3, -8
  74              		.cfi_offset 14, -4
  18:Src/Motors/Driver_Motors.c ****     EnableX_Motors();
  75              		.loc 1 18 0
  76 0002 FFF7FEFF 		bl	EnableX_Motors
  77              	.LVL0:
  19:Src/Motors/Driver_Motors.c ****     EnableY_Motors();
  78              		.loc 1 19 0
  79 0006 FFF7FEFF 		bl	EnableY_Motors
  80              	.LVL1:
  20:Src/Motors/Driver_Motors.c ****     EnableZ_Motors();
  81              		.loc 1 20 0
  82 000a FFF7FEFF 		bl	EnableZ_Motors
  83              	.LVL2:
  21:Src/Motors/Driver_Motors.c ****     EnableE_Motors();
  84              		.loc 1 21 0
  85 000e FFF7FEFF 		bl	EnableE_Motors
  86              	.LVL3:
  22:Src/Motors/Driver_Motors.c **** }
  87              		.loc 1 22 0
  88 0012 08BD     		pop	{r3, pc}
  89              		.cfi_endproc
  90              	.LFE1:
  92              		.section	.text.disable_Motors,"ax",%progbits
  93              		.align	1
  94              		.global	disable_Motors
  95              		.syntax unified
  96              		.thumb
ARM GAS  /tmp/ccE4hmGq.s 			page 3


  97              		.thumb_func
  98              		.fpu softvfp
 100              	disable_Motors:
 101              	.LFB2:
  23:Src/Motors/Driver_Motors.c **** 
  24:Src/Motors/Driver_Motors.c **** void disable_Motors(void)
  25:Src/Motors/Driver_Motors.c **** {
 102              		.loc 1 25 0
 103              		.cfi_startproc
 104              		@ args = 0, pretend = 0, frame = 0
 105              		@ frame_needed = 0, uses_anonymous_args = 0
 106 0000 08B5     		push	{r3, lr}
 107              	.LCFI1:
 108              		.cfi_def_cfa_offset 8
 109              		.cfi_offset 3, -8
 110              		.cfi_offset 14, -4
  26:Src/Motors/Driver_Motors.c ****     DisableX_Motors();
 111              		.loc 1 26 0
 112 0002 FFF7FEFF 		bl	DisableX_Motors
 113              	.LVL4:
  27:Src/Motors/Driver_Motors.c ****     DisableY_Motors();
 114              		.loc 1 27 0
 115 0006 FFF7FEFF 		bl	DisableY_Motors
 116              	.LVL5:
  28:Src/Motors/Driver_Motors.c ****     DisableZ_Motors();
 117              		.loc 1 28 0
 118 000a FFF7FEFF 		bl	DisableZ_Motors
 119              	.LVL6:
  29:Src/Motors/Driver_Motors.c ****     DisableE_Motors();
 120              		.loc 1 29 0
 121 000e FFF7FEFF 		bl	DisableE_Motors
 122              	.LVL7:
  30:Src/Motors/Driver_Motors.c **** }
 123              		.loc 1 30 0
 124 0012 08BD     		pop	{r3, pc}
 125              		.cfi_endproc
 126              	.LFE2:
 128              		.section	.text.doStepX_Motors,"ax",%progbits
 129              		.align	1
 130              		.global	doStepX_Motors
 131              		.syntax unified
 132              		.thumb
 133              		.thumb_func
 134              		.fpu softvfp
 136              	doStepX_Motors:
 137              	.LFB3:
  31:Src/Motors/Driver_Motors.c **** 
  32:Src/Motors/Driver_Motors.c **** void doStepX_Motors(long direction)
  33:Src/Motors/Driver_Motors.c **** {
 138              		.loc 1 33 0
 139              		.cfi_startproc
 140              		@ args = 0, pretend = 0, frame = 0
 141              		@ frame_needed = 0, uses_anonymous_args = 0
 142              		@ link register save eliminated.
 143              	.LVL8:
  34:Src/Motors/Driver_Motors.c ****     if (motorXstate != IDLE_MOTORS)   return;
 144              		.loc 1 34 0
ARM GAS  /tmp/ccE4hmGq.s 			page 4


 145 0000 084B     		ldr	r3, .L13
 146 0002 1B68     		ldr	r3, [r3]
 147 0004 23B9     		cbnz	r3, .L8
  35:Src/Motors/Driver_Motors.c ****     if (direction == 1)  { motorXstate = FOREWARD_MOTORS; return; }
 148              		.loc 1 35 0
 149 0006 0128     		cmp	r0, #1
 150 0008 03D0     		beq	.L11
  36:Src/Motors/Driver_Motors.c ****     if (direction == -1) { motorXstate = BACKWARD_MOTORS; return; }
 151              		.loc 1 36 0
 152 000a B0F1FF3F 		cmp	r0, #-1
 153 000e 04D0     		beq	.L12
 154              	.L8:
  37:Src/Motors/Driver_Motors.c **** }
 155              		.loc 1 37 0
 156 0010 7047     		bx	lr
 157              	.L11:
  35:Src/Motors/Driver_Motors.c ****     if (direction == 1)  { motorXstate = FOREWARD_MOTORS; return; }
 158              		.loc 1 35 0 discriminator 1
 159 0012 044B     		ldr	r3, .L13
 160 0014 0122     		movs	r2, #1
 161 0016 1A60     		str	r2, [r3]
 162 0018 7047     		bx	lr
 163              	.L12:
  36:Src/Motors/Driver_Motors.c ****     if (direction == -1) { motorXstate = BACKWARD_MOTORS; return; }
 164              		.loc 1 36 0 discriminator 1
 165 001a 024B     		ldr	r3, .L13
 166 001c 0222     		movs	r2, #2
 167 001e 1A60     		str	r2, [r3]
 168 0020 F6E7     		b	.L8
 169              	.L14:
 170 0022 00BF     		.align	2
 171              	.L13:
 172 0024 00000000 		.word	.LANCHOR0
 173              		.cfi_endproc
 174              	.LFE3:
 176              		.section	.text.doStepY_Motors,"ax",%progbits
 177              		.align	1
 178              		.global	doStepY_Motors
 179              		.syntax unified
 180              		.thumb
 181              		.thumb_func
 182              		.fpu softvfp
 184              	doStepY_Motors:
 185              	.LFB4:
  38:Src/Motors/Driver_Motors.c **** 
  39:Src/Motors/Driver_Motors.c **** void doStepY_Motors(long direction)
  40:Src/Motors/Driver_Motors.c **** {
 186              		.loc 1 40 0
 187              		.cfi_startproc
 188              		@ args = 0, pretend = 0, frame = 0
 189              		@ frame_needed = 0, uses_anonymous_args = 0
 190              		@ link register save eliminated.
 191              	.LVL9:
  41:Src/Motors/Driver_Motors.c ****     if (motorYstate != IDLE_MOTORS)   return;
 192              		.loc 1 41 0
 193 0000 084B     		ldr	r3, .L20
 194 0002 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccE4hmGq.s 			page 5


 195 0004 23B9     		cbnz	r3, .L15
  42:Src/Motors/Driver_Motors.c ****     if (direction == 1)  { motorYstate = FOREWARD_MOTORS; return; }
 196              		.loc 1 42 0
 197 0006 0128     		cmp	r0, #1
 198 0008 03D0     		beq	.L18
  43:Src/Motors/Driver_Motors.c ****     if (direction == -1) { motorYstate = BACKWARD_MOTORS; return; }
 199              		.loc 1 43 0
 200 000a B0F1FF3F 		cmp	r0, #-1
 201 000e 04D0     		beq	.L19
 202              	.L15:
  44:Src/Motors/Driver_Motors.c **** }
 203              		.loc 1 44 0
 204 0010 7047     		bx	lr
 205              	.L18:
  42:Src/Motors/Driver_Motors.c ****     if (direction == 1)  { motorYstate = FOREWARD_MOTORS; return; }
 206              		.loc 1 42 0 discriminator 1
 207 0012 044B     		ldr	r3, .L20
 208 0014 0122     		movs	r2, #1
 209 0016 1A60     		str	r2, [r3]
 210 0018 7047     		bx	lr
 211              	.L19:
  43:Src/Motors/Driver_Motors.c ****     if (direction == -1) { motorYstate = BACKWARD_MOTORS; return; }
 212              		.loc 1 43 0 discriminator 1
 213 001a 024B     		ldr	r3, .L20
 214 001c 0222     		movs	r2, #2
 215 001e 1A60     		str	r2, [r3]
 216 0020 F6E7     		b	.L15
 217              	.L21:
 218 0022 00BF     		.align	2
 219              	.L20:
 220 0024 00000000 		.word	.LANCHOR1
 221              		.cfi_endproc
 222              	.LFE4:
 224              		.section	.text.doStepZ_Motors,"ax",%progbits
 225              		.align	1
 226              		.global	doStepZ_Motors
 227              		.syntax unified
 228              		.thumb
 229              		.thumb_func
 230              		.fpu softvfp
 232              	doStepZ_Motors:
 233              	.LFB5:
  45:Src/Motors/Driver_Motors.c **** 
  46:Src/Motors/Driver_Motors.c **** void doStepZ_Motors(long direction)
  47:Src/Motors/Driver_Motors.c **** {
 234              		.loc 1 47 0
 235              		.cfi_startproc
 236              		@ args = 0, pretend = 0, frame = 0
 237              		@ frame_needed = 0, uses_anonymous_args = 0
 238              		@ link register save eliminated.
 239              	.LVL10:
  48:Src/Motors/Driver_Motors.c ****     if (motorZstate != IDLE_MOTORS)   return;
 240              		.loc 1 48 0
 241 0000 084B     		ldr	r3, .L27
 242 0002 1B68     		ldr	r3, [r3]
 243 0004 23B9     		cbnz	r3, .L22
  49:Src/Motors/Driver_Motors.c ****     if (direction == 1)  { motorZstate = FOREWARD_MOTORS; return; }
ARM GAS  /tmp/ccE4hmGq.s 			page 6


 244              		.loc 1 49 0
 245 0006 0128     		cmp	r0, #1
 246 0008 03D0     		beq	.L25
  50:Src/Motors/Driver_Motors.c ****     if (direction == -1) { motorZstate = BACKWARD_MOTORS; return; }
 247              		.loc 1 50 0
 248 000a B0F1FF3F 		cmp	r0, #-1
 249 000e 04D0     		beq	.L26
 250              	.L22:
  51:Src/Motors/Driver_Motors.c **** }
 251              		.loc 1 51 0
 252 0010 7047     		bx	lr
 253              	.L25:
  49:Src/Motors/Driver_Motors.c ****     if (direction == 1)  { motorZstate = FOREWARD_MOTORS; return; }
 254              		.loc 1 49 0 discriminator 1
 255 0012 044B     		ldr	r3, .L27
 256 0014 0122     		movs	r2, #1
 257 0016 1A60     		str	r2, [r3]
 258 0018 7047     		bx	lr
 259              	.L26:
  50:Src/Motors/Driver_Motors.c ****     if (direction == -1) { motorZstate = BACKWARD_MOTORS; return; }
 260              		.loc 1 50 0 discriminator 1
 261 001a 024B     		ldr	r3, .L27
 262 001c 0222     		movs	r2, #2
 263 001e 1A60     		str	r2, [r3]
 264 0020 F6E7     		b	.L22
 265              	.L28:
 266 0022 00BF     		.align	2
 267              	.L27:
 268 0024 00000000 		.word	.LANCHOR2
 269              		.cfi_endproc
 270              	.LFE5:
 272              		.section	.text.doStepE_Motors,"ax",%progbits
 273              		.align	1
 274              		.global	doStepE_Motors
 275              		.syntax unified
 276              		.thumb
 277              		.thumb_func
 278              		.fpu softvfp
 280              	doStepE_Motors:
 281              	.LFB6:
  52:Src/Motors/Driver_Motors.c **** 
  53:Src/Motors/Driver_Motors.c **** void doStepE_Motors(long direction)
  54:Src/Motors/Driver_Motors.c **** {
 282              		.loc 1 54 0
 283              		.cfi_startproc
 284              		@ args = 0, pretend = 0, frame = 0
 285              		@ frame_needed = 0, uses_anonymous_args = 0
 286              		@ link register save eliminated.
 287              	.LVL11:
  55:Src/Motors/Driver_Motors.c ****     if (motorEstate != IDLE_MOTORS)   return;
 288              		.loc 1 55 0
 289 0000 084B     		ldr	r3, .L34
 290 0002 1B68     		ldr	r3, [r3]
 291 0004 23B9     		cbnz	r3, .L29
  56:Src/Motors/Driver_Motors.c ****     if (direction == 1)  { motorEstate = FOREWARD_MOTORS; return; }
 292              		.loc 1 56 0
 293 0006 0128     		cmp	r0, #1
ARM GAS  /tmp/ccE4hmGq.s 			page 7


 294 0008 03D0     		beq	.L32
  57:Src/Motors/Driver_Motors.c ****     if (direction == -1) { motorEstate = BACKWARD_MOTORS; return; }
 295              		.loc 1 57 0
 296 000a B0F1FF3F 		cmp	r0, #-1
 297 000e 04D0     		beq	.L33
 298              	.L29:
  58:Src/Motors/Driver_Motors.c **** }
 299              		.loc 1 58 0
 300 0010 7047     		bx	lr
 301              	.L32:
  56:Src/Motors/Driver_Motors.c ****     if (direction == 1)  { motorEstate = FOREWARD_MOTORS; return; }
 302              		.loc 1 56 0 discriminator 1
 303 0012 044B     		ldr	r3, .L34
 304 0014 0122     		movs	r2, #1
 305 0016 1A60     		str	r2, [r3]
 306 0018 7047     		bx	lr
 307              	.L33:
  57:Src/Motors/Driver_Motors.c ****     if (direction == -1) { motorEstate = BACKWARD_MOTORS; return; }
 308              		.loc 1 57 0 discriminator 1
 309 001a 024B     		ldr	r3, .L34
 310 001c 0222     		movs	r2, #2
 311 001e 1A60     		str	r2, [r3]
 312 0020 F6E7     		b	.L29
 313              	.L35:
 314 0022 00BF     		.align	2
 315              	.L34:
 316 0024 00000000 		.word	.LANCHOR3
 317              		.cfi_endproc
 318              	.LFE6:
 320              		.section	.text.evaluate_Motors,"ax",%progbits
 321              		.align	1
 322              		.global	evaluate_Motors
 323              		.syntax unified
 324              		.thumb
 325              		.thumb_func
 326              		.fpu softvfp
 328              	evaluate_Motors:
 329              	.LFB7:
  59:Src/Motors/Driver_Motors.c **** 
  60:Src/Motors/Driver_Motors.c **** void evaluate_Motors(void)
  61:Src/Motors/Driver_Motors.c **** {
 330              		.loc 1 61 0
 331              		.cfi_startproc
 332              		@ args = 0, pretend = 0, frame = 0
 333              		@ frame_needed = 0, uses_anonymous_args = 0
 334 0000 08B5     		push	{r3, lr}
 335              	.LCFI2:
 336              		.cfi_def_cfa_offset 8
 337              		.cfi_offset 3, -8
 338              		.cfi_offset 14, -4
  62:Src/Motors/Driver_Motors.c ****     switch(motorXstate)
 339              		.loc 1 62 0
 340 0002 364B     		ldr	r3, .L59
 341 0004 1B68     		ldr	r3, [r3]
 342 0006 013B     		subs	r3, r3, #1
 343 0008 032B     		cmp	r3, #3
 344 000a 23D8     		bhi	.L37
ARM GAS  /tmp/ccE4hmGq.s 			page 8


 345 000c DFE803F0 		tbb	[pc, r3]
 346              	.L39:
 347 0010 02       		.byte	(.L38-.L39)/2
 348 0011 10       		.byte	(.L40-.L39)/2
 349 0012 16       		.byte	(.L41-.L39)/2
 350 0013 1C       		.byte	(.L42-.L39)/2
 351              		.p2align 1
 352              	.L38:
  63:Src/Motors/Driver_Motors.c ****     {
  64:Src/Motors/Driver_Motors.c ****         case FOREWARD_MOTORS:   ForwardX_Motors();  motorXstate = STEPON_MOTORS;    break;
 353              		.loc 1 64 0
 354 0014 FFF7FEFF 		bl	ForwardX_Motors
 355              	.LVL12:
 356 0018 304B     		ldr	r3, .L59
 357 001a 0322     		movs	r2, #3
 358 001c 1A60     		str	r2, [r3]
 359              	.L43:
  65:Src/Motors/Driver_Motors.c ****         case BACKWARD_MOTORS:   BackwardX_Motors(); motorXstate = STEPON_MOTORS;    break;
  66:Src/Motors/Driver_Motors.c ****         case STEPON_MOTORS:     StepOnX_Motors();   motorXstate = STEPOFF_MOTORS;   break;
  67:Src/Motors/Driver_Motors.c ****         case STEPOFF_MOTORS:    StepOffX_Motors();  motorXstate = IDLE_MOTORS;      break;
  68:Src/Motors/Driver_Motors.c ****         default:                                    motorXstate = IDLE_MOTORS;      break;
  69:Src/Motors/Driver_Motors.c ****     }
  70:Src/Motors/Driver_Motors.c **** 
  71:Src/Motors/Driver_Motors.c ****     switch(motorYstate)
 360              		.loc 1 71 0
 361 001e 304B     		ldr	r3, .L59+4
 362 0020 1B68     		ldr	r3, [r3]
 363 0022 013B     		subs	r3, r3, #1
 364 0024 032B     		cmp	r3, #3
 365 0026 39D8     		bhi	.L44
 366 0028 DFE803F0 		tbb	[pc, r3]
 367              	.L46:
 368 002c 18       		.byte	(.L45-.L46)/2
 369 002d 26       		.byte	(.L47-.L46)/2
 370 002e 2C       		.byte	(.L48-.L46)/2
 371 002f 32       		.byte	(.L49-.L46)/2
 372              		.p2align 1
 373              	.L40:
  65:Src/Motors/Driver_Motors.c ****         case BACKWARD_MOTORS:   BackwardX_Motors(); motorXstate = STEPON_MOTORS;    break;
 374              		.loc 1 65 0
 375 0030 FFF7FEFF 		bl	BackwardX_Motors
 376              	.LVL13:
 377 0034 294B     		ldr	r3, .L59
 378 0036 0322     		movs	r2, #3
 379 0038 1A60     		str	r2, [r3]
 380 003a F0E7     		b	.L43
 381              	.L41:
  66:Src/Motors/Driver_Motors.c ****         case STEPOFF_MOTORS:    StepOffX_Motors();  motorXstate = IDLE_MOTORS;      break;
 382              		.loc 1 66 0
 383 003c FFF7FEFF 		bl	StepOnX_Motors
 384              	.LVL14:
 385 0040 264B     		ldr	r3, .L59
 386 0042 0422     		movs	r2, #4
 387 0044 1A60     		str	r2, [r3]
 388 0046 EAE7     		b	.L43
 389              	.L42:
  67:Src/Motors/Driver_Motors.c ****         default:                                    motorXstate = IDLE_MOTORS;      break;
ARM GAS  /tmp/ccE4hmGq.s 			page 9


 390              		.loc 1 67 0
 391 0048 FFF7FEFF 		bl	StepOffX_Motors
 392              	.LVL15:
 393 004c 234B     		ldr	r3, .L59
 394 004e 0022     		movs	r2, #0
 395 0050 1A60     		str	r2, [r3]
 396 0052 E4E7     		b	.L43
 397              	.L37:
  68:Src/Motors/Driver_Motors.c ****     }
 398              		.loc 1 68 0
 399 0054 214B     		ldr	r3, .L59
 400 0056 0022     		movs	r2, #0
 401 0058 1A60     		str	r2, [r3]
 402 005a E0E7     		b	.L43
 403              	.L45:
  72:Src/Motors/Driver_Motors.c ****     {
  73:Src/Motors/Driver_Motors.c ****         case FOREWARD_MOTORS:   ForwardY_Motors();  motorYstate = STEPON_MOTORS;    break;
 404              		.loc 1 73 0
 405 005c FFF7FEFF 		bl	ForwardY_Motors
 406              	.LVL16:
 407 0060 1F4B     		ldr	r3, .L59+4
 408 0062 0322     		movs	r2, #3
 409 0064 1A60     		str	r2, [r3]
 410              	.L50:
  74:Src/Motors/Driver_Motors.c ****         case BACKWARD_MOTORS:   BackwardY_Motors(); motorYstate = STEPON_MOTORS;    break;
  75:Src/Motors/Driver_Motors.c ****         case STEPON_MOTORS:     StepOnY_Motors();   motorYstate = STEPOFF_MOTORS;   break;
  76:Src/Motors/Driver_Motors.c ****         case STEPOFF_MOTORS:    StepOffY_Motors();  motorYstate = IDLE_MOTORS;      break;
  77:Src/Motors/Driver_Motors.c ****         default:                                    motorYstate = IDLE_MOTORS;      break;
  78:Src/Motors/Driver_Motors.c ****     }
  79:Src/Motors/Driver_Motors.c **** 
  80:Src/Motors/Driver_Motors.c ****     switch(motorZstate)
 411              		.loc 1 80 0
 412 0066 1F4B     		ldr	r3, .L59+8
 413 0068 1B68     		ldr	r3, [r3]
 414 006a 013B     		subs	r3, r3, #1
 415 006c 032B     		cmp	r3, #3
 416 006e 31D8     		bhi	.L51
 417 0070 DFE803F0 		tbb	[pc, r3]
 418              	.L53:
 419 0074 18       		.byte	(.L52-.L53)/2
 420 0075 1E       		.byte	(.L54-.L53)/2
 421 0076 24       		.byte	(.L55-.L53)/2
 422 0077 2A       		.byte	(.L56-.L53)/2
 423              		.p2align 1
 424              	.L47:
  74:Src/Motors/Driver_Motors.c ****         case BACKWARD_MOTORS:   BackwardY_Motors(); motorYstate = STEPON_MOTORS;    break;
 425              		.loc 1 74 0
 426 0078 FFF7FEFF 		bl	BackwardY_Motors
 427              	.LVL17:
 428 007c 184B     		ldr	r3, .L59+4
 429 007e 0322     		movs	r2, #3
 430 0080 1A60     		str	r2, [r3]
 431 0082 F0E7     		b	.L50
 432              	.L48:
  75:Src/Motors/Driver_Motors.c ****         case STEPOFF_MOTORS:    StepOffY_Motors();  motorYstate = IDLE_MOTORS;      break;
 433              		.loc 1 75 0
 434 0084 FFF7FEFF 		bl	StepOnY_Motors
ARM GAS  /tmp/ccE4hmGq.s 			page 10


 435              	.LVL18:
 436 0088 154B     		ldr	r3, .L59+4
 437 008a 0422     		movs	r2, #4
 438 008c 1A60     		str	r2, [r3]
 439 008e EAE7     		b	.L50
 440              	.L49:
  76:Src/Motors/Driver_Motors.c ****         default:                                    motorYstate = IDLE_MOTORS;      break;
 441              		.loc 1 76 0
 442 0090 FFF7FEFF 		bl	StepOffY_Motors
 443              	.LVL19:
 444 0094 124B     		ldr	r3, .L59+4
 445 0096 0022     		movs	r2, #0
 446 0098 1A60     		str	r2, [r3]
 447 009a E4E7     		b	.L50
 448              	.L44:
  77:Src/Motors/Driver_Motors.c ****     }
 449              		.loc 1 77 0
 450 009c 104B     		ldr	r3, .L59+4
 451 009e 0022     		movs	r2, #0
 452 00a0 1A60     		str	r2, [r3]
 453 00a2 E0E7     		b	.L50
 454              	.L52:
  81:Src/Motors/Driver_Motors.c ****     {
  82:Src/Motors/Driver_Motors.c ****         case FOREWARD_MOTORS:   ForwardZ_Motors();  motorZstate = STEPON_MOTORS;    break;
 455              		.loc 1 82 0
 456 00a4 FFF7FEFF 		bl	ForwardZ_Motors
 457              	.LVL20:
 458 00a8 0E4B     		ldr	r3, .L59+8
 459 00aa 0322     		movs	r2, #3
 460 00ac 1A60     		str	r2, [r3]
 461              	.L36:
  83:Src/Motors/Driver_Motors.c ****         case BACKWARD_MOTORS:   BackwardZ_Motors(); motorZstate = STEPON_MOTORS;    break;
  84:Src/Motors/Driver_Motors.c ****         case STEPON_MOTORS:     StepOnZ_Motors();   motorZstate = STEPOFF_MOTORS;   break;
  85:Src/Motors/Driver_Motors.c ****         case STEPOFF_MOTORS:    StepOffZ_Motors();  motorZstate = IDLE_MOTORS;      break;
  86:Src/Motors/Driver_Motors.c ****         default:                                    motorZstate = IDLE_MOTORS;      break;
  87:Src/Motors/Driver_Motors.c ****     }
  88:Src/Motors/Driver_Motors.c **** 
  89:Src/Motors/Driver_Motors.c **** }
 462              		.loc 1 89 0
 463 00ae 08BD     		pop	{r3, pc}
 464              	.L54:
  83:Src/Motors/Driver_Motors.c ****         case BACKWARD_MOTORS:   BackwardZ_Motors(); motorZstate = STEPON_MOTORS;    break;
 465              		.loc 1 83 0
 466 00b0 FFF7FEFF 		bl	BackwardZ_Motors
 467              	.LVL21:
 468 00b4 0B4B     		ldr	r3, .L59+8
 469 00b6 0322     		movs	r2, #3
 470 00b8 1A60     		str	r2, [r3]
 471 00ba F8E7     		b	.L36
 472              	.L55:
  84:Src/Motors/Driver_Motors.c ****         case STEPOFF_MOTORS:    StepOffZ_Motors();  motorZstate = IDLE_MOTORS;      break;
 473              		.loc 1 84 0
 474 00bc FFF7FEFF 		bl	StepOnZ_Motors
 475              	.LVL22:
 476 00c0 084B     		ldr	r3, .L59+8
 477 00c2 0422     		movs	r2, #4
 478 00c4 1A60     		str	r2, [r3]
ARM GAS  /tmp/ccE4hmGq.s 			page 11


 479 00c6 F2E7     		b	.L36
 480              	.L56:
  85:Src/Motors/Driver_Motors.c ****         default:                                    motorZstate = IDLE_MOTORS;      break;
 481              		.loc 1 85 0
 482 00c8 FFF7FEFF 		bl	StepOffZ_Motors
 483              	.LVL23:
 484 00cc 054B     		ldr	r3, .L59+8
 485 00ce 0022     		movs	r2, #0
 486 00d0 1A60     		str	r2, [r3]
 487 00d2 ECE7     		b	.L36
 488              	.L51:
  86:Src/Motors/Driver_Motors.c ****     }
 489              		.loc 1 86 0
 490 00d4 034B     		ldr	r3, .L59+8
 491 00d6 0022     		movs	r2, #0
 492 00d8 1A60     		str	r2, [r3]
 493              		.loc 1 89 0
 494 00da E8E7     		b	.L36
 495              	.L60:
 496              		.align	2
 497              	.L59:
 498 00dc 00000000 		.word	.LANCHOR0
 499 00e0 00000000 		.word	.LANCHOR1
 500 00e4 00000000 		.word	.LANCHOR2
 501              		.cfi_endproc
 502              	.LFE7:
 504              		.section	.bss.motorEstate,"aw",%nobits
 505              		.align	2
 506              		.set	.LANCHOR3,. + 0
 509              	motorEstate:
 510 0000 00000000 		.space	4
 511              		.section	.bss.motorXstate,"aw",%nobits
 512              		.align	2
 513              		.set	.LANCHOR0,. + 0
 516              	motorXstate:
 517 0000 00000000 		.space	4
 518              		.section	.bss.motorYstate,"aw",%nobits
 519              		.align	2
 520              		.set	.LANCHOR1,. + 0
 523              	motorYstate:
 524 0000 00000000 		.space	4
 525              		.section	.bss.motorZstate,"aw",%nobits
 526              		.align	2
 527              		.set	.LANCHOR2,. + 0
 530              	motorZstate:
 531 0000 00000000 		.space	4
 532              		.text
 533              	.Letext0:
 534              		.file 2 "Inc/Motors/GPIO_Motors.h"
 535              		.file 3 "Inc/Motors/Driver_Motors.h"
ARM GAS  /tmp/ccE4hmGq.s 			page 12


DEFINED SYMBOLS
                            *ABS*:0000000000000000 Driver_Motors.c
     /tmp/ccE4hmGq.s:16     .text.create_Motors:0000000000000000 $t
     /tmp/ccE4hmGq.s:23     .text.create_Motors:0000000000000000 create_Motors
     /tmp/ccE4hmGq.s:49     .text.create_Motors:0000000000000014 $d
     /tmp/ccE4hmGq.s:57     .text.enable_Motors:0000000000000000 $t
     /tmp/ccE4hmGq.s:64     .text.enable_Motors:0000000000000000 enable_Motors
     /tmp/ccE4hmGq.s:93     .text.disable_Motors:0000000000000000 $t
     /tmp/ccE4hmGq.s:100    .text.disable_Motors:0000000000000000 disable_Motors
     /tmp/ccE4hmGq.s:129    .text.doStepX_Motors:0000000000000000 $t
     /tmp/ccE4hmGq.s:136    .text.doStepX_Motors:0000000000000000 doStepX_Motors
     /tmp/ccE4hmGq.s:172    .text.doStepX_Motors:0000000000000024 $d
     /tmp/ccE4hmGq.s:177    .text.doStepY_Motors:0000000000000000 $t
     /tmp/ccE4hmGq.s:184    .text.doStepY_Motors:0000000000000000 doStepY_Motors
     /tmp/ccE4hmGq.s:220    .text.doStepY_Motors:0000000000000024 $d
     /tmp/ccE4hmGq.s:225    .text.doStepZ_Motors:0000000000000000 $t
     /tmp/ccE4hmGq.s:232    .text.doStepZ_Motors:0000000000000000 doStepZ_Motors
     /tmp/ccE4hmGq.s:268    .text.doStepZ_Motors:0000000000000024 $d
     /tmp/ccE4hmGq.s:273    .text.doStepE_Motors:0000000000000000 $t
     /tmp/ccE4hmGq.s:280    .text.doStepE_Motors:0000000000000000 doStepE_Motors
     /tmp/ccE4hmGq.s:316    .text.doStepE_Motors:0000000000000024 $d
     /tmp/ccE4hmGq.s:321    .text.evaluate_Motors:0000000000000000 $t
     /tmp/ccE4hmGq.s:328    .text.evaluate_Motors:0000000000000000 evaluate_Motors
     /tmp/ccE4hmGq.s:347    .text.evaluate_Motors:0000000000000010 $d
     /tmp/ccE4hmGq.s:351    .text.evaluate_Motors:0000000000000014 $t
     /tmp/ccE4hmGq.s:368    .text.evaluate_Motors:000000000000002c $d
     /tmp/ccE4hmGq.s:372    .text.evaluate_Motors:0000000000000030 $t
     /tmp/ccE4hmGq.s:419    .text.evaluate_Motors:0000000000000074 $d
     /tmp/ccE4hmGq.s:423    .text.evaluate_Motors:0000000000000078 $t
     /tmp/ccE4hmGq.s:498    .text.evaluate_Motors:00000000000000dc $d
     /tmp/ccE4hmGq.s:505    .bss.motorEstate:0000000000000000 $d
     /tmp/ccE4hmGq.s:509    .bss.motorEstate:0000000000000000 motorEstate
     /tmp/ccE4hmGq.s:512    .bss.motorXstate:0000000000000000 $d
     /tmp/ccE4hmGq.s:516    .bss.motorXstate:0000000000000000 motorXstate
     /tmp/ccE4hmGq.s:519    .bss.motorYstate:0000000000000000 $d
     /tmp/ccE4hmGq.s:523    .bss.motorYstate:0000000000000000 motorYstate
     /tmp/ccE4hmGq.s:526    .bss.motorZstate:0000000000000000 $d
     /tmp/ccE4hmGq.s:530    .bss.motorZstate:0000000000000000 motorZstate

UNDEFINED SYMBOLS
EnableX_Motors
EnableY_Motors
EnableZ_Motors
EnableE_Motors
DisableX_Motors
DisableY_Motors
DisableZ_Motors
DisableE_Motors
ForwardX_Motors
BackwardX_Motors
StepOnX_Motors
StepOffX_Motors
ForwardY_Motors
BackwardY_Motors
StepOnY_Motors
StepOffY_Motors
ForwardZ_Motors
ARM GAS  /tmp/ccE4hmGq.s 			page 13


BackwardZ_Motors
StepOnZ_Motors
StepOffZ_Motors
