ARM GAS  /tmp/ccK5hqVC.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f1xx_it.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.NMI_Handler,"ax",%progbits
  16              		.align	1
  17              		.global	NMI_Handler
  18              		.arch armv7-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu softvfp
  24              	NMI_Handler:
  25              	.LFB65:
  26              		.file 1 "Src/stm32f1xx_it.c"
   1:Src/stm32f1xx_it.c **** /* USER CODE BEGIN Header */
   2:Src/stm32f1xx_it.c **** /**
   3:Src/stm32f1xx_it.c ****   ******************************************************************************
   4:Src/stm32f1xx_it.c ****   * @file    stm32f1xx_it.c
   5:Src/stm32f1xx_it.c ****   * @brief   Interrupt Service Routines.
   6:Src/stm32f1xx_it.c ****   ******************************************************************************
   7:Src/stm32f1xx_it.c ****   * @attention
   8:Src/stm32f1xx_it.c ****   *
   9:Src/stm32f1xx_it.c ****   * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  10:Src/stm32f1xx_it.c ****   * All rights reserved.</center></h2>
  11:Src/stm32f1xx_it.c ****   *
  12:Src/stm32f1xx_it.c ****   * This software component is licensed by ST under Ultimate Liberty license
  13:Src/stm32f1xx_it.c ****   * SLA0044, the "License"; You may not use this file except in compliance with
  14:Src/stm32f1xx_it.c ****   * the License. You may obtain a copy of the License at:
  15:Src/stm32f1xx_it.c ****   *                             www.st.com/SLA0044
  16:Src/stm32f1xx_it.c ****   *
  17:Src/stm32f1xx_it.c ****   ******************************************************************************
  18:Src/stm32f1xx_it.c ****   */
  19:Src/stm32f1xx_it.c **** /* USER CODE END Header */
  20:Src/stm32f1xx_it.c **** 
  21:Src/stm32f1xx_it.c **** /* Includes ------------------------------------------------------------------*/
  22:Src/stm32f1xx_it.c **** #include "main.h"
  23:Src/stm32f1xx_it.c **** #include "stm32f1xx_it.h"
  24:Src/stm32f1xx_it.c **** /* Private includes ----------------------------------------------------------*/
  25:Src/stm32f1xx_it.c **** /* USER CODE BEGIN Includes */
  26:Src/stm32f1xx_it.c **** #include "Buffer_Gcode.h"
  27:Src/stm32f1xx_it.c **** #include "VirtualPrinters_Gcode.h"
  28:Src/stm32f1xx_it.c **** #include "Driver_Motors.h"
  29:Src/stm32f1xx_it.c **** 
  30:Src/stm32f1xx_it.c **** #include "usart.h"
  31:Src/stm32f1xx_it.c **** #include "gpio.h"
  32:Src/stm32f1xx_it.c **** 
ARM GAS  /tmp/ccK5hqVC.s 			page 2


  33:Src/stm32f1xx_it.c **** #include "stdbool.h"
  34:Src/stm32f1xx_it.c **** 
  35:Src/stm32f1xx_it.c **** #include "coordinates.h"
  36:Src/stm32f1xx_it.c **** /* USER CODE END Includes */
  37:Src/stm32f1xx_it.c **** 
  38:Src/stm32f1xx_it.c **** /* Private typedef -----------------------------------------------------------*/
  39:Src/stm32f1xx_it.c **** /* USER CODE BEGIN TD */
  40:Src/stm32f1xx_it.c **** 
  41:Src/stm32f1xx_it.c **** /* USER CODE END TD */
  42:Src/stm32f1xx_it.c **** 
  43:Src/stm32f1xx_it.c **** /* Private define ------------------------------------------------------------*/
  44:Src/stm32f1xx_it.c **** /* USER CODE BEGIN PD */
  45:Src/stm32f1xx_it.c **** 
  46:Src/stm32f1xx_it.c **** /* USER CODE END PD */
  47:Src/stm32f1xx_it.c **** 
  48:Src/stm32f1xx_it.c **** /* Private macro -------------------------------------------------------------*/
  49:Src/stm32f1xx_it.c **** /* USER CODE BEGIN PM */
  50:Src/stm32f1xx_it.c **** 
  51:Src/stm32f1xx_it.c **** /* USER CODE END PM */
  52:Src/stm32f1xx_it.c **** 
  53:Src/stm32f1xx_it.c **** /* Private variables ---------------------------------------------------------*/
  54:Src/stm32f1xx_it.c **** /* USER CODE BEGIN PV */
  55:Src/stm32f1xx_it.c **** 
  56:Src/stm32f1xx_it.c **** /* USER CODE END PV */
  57:Src/stm32f1xx_it.c **** 
  58:Src/stm32f1xx_it.c **** /* Private function prototypes -----------------------------------------------*/
  59:Src/stm32f1xx_it.c **** /* USER CODE BEGIN PFP */
  60:Src/stm32f1xx_it.c **** 
  61:Src/stm32f1xx_it.c **** /* USER CODE END PFP */
  62:Src/stm32f1xx_it.c **** 
  63:Src/stm32f1xx_it.c **** /* Private user code ---------------------------------------------------------*/
  64:Src/stm32f1xx_it.c **** /* USER CODE BEGIN 0 */
  65:Src/stm32f1xx_it.c **** 
  66:Src/stm32f1xx_it.c **** /* USER CODE END 0 */
  67:Src/stm32f1xx_it.c **** 
  68:Src/stm32f1xx_it.c **** /* External variables --------------------------------------------------------*/
  69:Src/stm32f1xx_it.c **** extern HCD_HandleTypeDef hhcd_USB_OTG_FS;
  70:Src/stm32f1xx_it.c **** extern TIM_HandleTypeDef htim2;
  71:Src/stm32f1xx_it.c **** extern TIM_HandleTypeDef htim3;
  72:Src/stm32f1xx_it.c **** extern TIM_HandleTypeDef htim4;
  73:Src/stm32f1xx_it.c **** extern TIM_HandleTypeDef htim5;
  74:Src/stm32f1xx_it.c **** /* USER CODE BEGIN EV */
  75:Src/stm32f1xx_it.c **** 
  76:Src/stm32f1xx_it.c **** /* USER CODE END EV */
  77:Src/stm32f1xx_it.c **** 
  78:Src/stm32f1xx_it.c **** /******************************************************************************/
  79:Src/stm32f1xx_it.c **** /*           Cortex-M3 Processor Interruption and Exception Handlers          */
  80:Src/stm32f1xx_it.c **** /******************************************************************************/
  81:Src/stm32f1xx_it.c **** /**
  82:Src/stm32f1xx_it.c ****   * @brief This function handles Non maskable interrupt.
  83:Src/stm32f1xx_it.c ****   */
  84:Src/stm32f1xx_it.c **** void NMI_Handler(void)
  85:Src/stm32f1xx_it.c **** {
  27              		.loc 1 85 1 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccK5hqVC.s 			page 3


  31              		@ link register save eliminated.
  86:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  87:Src/stm32f1xx_it.c **** 
  88:Src/stm32f1xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  89:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  90:Src/stm32f1xx_it.c **** 
  91:Src/stm32f1xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  92:Src/stm32f1xx_it.c **** }
  32              		.loc 1 92 1 view .LVU1
  33 0000 7047     		bx	lr
  34              		.cfi_endproc
  35              	.LFE65:
  37              		.section	.text.HardFault_Handler,"ax",%progbits
  38              		.align	1
  39              		.global	HardFault_Handler
  40              		.syntax unified
  41              		.thumb
  42              		.thumb_func
  43              		.fpu softvfp
  45              	HardFault_Handler:
  46              	.LFB66:
  93:Src/stm32f1xx_it.c **** 
  94:Src/stm32f1xx_it.c **** /**
  95:Src/stm32f1xx_it.c ****   * @brief This function handles Hard fault interrupt.
  96:Src/stm32f1xx_it.c ****   */
  97:Src/stm32f1xx_it.c **** void HardFault_Handler(void)
  98:Src/stm32f1xx_it.c **** {
  47              		.loc 1 98 1 view -0
  48              		.cfi_startproc
  49              		@ Volatile: function does not return.
  50              		@ args = 0, pretend = 0, frame = 0
  51              		@ frame_needed = 0, uses_anonymous_args = 0
  52              		@ link register save eliminated.
  53              	.L3:
  99:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
 100:Src/stm32f1xx_it.c **** 
 101:Src/stm32f1xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
 102:Src/stm32f1xx_it.c ****   while (1)
  54              		.loc 1 102 3 discriminator 1 view .LVU3
 103:Src/stm32f1xx_it.c ****   {
 104:Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
 105:Src/stm32f1xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
 106:Src/stm32f1xx_it.c ****   }
  55              		.loc 1 106 3 discriminator 1 view .LVU4
 102:Src/stm32f1xx_it.c ****   {
  56              		.loc 1 102 9 discriminator 1 view .LVU5
  57 0000 FEE7     		b	.L3
  58              		.cfi_endproc
  59              	.LFE66:
  61              		.section	.text.MemManage_Handler,"ax",%progbits
  62              		.align	1
  63              		.global	MemManage_Handler
  64              		.syntax unified
  65              		.thumb
  66              		.thumb_func
  67              		.fpu softvfp
  69              	MemManage_Handler:
ARM GAS  /tmp/ccK5hqVC.s 			page 4


  70              	.LFB67:
 107:Src/stm32f1xx_it.c **** }
 108:Src/stm32f1xx_it.c **** 
 109:Src/stm32f1xx_it.c **** /**
 110:Src/stm32f1xx_it.c ****   * @brief This function handles Memory management fault.
 111:Src/stm32f1xx_it.c ****   */
 112:Src/stm32f1xx_it.c **** void MemManage_Handler(void)
 113:Src/stm32f1xx_it.c **** {
  71              		.loc 1 113 1 view -0
  72              		.cfi_startproc
  73              		@ Volatile: function does not return.
  74              		@ args = 0, pretend = 0, frame = 0
  75              		@ frame_needed = 0, uses_anonymous_args = 0
  76              		@ link register save eliminated.
  77              	.L5:
 114:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
 115:Src/stm32f1xx_it.c **** 
 116:Src/stm32f1xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
 117:Src/stm32f1xx_it.c ****   while (1)
  78              		.loc 1 117 3 discriminator 1 view .LVU7
 118:Src/stm32f1xx_it.c ****   {
 119:Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
 120:Src/stm32f1xx_it.c ****     /* USER CODE END W1_MemoryManagement_IRQn 0 */
 121:Src/stm32f1xx_it.c ****   }
  79              		.loc 1 121 3 discriminator 1 view .LVU8
 117:Src/stm32f1xx_it.c ****   {
  80              		.loc 1 117 9 discriminator 1 view .LVU9
  81 0000 FEE7     		b	.L5
  82              		.cfi_endproc
  83              	.LFE67:
  85              		.section	.text.BusFault_Handler,"ax",%progbits
  86              		.align	1
  87              		.global	BusFault_Handler
  88              		.syntax unified
  89              		.thumb
  90              		.thumb_func
  91              		.fpu softvfp
  93              	BusFault_Handler:
  94              	.LFB68:
 122:Src/stm32f1xx_it.c **** }
 123:Src/stm32f1xx_it.c **** 
 124:Src/stm32f1xx_it.c **** /**
 125:Src/stm32f1xx_it.c ****   * @brief This function handles Prefetch fault, memory access fault.
 126:Src/stm32f1xx_it.c ****   */
 127:Src/stm32f1xx_it.c **** void BusFault_Handler(void)
 128:Src/stm32f1xx_it.c **** {
  95              		.loc 1 128 1 view -0
  96              		.cfi_startproc
  97              		@ Volatile: function does not return.
  98              		@ args = 0, pretend = 0, frame = 0
  99              		@ frame_needed = 0, uses_anonymous_args = 0
 100              		@ link register save eliminated.
 101              	.L7:
 129:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 130:Src/stm32f1xx_it.c **** 
 131:Src/stm32f1xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 132:Src/stm32f1xx_it.c ****   while (1)
ARM GAS  /tmp/ccK5hqVC.s 			page 5


 102              		.loc 1 132 3 discriminator 1 view .LVU11
 133:Src/stm32f1xx_it.c ****   {
 134:Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_BusFault_IRQn 0 */
 135:Src/stm32f1xx_it.c ****     /* USER CODE END W1_BusFault_IRQn 0 */
 136:Src/stm32f1xx_it.c ****   }
 103              		.loc 1 136 3 discriminator 1 view .LVU12
 132:Src/stm32f1xx_it.c ****   {
 104              		.loc 1 132 9 discriminator 1 view .LVU13
 105 0000 FEE7     		b	.L7
 106              		.cfi_endproc
 107              	.LFE68:
 109              		.section	.text.UsageFault_Handler,"ax",%progbits
 110              		.align	1
 111              		.global	UsageFault_Handler
 112              		.syntax unified
 113              		.thumb
 114              		.thumb_func
 115              		.fpu softvfp
 117              	UsageFault_Handler:
 118              	.LFB69:
 137:Src/stm32f1xx_it.c **** }
 138:Src/stm32f1xx_it.c **** 
 139:Src/stm32f1xx_it.c **** /**
 140:Src/stm32f1xx_it.c ****   * @brief This function handles Undefined instruction or illegal state.
 141:Src/stm32f1xx_it.c ****   */
 142:Src/stm32f1xx_it.c **** void UsageFault_Handler(void)
 143:Src/stm32f1xx_it.c **** {
 119              		.loc 1 143 1 view -0
 120              		.cfi_startproc
 121              		@ Volatile: function does not return.
 122              		@ args = 0, pretend = 0, frame = 0
 123              		@ frame_needed = 0, uses_anonymous_args = 0
 124              		@ link register save eliminated.
 125              	.L9:
 144:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 145:Src/stm32f1xx_it.c **** 
 146:Src/stm32f1xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 147:Src/stm32f1xx_it.c ****   while (1)
 126              		.loc 1 147 3 discriminator 1 view .LVU15
 148:Src/stm32f1xx_it.c ****   {
 149:Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
 150:Src/stm32f1xx_it.c ****     /* USER CODE END W1_UsageFault_IRQn 0 */
 151:Src/stm32f1xx_it.c ****   }
 127              		.loc 1 151 3 discriminator 1 view .LVU16
 147:Src/stm32f1xx_it.c ****   {
 128              		.loc 1 147 9 discriminator 1 view .LVU17
 129 0000 FEE7     		b	.L9
 130              		.cfi_endproc
 131              	.LFE69:
 133              		.section	.text.SVC_Handler,"ax",%progbits
 134              		.align	1
 135              		.global	SVC_Handler
 136              		.syntax unified
 137              		.thumb
 138              		.thumb_func
 139              		.fpu softvfp
 141              	SVC_Handler:
ARM GAS  /tmp/ccK5hqVC.s 			page 6


 142              	.LFB70:
 152:Src/stm32f1xx_it.c **** }
 153:Src/stm32f1xx_it.c **** 
 154:Src/stm32f1xx_it.c **** /**
 155:Src/stm32f1xx_it.c ****   * @brief This function handles System service call via SWI instruction.
 156:Src/stm32f1xx_it.c ****   */
 157:Src/stm32f1xx_it.c **** void SVC_Handler(void)
 158:Src/stm32f1xx_it.c **** {
 143              		.loc 1 158 1 view -0
 144              		.cfi_startproc
 145              		@ args = 0, pretend = 0, frame = 0
 146              		@ frame_needed = 0, uses_anonymous_args = 0
 147              		@ link register save eliminated.
 159:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 0 */
 160:Src/stm32f1xx_it.c **** 
 161:Src/stm32f1xx_it.c ****   /* USER CODE END SVCall_IRQn 0 */
 162:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 1 */
 163:Src/stm32f1xx_it.c **** 
 164:Src/stm32f1xx_it.c ****   /* USER CODE END SVCall_IRQn 1 */
 165:Src/stm32f1xx_it.c **** }
 148              		.loc 1 165 1 view .LVU19
 149 0000 7047     		bx	lr
 150              		.cfi_endproc
 151              	.LFE70:
 153              		.section	.text.DebugMon_Handler,"ax",%progbits
 154              		.align	1
 155              		.global	DebugMon_Handler
 156              		.syntax unified
 157              		.thumb
 158              		.thumb_func
 159              		.fpu softvfp
 161              	DebugMon_Handler:
 162              	.LFB71:
 166:Src/stm32f1xx_it.c **** 
 167:Src/stm32f1xx_it.c **** /**
 168:Src/stm32f1xx_it.c ****   * @brief This function handles Debug monitor.
 169:Src/stm32f1xx_it.c ****   */
 170:Src/stm32f1xx_it.c **** void DebugMon_Handler(void)
 171:Src/stm32f1xx_it.c **** {
 163              		.loc 1 171 1 view -0
 164              		.cfi_startproc
 165              		@ args = 0, pretend = 0, frame = 0
 166              		@ frame_needed = 0, uses_anonymous_args = 0
 167              		@ link register save eliminated.
 172:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 173:Src/stm32f1xx_it.c **** 
 174:Src/stm32f1xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 175:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 176:Src/stm32f1xx_it.c **** 
 177:Src/stm32f1xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 178:Src/stm32f1xx_it.c **** }
 168              		.loc 1 178 1 view .LVU21
 169 0000 7047     		bx	lr
 170              		.cfi_endproc
 171              	.LFE71:
 173              		.section	.text.PendSV_Handler,"ax",%progbits
 174              		.align	1
ARM GAS  /tmp/ccK5hqVC.s 			page 7


 175              		.global	PendSV_Handler
 176              		.syntax unified
 177              		.thumb
 178              		.thumb_func
 179              		.fpu softvfp
 181              	PendSV_Handler:
 182              	.LFB72:
 179:Src/stm32f1xx_it.c **** 
 180:Src/stm32f1xx_it.c **** /**
 181:Src/stm32f1xx_it.c ****   * @brief This function handles Pendable request for system service.
 182:Src/stm32f1xx_it.c ****   */
 183:Src/stm32f1xx_it.c **** void PendSV_Handler(void)
 184:Src/stm32f1xx_it.c **** {
 183              		.loc 1 184 1 view -0
 184              		.cfi_startproc
 185              		@ args = 0, pretend = 0, frame = 0
 186              		@ frame_needed = 0, uses_anonymous_args = 0
 187              		@ link register save eliminated.
 185:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 0 */
 186:Src/stm32f1xx_it.c **** 
 187:Src/stm32f1xx_it.c ****   /* USER CODE END PendSV_IRQn 0 */
 188:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 1 */
 189:Src/stm32f1xx_it.c **** 
 190:Src/stm32f1xx_it.c ****   /* USER CODE END PendSV_IRQn 1 */
 191:Src/stm32f1xx_it.c **** }
 188              		.loc 1 191 1 view .LVU23
 189 0000 7047     		bx	lr
 190              		.cfi_endproc
 191              	.LFE72:
 193              		.section	.text.SysTick_Handler,"ax",%progbits
 194              		.align	1
 195              		.global	SysTick_Handler
 196              		.syntax unified
 197              		.thumb
 198              		.thumb_func
 199              		.fpu softvfp
 201              	SysTick_Handler:
 202              	.LFB73:
 192:Src/stm32f1xx_it.c **** 
 193:Src/stm32f1xx_it.c **** /**
 194:Src/stm32f1xx_it.c ****   * @brief This function handles System tick timer.
 195:Src/stm32f1xx_it.c ****   */
 196:Src/stm32f1xx_it.c **** void SysTick_Handler(void)
 197:Src/stm32f1xx_it.c **** {
 203              		.loc 1 197 1 view -0
 204              		.cfi_startproc
 205              		@ args = 0, pretend = 0, frame = 0
 206              		@ frame_needed = 0, uses_anonymous_args = 0
 207 0000 08B5     		push	{r3, lr}
 208              	.LCFI0:
 209              		.cfi_def_cfa_offset 8
 210              		.cfi_offset 3, -8
 211              		.cfi_offset 14, -4
 198:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 199:Src/stm32f1xx_it.c **** 
 200:Src/stm32f1xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 201:Src/stm32f1xx_it.c ****   HAL_IncTick();
ARM GAS  /tmp/ccK5hqVC.s 			page 8


 212              		.loc 1 201 3 view .LVU25
 213 0002 FFF7FEFF 		bl	HAL_IncTick
 214              	.LVL0:
 202:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 203:Src/stm32f1xx_it.c **** 
 204:Src/stm32f1xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 205:Src/stm32f1xx_it.c **** }
 215              		.loc 1 205 1 is_stmt 0 view .LVU26
 216 0006 08BD     		pop	{r3, pc}
 217              		.cfi_endproc
 218              	.LFE73:
 220              		.section	.text.TIM2_IRQHandler,"ax",%progbits
 221              		.align	1
 222              		.global	TIM2_IRQHandler
 223              		.syntax unified
 224              		.thumb
 225              		.thumb_func
 226              		.fpu softvfp
 228              	TIM2_IRQHandler:
 229              	.LFB74:
 206:Src/stm32f1xx_it.c **** 
 207:Src/stm32f1xx_it.c **** /******************************************************************************/
 208:Src/stm32f1xx_it.c **** /* STM32F1xx Peripheral Interrupt Handlers                                    */
 209:Src/stm32f1xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 210:Src/stm32f1xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 211:Src/stm32f1xx_it.c **** /* please refer to the startup file (startup_stm32f1xx.s).                    */
 212:Src/stm32f1xx_it.c **** /******************************************************************************/
 213:Src/stm32f1xx_it.c **** 
 214:Src/stm32f1xx_it.c **** /**
 215:Src/stm32f1xx_it.c ****   * @brief This function handles TIM2 global interrupt.
 216:Src/stm32f1xx_it.c ****   */
 217:Src/stm32f1xx_it.c **** void TIM2_IRQHandler(void)
 218:Src/stm32f1xx_it.c **** {
 230              		.loc 1 218 1 is_stmt 1 view -0
 231              		.cfi_startproc
 232              		@ args = 0, pretend = 0, frame = 0
 233              		@ frame_needed = 0, uses_anonymous_args = 0
 234 0000 08B5     		push	{r3, lr}
 235              	.LCFI1:
 236              		.cfi_def_cfa_offset 8
 237              		.cfi_offset 3, -8
 238              		.cfi_offset 14, -4
 219:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN TIM2_IRQn 0 */
 220:Src/stm32f1xx_it.c **** 
 221:Src/stm32f1xx_it.c ****   /* USER CODE END TIM2_IRQn 0 */
 222:Src/stm32f1xx_it.c ****   HAL_TIM_IRQHandler(&htim2);
 239              		.loc 1 222 3 view .LVU28
 240 0002 0248     		ldr	r0, .L17
 241 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 242              	.LVL1:
 223:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN TIM2_IRQn 1 */
 224:Src/stm32f1xx_it.c **** 
 225:Src/stm32f1xx_it.c ****   /* USER CODE END TIM2_IRQn 1 */
 226:Src/stm32f1xx_it.c **** }
 243              		.loc 1 226 1 is_stmt 0 view .LVU29
 244 0008 08BD     		pop	{r3, pc}
 245              	.L18:
ARM GAS  /tmp/ccK5hqVC.s 			page 9


 246 000a 00BF     		.align	2
 247              	.L17:
 248 000c 00000000 		.word	htim2
 249              		.cfi_endproc
 250              	.LFE74:
 252              		.section	.text.TIM3_IRQHandler,"ax",%progbits
 253              		.align	1
 254              		.global	TIM3_IRQHandler
 255              		.syntax unified
 256              		.thumb
 257              		.thumb_func
 258              		.fpu softvfp
 260              	TIM3_IRQHandler:
 261              	.LFB75:
 227:Src/stm32f1xx_it.c **** 
 228:Src/stm32f1xx_it.c **** /**
 229:Src/stm32f1xx_it.c ****   * @brief This function handles TIM3 global interrupt.
 230:Src/stm32f1xx_it.c ****   */
 231:Src/stm32f1xx_it.c **** void TIM3_IRQHandler(void)
 232:Src/stm32f1xx_it.c **** {
 262              		.loc 1 232 1 is_stmt 1 view -0
 263              		.cfi_startproc
 264              		@ args = 0, pretend = 0, frame = 64
 265              		@ frame_needed = 0, uses_anonymous_args = 0
 266 0000 70B5     		push	{r4, r5, r6, lr}
 267              	.LCFI2:
 268              		.cfi_def_cfa_offset 16
 269              		.cfi_offset 4, -16
 270              		.cfi_offset 5, -12
 271              		.cfi_offset 6, -8
 272              		.cfi_offset 14, -4
 273 0002 9CB0     		sub	sp, sp, #112
 274              	.LCFI3:
 275              		.cfi_def_cfa_offset 128
 233:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN TIM3_IRQn 0 */
 234:Src/stm32f1xx_it.c **** 
 235:Src/stm32f1xx_it.c ****   /* USER CODE END TIM3_IRQn 0 */
 236:Src/stm32f1xx_it.c ****   HAL_TIM_IRQHandler(&htim3);
 276              		.loc 1 236 3 view .LVU31
 277 0004 0E48     		ldr	r0, .L23
 278 0006 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 279              	.LVL2:
 237:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN TIM3_IRQn 1 */
 238:Src/stm32f1xx_it.c ****   if(evaluatePrinter_Gcode())
 280              		.loc 1 238 3 view .LVU32
 281              		.loc 1 238 6 is_stmt 0 view .LVU33
 282 000a FFF7FEFF 		bl	evaluatePrinter_Gcode
 283              	.LVL3:
 284              		.loc 1 238 5 view .LVU34
 285 000e 08B9     		cbnz	r0, .L22
 286              	.L19:
 239:Src/stm32f1xx_it.c ****   {
 240:Src/stm32f1xx_it.c ****     sendCommandToPrinter_Gcode(firstOutCommandBuffer_Gcode());
 241:Src/stm32f1xx_it.c ****     eraseFirstCommandBuffer_Gcode();
 242:Src/stm32f1xx_it.c ****   }
 243:Src/stm32f1xx_it.c **** 
 244:Src/stm32f1xx_it.c **** 
ARM GAS  /tmp/ccK5hqVC.s 			page 10


 245:Src/stm32f1xx_it.c ****   /* USER CODE END TIM3_IRQn 1 */
 246:Src/stm32f1xx_it.c **** }
 287              		.loc 1 246 1 view .LVU35
 288 0010 1CB0     		add	sp, sp, #112
 289              	.LCFI4:
 290              		.cfi_remember_state
 291              		.cfi_def_cfa_offset 16
 292              		@ sp needed
 293 0012 70BD     		pop	{r4, r5, r6, pc}
 294              	.L22:
 295              	.LCFI5:
 296              		.cfi_restore_state
 240:Src/stm32f1xx_it.c ****     eraseFirstCommandBuffer_Gcode();
 297              		.loc 1 240 5 is_stmt 1 view .LVU36
 298 0014 0DAE     		add	r6, sp, #52
 299 0016 3046     		mov	r0, r6
 300 0018 FFF7FEFF 		bl	firstOutCommandBuffer_Gcode
 301              	.LVL4:
 302 001c 6C46     		mov	r4, sp
 303 001e 11AD     		add	r5, sp, #68
 304 0020 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 305 0022 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 306 0024 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 307 0026 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 308 0028 95E80700 		ldm	r5, {r0, r1, r2}
 309 002c 84E80700 		stm	r4, {r0, r1, r2}
 310 0030 96E80F00 		ldm	r6, {r0, r1, r2, r3}
 311 0034 FFF7FEFF 		bl	sendCommandToPrinter_Gcode
 312              	.LVL5:
 241:Src/stm32f1xx_it.c ****   }
 313              		.loc 1 241 5 view .LVU37
 314 0038 FFF7FEFF 		bl	eraseFirstCommandBuffer_Gcode
 315              	.LVL6:
 316              		.loc 1 246 1 is_stmt 0 view .LVU38
 317 003c E8E7     		b	.L19
 318              	.L24:
 319 003e 00BF     		.align	2
 320              	.L23:
 321 0040 00000000 		.word	htim3
 322              		.cfi_endproc
 323              	.LFE75:
 325              		.section	.text.TIM4_IRQHandler,"ax",%progbits
 326              		.align	1
 327              		.global	TIM4_IRQHandler
 328              		.syntax unified
 329              		.thumb
 330              		.thumb_func
 331              		.fpu softvfp
 333              	TIM4_IRQHandler:
 334              	.LFB76:
 247:Src/stm32f1xx_it.c **** 
 248:Src/stm32f1xx_it.c **** /**
 249:Src/stm32f1xx_it.c ****   * @brief This function handles TIM4 global interrupt.
 250:Src/stm32f1xx_it.c ****   */
 251:Src/stm32f1xx_it.c **** void TIM4_IRQHandler(void)
 252:Src/stm32f1xx_it.c **** {
 335              		.loc 1 252 1 is_stmt 1 view -0
ARM GAS  /tmp/ccK5hqVC.s 			page 11


 336              		.cfi_startproc
 337              		@ args = 0, pretend = 0, frame = 0
 338              		@ frame_needed = 0, uses_anonymous_args = 0
 339 0000 08B5     		push	{r3, lr}
 340              	.LCFI6:
 341              		.cfi_def_cfa_offset 8
 342              		.cfi_offset 3, -8
 343              		.cfi_offset 14, -4
 253:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN TIM4_IRQn 0 */
 254:Src/stm32f1xx_it.c **** 
 255:Src/stm32f1xx_it.c ****   /* USER CODE END TIM4_IRQn 0 */
 256:Src/stm32f1xx_it.c ****   HAL_TIM_IRQHandler(&htim4);
 344              		.loc 1 256 3 view .LVU40
 345 0002 0348     		ldr	r0, .L27
 346 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 347              	.LVL7:
 257:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN TIM4_IRQn 1 */
 258:Src/stm32f1xx_it.c ****   evaluate_Motors();
 348              		.loc 1 258 3 view .LVU41
 349 0008 FFF7FEFF 		bl	evaluate_Motors
 350              	.LVL8:
 259:Src/stm32f1xx_it.c ****   /* USER CODE END TIM4_IRQn 1 */
 260:Src/stm32f1xx_it.c **** }
 351              		.loc 1 260 1 is_stmt 0 view .LVU42
 352 000c 08BD     		pop	{r3, pc}
 353              	.L28:
 354 000e 00BF     		.align	2
 355              	.L27:
 356 0010 00000000 		.word	htim4
 357              		.cfi_endproc
 358              	.LFE76:
 360              		.section	.rodata.TIM5_IRQHandler.str1.4,"aMS",%progbits,1
 361              		.align	2
 362              	.LC0:
 363 0000 25642C20 		.ascii	"%d, %d, %d, %d\012\000"
 363      25642C20 
 363      25642C20 
 363      25640A00 
 364              		.section	.text.TIM5_IRQHandler,"ax",%progbits
 365              		.align	1
 366              		.global	TIM5_IRQHandler
 367              		.syntax unified
 368              		.thumb
 369              		.thumb_func
 370              		.fpu softvfp
 372              	TIM5_IRQHandler:
 373              	.LFB77:
 261:Src/stm32f1xx_it.c **** 
 262:Src/stm32f1xx_it.c **** /**
 263:Src/stm32f1xx_it.c ****   * @brief This function handles TIM5 global interrupt.
 264:Src/stm32f1xx_it.c ****   */
 265:Src/stm32f1xx_it.c **** void TIM5_IRQHandler(void)
 266:Src/stm32f1xx_it.c **** {
 374              		.loc 1 266 1 is_stmt 1 view -0
 375              		.cfi_startproc
 376              		@ args = 0, pretend = 0, frame = 0
 377              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccK5hqVC.s 			page 12


 378 0000 70B5     		push	{r4, r5, r6, lr}
 379              	.LCFI7:
 380              		.cfi_def_cfa_offset 16
 381              		.cfi_offset 4, -16
 382              		.cfi_offset 5, -12
 383              		.cfi_offset 6, -8
 384              		.cfi_offset 14, -4
 385 0002 82B0     		sub	sp, sp, #8
 386              	.LCFI8:
 387              		.cfi_def_cfa_offset 24
 267:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN TIM5_IRQn 0 */
 268:Src/stm32f1xx_it.c **** 
 269:Src/stm32f1xx_it.c ****   /* USER CODE END TIM5_IRQn 0 */
 270:Src/stm32f1xx_it.c ****   HAL_TIM_IRQHandler(&htim5);
 388              		.loc 1 270 3 view .LVU44
 389 0004 0B48     		ldr	r0, .L31
 390 0006 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 391              	.LVL9:
 271:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN TIM5_IRQn 1 */
 272:Src/stm32f1xx_it.c ****   printf("%d, %d, %d, %d\n", getX_coordinates(), getY_coordinates(), getZ_coordinates(), getE_coord
 392              		.loc 1 272 3 view .LVU45
 393 000a FFF7FEFF 		bl	getX_coordinates
 394              	.LVL10:
 395 000e 0446     		mov	r4, r0
 396 0010 FFF7FEFF 		bl	getY_coordinates
 397              	.LVL11:
 398 0014 0546     		mov	r5, r0
 399 0016 FFF7FEFF 		bl	getZ_coordinates
 400              	.LVL12:
 401 001a 0646     		mov	r6, r0
 402 001c FFF7FEFF 		bl	getE_coordinates
 403              	.LVL13:
 404 0020 0090     		str	r0, [sp]
 405 0022 3346     		mov	r3, r6
 406 0024 2A46     		mov	r2, r5
 407 0026 2146     		mov	r1, r4
 408 0028 0348     		ldr	r0, .L31+4
 409 002a FFF7FEFF 		bl	printf
 410              	.LVL14:
 273:Src/stm32f1xx_it.c ****   /* USER CODE END TIM5_IRQn 1 */
 274:Src/stm32f1xx_it.c **** }
 411              		.loc 1 274 1 is_stmt 0 view .LVU46
 412 002e 02B0     		add	sp, sp, #8
 413              	.LCFI9:
 414              		.cfi_def_cfa_offset 16
 415              		@ sp needed
 416 0030 70BD     		pop	{r4, r5, r6, pc}
 417              	.L32:
 418 0032 00BF     		.align	2
 419              	.L31:
 420 0034 00000000 		.word	htim5
 421 0038 00000000 		.word	.LC0
 422              		.cfi_endproc
 423              	.LFE77:
 425              		.section	.text.OTG_FS_IRQHandler,"ax",%progbits
 426              		.align	1
 427              		.global	OTG_FS_IRQHandler
ARM GAS  /tmp/ccK5hqVC.s 			page 13


 428              		.syntax unified
 429              		.thumb
 430              		.thumb_func
 431              		.fpu softvfp
 433              	OTG_FS_IRQHandler:
 434              	.LFB78:
 275:Src/stm32f1xx_it.c **** 
 276:Src/stm32f1xx_it.c **** /**
 277:Src/stm32f1xx_it.c ****   * @brief This function handles USB OTG FS global interrupt.
 278:Src/stm32f1xx_it.c ****   */
 279:Src/stm32f1xx_it.c **** void OTG_FS_IRQHandler(void)
 280:Src/stm32f1xx_it.c **** {
 435              		.loc 1 280 1 is_stmt 1 view -0
 436              		.cfi_startproc
 437              		@ args = 0, pretend = 0, frame = 0
 438              		@ frame_needed = 0, uses_anonymous_args = 0
 439 0000 08B5     		push	{r3, lr}
 440              	.LCFI10:
 441              		.cfi_def_cfa_offset 8
 442              		.cfi_offset 3, -8
 443              		.cfi_offset 14, -4
 281:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN OTG_FS_IRQn 0 */
 282:Src/stm32f1xx_it.c **** 
 283:Src/stm32f1xx_it.c ****   /* USER CODE END OTG_FS_IRQn 0 */
 284:Src/stm32f1xx_it.c ****   HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 444              		.loc 1 284 3 view .LVU48
 445 0002 0248     		ldr	r0, .L35
 446 0004 FFF7FEFF 		bl	HAL_HCD_IRQHandler
 447              	.LVL15:
 285:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN OTG_FS_IRQn 1 */
 286:Src/stm32f1xx_it.c **** 
 287:Src/stm32f1xx_it.c ****   /* USER CODE END OTG_FS_IRQn 1 */
 288:Src/stm32f1xx_it.c **** }
 448              		.loc 1 288 1 is_stmt 0 view .LVU49
 449 0008 08BD     		pop	{r3, pc}
 450              	.L36:
 451 000a 00BF     		.align	2
 452              	.L35:
 453 000c 00000000 		.word	hhcd_USB_OTG_FS
 454              		.cfi_endproc
 455              	.LFE78:
 457              		.text
 458              	.Letext0:
 459              		.file 2 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 460              		.file 3 "Drivers/CMSIS/Include/core_cm3.h"
 461              		.file 4 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 462              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f105xc.h"
 463              		.file 6 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 464              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 465              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 466              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 467              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usb.h"
 468              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_hcd.h"
 469              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 470              		.file 13 "Inc/Gcode/GcodeConverter_Gcode.h"
 471              		.file 14 "Inc/Gcode/Descritization_Gcode.h"
 472              		.file 15 "Inc/Gcode/Buffer_Gcode.h"
ARM GAS  /tmp/ccK5hqVC.s 			page 14


 473              		.file 16 "Inc/Gcode/VirtualPrinters_Gcode.h"
 474              		.file 17 "Inc/usart.h"
 475              		.file 18 "Inc/coordinates.h"
 476              		.file 19 "Inc/Motors/Driver_Motors.h"
 477              		.file 20 "<built-in>"
ARM GAS  /tmp/ccK5hqVC.s 			page 15


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_it.c
     /tmp/ccK5hqVC.s:16     .text.NMI_Handler:0000000000000000 $t
     /tmp/ccK5hqVC.s:24     .text.NMI_Handler:0000000000000000 NMI_Handler
     /tmp/ccK5hqVC.s:38     .text.HardFault_Handler:0000000000000000 $t
     /tmp/ccK5hqVC.s:45     .text.HardFault_Handler:0000000000000000 HardFault_Handler
     /tmp/ccK5hqVC.s:62     .text.MemManage_Handler:0000000000000000 $t
     /tmp/ccK5hqVC.s:69     .text.MemManage_Handler:0000000000000000 MemManage_Handler
     /tmp/ccK5hqVC.s:86     .text.BusFault_Handler:0000000000000000 $t
     /tmp/ccK5hqVC.s:93     .text.BusFault_Handler:0000000000000000 BusFault_Handler
     /tmp/ccK5hqVC.s:110    .text.UsageFault_Handler:0000000000000000 $t
     /tmp/ccK5hqVC.s:117    .text.UsageFault_Handler:0000000000000000 UsageFault_Handler
     /tmp/ccK5hqVC.s:134    .text.SVC_Handler:0000000000000000 $t
     /tmp/ccK5hqVC.s:141    .text.SVC_Handler:0000000000000000 SVC_Handler
     /tmp/ccK5hqVC.s:154    .text.DebugMon_Handler:0000000000000000 $t
     /tmp/ccK5hqVC.s:161    .text.DebugMon_Handler:0000000000000000 DebugMon_Handler
     /tmp/ccK5hqVC.s:174    .text.PendSV_Handler:0000000000000000 $t
     /tmp/ccK5hqVC.s:181    .text.PendSV_Handler:0000000000000000 PendSV_Handler
     /tmp/ccK5hqVC.s:194    .text.SysTick_Handler:0000000000000000 $t
     /tmp/ccK5hqVC.s:201    .text.SysTick_Handler:0000000000000000 SysTick_Handler
     /tmp/ccK5hqVC.s:221    .text.TIM2_IRQHandler:0000000000000000 $t
     /tmp/ccK5hqVC.s:228    .text.TIM2_IRQHandler:0000000000000000 TIM2_IRQHandler
     /tmp/ccK5hqVC.s:248    .text.TIM2_IRQHandler:000000000000000c $d
     /tmp/ccK5hqVC.s:253    .text.TIM3_IRQHandler:0000000000000000 $t
     /tmp/ccK5hqVC.s:260    .text.TIM3_IRQHandler:0000000000000000 TIM3_IRQHandler
     /tmp/ccK5hqVC.s:321    .text.TIM3_IRQHandler:0000000000000040 $d
     /tmp/ccK5hqVC.s:326    .text.TIM4_IRQHandler:0000000000000000 $t
     /tmp/ccK5hqVC.s:333    .text.TIM4_IRQHandler:0000000000000000 TIM4_IRQHandler
     /tmp/ccK5hqVC.s:356    .text.TIM4_IRQHandler:0000000000000010 $d
     /tmp/ccK5hqVC.s:361    .rodata.TIM5_IRQHandler.str1.4:0000000000000000 $d
     /tmp/ccK5hqVC.s:365    .text.TIM5_IRQHandler:0000000000000000 $t
     /tmp/ccK5hqVC.s:372    .text.TIM5_IRQHandler:0000000000000000 TIM5_IRQHandler
     /tmp/ccK5hqVC.s:420    .text.TIM5_IRQHandler:0000000000000034 $d
     /tmp/ccK5hqVC.s:426    .text.OTG_FS_IRQHandler:0000000000000000 $t
     /tmp/ccK5hqVC.s:433    .text.OTG_FS_IRQHandler:0000000000000000 OTG_FS_IRQHandler
     /tmp/ccK5hqVC.s:453    .text.OTG_FS_IRQHandler:000000000000000c $d

UNDEFINED SYMBOLS
HAL_IncTick
HAL_TIM_IRQHandler
htim2
evaluatePrinter_Gcode
firstOutCommandBuffer_Gcode
sendCommandToPrinter_Gcode
eraseFirstCommandBuffer_Gcode
htim3
evaluate_Motors
htim4
getX_coordinates
getY_coordinates
getZ_coordinates
getE_coordinates
printf
htim5
HAL_HCD_IRQHandler
hhcd_USB_OTG_FS
