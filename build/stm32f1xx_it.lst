ARM GAS  /tmp/cchEN5h1.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f1xx_it.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.NMI_Handler,"ax",%progbits
  16              		.align	1
  17              		.global	NMI_Handler
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	NMI_Handler:
  24              	.LFB66:
  25              		.file 1 "Src/stm32f1xx_it.c"
   1:Src/stm32f1xx_it.c **** /* USER CODE BEGIN Header */
   2:Src/stm32f1xx_it.c **** /**
   3:Src/stm32f1xx_it.c ****   ******************************************************************************
   4:Src/stm32f1xx_it.c ****   * @file    stm32f1xx_it.c
   5:Src/stm32f1xx_it.c ****   * @brief   Interrupt Service Routines.
   6:Src/stm32f1xx_it.c ****   ******************************************************************************
   7:Src/stm32f1xx_it.c ****   * @attention
   8:Src/stm32f1xx_it.c ****   *
   9:Src/stm32f1xx_it.c ****   * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  10:Src/stm32f1xx_it.c ****   * All rights reserved.</center></h2>
  11:Src/stm32f1xx_it.c ****   *
  12:Src/stm32f1xx_it.c ****   * This software component is licensed by ST under Ultimate Liberty license
  13:Src/stm32f1xx_it.c ****   * SLA0044, the "License"; You may not use this file except in compliance with
  14:Src/stm32f1xx_it.c ****   * the License. You may obtain a copy of the License at:
  15:Src/stm32f1xx_it.c ****   *                             www.st.com/SLA0044
  16:Src/stm32f1xx_it.c ****   *
  17:Src/stm32f1xx_it.c ****   ******************************************************************************
  18:Src/stm32f1xx_it.c ****   */
  19:Src/stm32f1xx_it.c **** /* USER CODE END Header */
  20:Src/stm32f1xx_it.c **** 
  21:Src/stm32f1xx_it.c **** /* Includes ------------------------------------------------------------------*/
  22:Src/stm32f1xx_it.c **** #include "main.h"
  23:Src/stm32f1xx_it.c **** #include "stm32f1xx_it.h"
  24:Src/stm32f1xx_it.c **** /* Private includes ----------------------------------------------------------*/
  25:Src/stm32f1xx_it.c **** /* USER CODE BEGIN Includes */
  26:Src/stm32f1xx_it.c **** #include "Buffer_Gcode.h"
  27:Src/stm32f1xx_it.c **** #include "VirtualPrinters_Gcode.h"
  28:Src/stm32f1xx_it.c **** #include "Driver_Motors.h"
  29:Src/stm32f1xx_it.c **** 
  30:Src/stm32f1xx_it.c **** #include "usart.h"
  31:Src/stm32f1xx_it.c **** #include "gpio.h"
  32:Src/stm32f1xx_it.c **** 
  33:Src/stm32f1xx_it.c **** #include "stdbool.h"
ARM GAS  /tmp/cchEN5h1.s 			page 2


  34:Src/stm32f1xx_it.c **** 
  35:Src/stm32f1xx_it.c **** #include "coordinates.h"
  36:Src/stm32f1xx_it.c **** /* USER CODE END Includes */
  37:Src/stm32f1xx_it.c **** 
  38:Src/stm32f1xx_it.c **** /* Private typedef -----------------------------------------------------------*/
  39:Src/stm32f1xx_it.c **** /* USER CODE BEGIN TD */
  40:Src/stm32f1xx_it.c **** 
  41:Src/stm32f1xx_it.c **** /* USER CODE END TD */
  42:Src/stm32f1xx_it.c **** 
  43:Src/stm32f1xx_it.c **** /* Private define ------------------------------------------------------------*/
  44:Src/stm32f1xx_it.c **** /* USER CODE BEGIN PD */
  45:Src/stm32f1xx_it.c **** 
  46:Src/stm32f1xx_it.c **** /* USER CODE END PD */
  47:Src/stm32f1xx_it.c **** 
  48:Src/stm32f1xx_it.c **** /* Private macro -------------------------------------------------------------*/
  49:Src/stm32f1xx_it.c **** /* USER CODE BEGIN PM */
  50:Src/stm32f1xx_it.c **** 
  51:Src/stm32f1xx_it.c **** /* USER CODE END PM */
  52:Src/stm32f1xx_it.c **** 
  53:Src/stm32f1xx_it.c **** /* Private variables ---------------------------------------------------------*/
  54:Src/stm32f1xx_it.c **** /* USER CODE BEGIN PV */
  55:Src/stm32f1xx_it.c **** 
  56:Src/stm32f1xx_it.c **** /* USER CODE END PV */
  57:Src/stm32f1xx_it.c **** 
  58:Src/stm32f1xx_it.c **** /* Private function prototypes -----------------------------------------------*/
  59:Src/stm32f1xx_it.c **** /* USER CODE BEGIN PFP */
  60:Src/stm32f1xx_it.c **** 
  61:Src/stm32f1xx_it.c **** /* USER CODE END PFP */
  62:Src/stm32f1xx_it.c **** 
  63:Src/stm32f1xx_it.c **** /* Private user code ---------------------------------------------------------*/
  64:Src/stm32f1xx_it.c **** /* USER CODE BEGIN 0 */
  65:Src/stm32f1xx_it.c **** 
  66:Src/stm32f1xx_it.c **** /* USER CODE END 0 */
  67:Src/stm32f1xx_it.c **** 
  68:Src/stm32f1xx_it.c **** /* External variables --------------------------------------------------------*/
  69:Src/stm32f1xx_it.c **** extern HCD_HandleTypeDef hhcd_USB_OTG_FS;
  70:Src/stm32f1xx_it.c **** extern TIM_HandleTypeDef htim2;
  71:Src/stm32f1xx_it.c **** extern TIM_HandleTypeDef htim3;
  72:Src/stm32f1xx_it.c **** extern TIM_HandleTypeDef htim4;
  73:Src/stm32f1xx_it.c **** extern TIM_HandleTypeDef htim5;
  74:Src/stm32f1xx_it.c **** /* USER CODE BEGIN EV */
  75:Src/stm32f1xx_it.c **** 
  76:Src/stm32f1xx_it.c **** /* USER CODE END EV */
  77:Src/stm32f1xx_it.c **** 
  78:Src/stm32f1xx_it.c **** /******************************************************************************/
  79:Src/stm32f1xx_it.c **** /*           Cortex-M3 Processor Interruption and Exception Handlers          */
  80:Src/stm32f1xx_it.c **** /******************************************************************************/
  81:Src/stm32f1xx_it.c **** /**
  82:Src/stm32f1xx_it.c ****   * @brief This function handles Non maskable interrupt.
  83:Src/stm32f1xx_it.c ****   */
  84:Src/stm32f1xx_it.c **** void NMI_Handler(void)
  85:Src/stm32f1xx_it.c **** {
  26              		.loc 1 85 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
ARM GAS  /tmp/cchEN5h1.s 			page 3


  86:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  87:Src/stm32f1xx_it.c **** 
  88:Src/stm32f1xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  89:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  90:Src/stm32f1xx_it.c **** 
  91:Src/stm32f1xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  92:Src/stm32f1xx_it.c **** }
  31              		.loc 1 92 0
  32 0000 7047     		bx	lr
  33              		.cfi_endproc
  34              	.LFE66:
  36              		.section	.text.HardFault_Handler,"ax",%progbits
  37              		.align	1
  38              		.global	HardFault_Handler
  39              		.syntax unified
  40              		.thumb
  41              		.thumb_func
  42              		.fpu softvfp
  44              	HardFault_Handler:
  45              	.LFB67:
  93:Src/stm32f1xx_it.c **** 
  94:Src/stm32f1xx_it.c **** /**
  95:Src/stm32f1xx_it.c ****   * @brief This function handles Hard fault interrupt.
  96:Src/stm32f1xx_it.c ****   */
  97:Src/stm32f1xx_it.c **** void HardFault_Handler(void)
  98:Src/stm32f1xx_it.c **** {
  46              		.loc 1 98 0
  47              		.cfi_startproc
  48              		@ Volatile: function does not return.
  49              		@ args = 0, pretend = 0, frame = 0
  50              		@ frame_needed = 0, uses_anonymous_args = 0
  51              		@ link register save eliminated.
  52              	.L3:
  53 0000 FEE7     		b	.L3
  54              		.cfi_endproc
  55              	.LFE67:
  57              		.section	.text.MemManage_Handler,"ax",%progbits
  58              		.align	1
  59              		.global	MemManage_Handler
  60              		.syntax unified
  61              		.thumb
  62              		.thumb_func
  63              		.fpu softvfp
  65              	MemManage_Handler:
  66              	.LFB68:
  99:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
 100:Src/stm32f1xx_it.c **** 
 101:Src/stm32f1xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
 102:Src/stm32f1xx_it.c ****   while (1)
 103:Src/stm32f1xx_it.c ****   {
 104:Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
 105:Src/stm32f1xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
 106:Src/stm32f1xx_it.c ****   }
 107:Src/stm32f1xx_it.c **** }
 108:Src/stm32f1xx_it.c **** 
 109:Src/stm32f1xx_it.c **** /**
 110:Src/stm32f1xx_it.c ****   * @brief This function handles Memory management fault.
ARM GAS  /tmp/cchEN5h1.s 			page 4


 111:Src/stm32f1xx_it.c ****   */
 112:Src/stm32f1xx_it.c **** void MemManage_Handler(void)
 113:Src/stm32f1xx_it.c **** {
  67              		.loc 1 113 0
  68              		.cfi_startproc
  69              		@ Volatile: function does not return.
  70              		@ args = 0, pretend = 0, frame = 0
  71              		@ frame_needed = 0, uses_anonymous_args = 0
  72              		@ link register save eliminated.
  73              	.L5:
  74 0000 FEE7     		b	.L5
  75              		.cfi_endproc
  76              	.LFE68:
  78              		.section	.text.BusFault_Handler,"ax",%progbits
  79              		.align	1
  80              		.global	BusFault_Handler
  81              		.syntax unified
  82              		.thumb
  83              		.thumb_func
  84              		.fpu softvfp
  86              	BusFault_Handler:
  87              	.LFB69:
 114:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
 115:Src/stm32f1xx_it.c **** 
 116:Src/stm32f1xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
 117:Src/stm32f1xx_it.c ****   while (1)
 118:Src/stm32f1xx_it.c ****   {
 119:Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
 120:Src/stm32f1xx_it.c ****     /* USER CODE END W1_MemoryManagement_IRQn 0 */
 121:Src/stm32f1xx_it.c ****   }
 122:Src/stm32f1xx_it.c **** }
 123:Src/stm32f1xx_it.c **** 
 124:Src/stm32f1xx_it.c **** /**
 125:Src/stm32f1xx_it.c ****   * @brief This function handles Prefetch fault, memory access fault.
 126:Src/stm32f1xx_it.c ****   */
 127:Src/stm32f1xx_it.c **** void BusFault_Handler(void)
 128:Src/stm32f1xx_it.c **** {
  88              		.loc 1 128 0
  89              		.cfi_startproc
  90              		@ Volatile: function does not return.
  91              		@ args = 0, pretend = 0, frame = 0
  92              		@ frame_needed = 0, uses_anonymous_args = 0
  93              		@ link register save eliminated.
  94              	.L7:
  95 0000 FEE7     		b	.L7
  96              		.cfi_endproc
  97              	.LFE69:
  99              		.section	.text.UsageFault_Handler,"ax",%progbits
 100              		.align	1
 101              		.global	UsageFault_Handler
 102              		.syntax unified
 103              		.thumb
 104              		.thumb_func
 105              		.fpu softvfp
 107              	UsageFault_Handler:
 108              	.LFB70:
 129:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
ARM GAS  /tmp/cchEN5h1.s 			page 5


 130:Src/stm32f1xx_it.c **** 
 131:Src/stm32f1xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 132:Src/stm32f1xx_it.c ****   while (1)
 133:Src/stm32f1xx_it.c ****   {
 134:Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_BusFault_IRQn 0 */
 135:Src/stm32f1xx_it.c ****     /* USER CODE END W1_BusFault_IRQn 0 */
 136:Src/stm32f1xx_it.c ****   }
 137:Src/stm32f1xx_it.c **** }
 138:Src/stm32f1xx_it.c **** 
 139:Src/stm32f1xx_it.c **** /**
 140:Src/stm32f1xx_it.c ****   * @brief This function handles Undefined instruction or illegal state.
 141:Src/stm32f1xx_it.c ****   */
 142:Src/stm32f1xx_it.c **** void UsageFault_Handler(void)
 143:Src/stm32f1xx_it.c **** {
 109              		.loc 1 143 0
 110              		.cfi_startproc
 111              		@ Volatile: function does not return.
 112              		@ args = 0, pretend = 0, frame = 0
 113              		@ frame_needed = 0, uses_anonymous_args = 0
 114              		@ link register save eliminated.
 115              	.L9:
 116 0000 FEE7     		b	.L9
 117              		.cfi_endproc
 118              	.LFE70:
 120              		.section	.text.SVC_Handler,"ax",%progbits
 121              		.align	1
 122              		.global	SVC_Handler
 123              		.syntax unified
 124              		.thumb
 125              		.thumb_func
 126              		.fpu softvfp
 128              	SVC_Handler:
 129              	.LFB71:
 144:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 145:Src/stm32f1xx_it.c **** 
 146:Src/stm32f1xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 147:Src/stm32f1xx_it.c ****   while (1)
 148:Src/stm32f1xx_it.c ****   {
 149:Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
 150:Src/stm32f1xx_it.c ****     /* USER CODE END W1_UsageFault_IRQn 0 */
 151:Src/stm32f1xx_it.c ****   }
 152:Src/stm32f1xx_it.c **** }
 153:Src/stm32f1xx_it.c **** 
 154:Src/stm32f1xx_it.c **** /**
 155:Src/stm32f1xx_it.c ****   * @brief This function handles System service call via SWI instruction.
 156:Src/stm32f1xx_it.c ****   */
 157:Src/stm32f1xx_it.c **** void SVC_Handler(void)
 158:Src/stm32f1xx_it.c **** {
 130              		.loc 1 158 0
 131              		.cfi_startproc
 132              		@ args = 0, pretend = 0, frame = 0
 133              		@ frame_needed = 0, uses_anonymous_args = 0
 134              		@ link register save eliminated.
 159:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 0 */
 160:Src/stm32f1xx_it.c **** 
 161:Src/stm32f1xx_it.c ****   /* USER CODE END SVCall_IRQn 0 */
 162:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 1 */
ARM GAS  /tmp/cchEN5h1.s 			page 6


 163:Src/stm32f1xx_it.c **** 
 164:Src/stm32f1xx_it.c ****   /* USER CODE END SVCall_IRQn 1 */
 165:Src/stm32f1xx_it.c **** }
 135              		.loc 1 165 0
 136 0000 7047     		bx	lr
 137              		.cfi_endproc
 138              	.LFE71:
 140              		.section	.text.DebugMon_Handler,"ax",%progbits
 141              		.align	1
 142              		.global	DebugMon_Handler
 143              		.syntax unified
 144              		.thumb
 145              		.thumb_func
 146              		.fpu softvfp
 148              	DebugMon_Handler:
 149              	.LFB72:
 166:Src/stm32f1xx_it.c **** 
 167:Src/stm32f1xx_it.c **** /**
 168:Src/stm32f1xx_it.c ****   * @brief This function handles Debug monitor.
 169:Src/stm32f1xx_it.c ****   */
 170:Src/stm32f1xx_it.c **** void DebugMon_Handler(void)
 171:Src/stm32f1xx_it.c **** {
 150              		.loc 1 171 0
 151              		.cfi_startproc
 152              		@ args = 0, pretend = 0, frame = 0
 153              		@ frame_needed = 0, uses_anonymous_args = 0
 154              		@ link register save eliminated.
 172:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 173:Src/stm32f1xx_it.c **** 
 174:Src/stm32f1xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 175:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 176:Src/stm32f1xx_it.c **** 
 177:Src/stm32f1xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 178:Src/stm32f1xx_it.c **** }
 155              		.loc 1 178 0
 156 0000 7047     		bx	lr
 157              		.cfi_endproc
 158              	.LFE72:
 160              		.section	.text.PendSV_Handler,"ax",%progbits
 161              		.align	1
 162              		.global	PendSV_Handler
 163              		.syntax unified
 164              		.thumb
 165              		.thumb_func
 166              		.fpu softvfp
 168              	PendSV_Handler:
 169              	.LFB73:
 179:Src/stm32f1xx_it.c **** 
 180:Src/stm32f1xx_it.c **** /**
 181:Src/stm32f1xx_it.c ****   * @brief This function handles Pendable request for system service.
 182:Src/stm32f1xx_it.c ****   */
 183:Src/stm32f1xx_it.c **** void PendSV_Handler(void)
 184:Src/stm32f1xx_it.c **** {
 170              		.loc 1 184 0
 171              		.cfi_startproc
 172              		@ args = 0, pretend = 0, frame = 0
 173              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cchEN5h1.s 			page 7


 174              		@ link register save eliminated.
 185:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 0 */
 186:Src/stm32f1xx_it.c **** 
 187:Src/stm32f1xx_it.c ****   /* USER CODE END PendSV_IRQn 0 */
 188:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 1 */
 189:Src/stm32f1xx_it.c **** 
 190:Src/stm32f1xx_it.c ****   /* USER CODE END PendSV_IRQn 1 */
 191:Src/stm32f1xx_it.c **** }
 175              		.loc 1 191 0
 176 0000 7047     		bx	lr
 177              		.cfi_endproc
 178              	.LFE73:
 180              		.section	.text.SysTick_Handler,"ax",%progbits
 181              		.align	1
 182              		.global	SysTick_Handler
 183              		.syntax unified
 184              		.thumb
 185              		.thumb_func
 186              		.fpu softvfp
 188              	SysTick_Handler:
 189              	.LFB74:
 192:Src/stm32f1xx_it.c **** 
 193:Src/stm32f1xx_it.c **** /**
 194:Src/stm32f1xx_it.c ****   * @brief This function handles System tick timer.
 195:Src/stm32f1xx_it.c ****   */
 196:Src/stm32f1xx_it.c **** void SysTick_Handler(void)
 197:Src/stm32f1xx_it.c **** {
 190              		.loc 1 197 0
 191              		.cfi_startproc
 192              		@ args = 0, pretend = 0, frame = 0
 193              		@ frame_needed = 0, uses_anonymous_args = 0
 194 0000 08B5     		push	{r3, lr}
 195              	.LCFI0:
 196              		.cfi_def_cfa_offset 8
 197              		.cfi_offset 3, -8
 198              		.cfi_offset 14, -4
 198:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 199:Src/stm32f1xx_it.c **** 
 200:Src/stm32f1xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 201:Src/stm32f1xx_it.c ****   HAL_IncTick();
 199              		.loc 1 201 0
 200 0002 FFF7FEFF 		bl	HAL_IncTick
 201              	.LVL0:
 202:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 203:Src/stm32f1xx_it.c **** 
 204:Src/stm32f1xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 205:Src/stm32f1xx_it.c **** }
 202              		.loc 1 205 0
 203 0006 08BD     		pop	{r3, pc}
 204              		.cfi_endproc
 205              	.LFE74:
 207              		.section	.text.TIM2_IRQHandler,"ax",%progbits
 208              		.align	1
 209              		.global	TIM2_IRQHandler
 210              		.syntax unified
 211              		.thumb
 212              		.thumb_func
ARM GAS  /tmp/cchEN5h1.s 			page 8


 213              		.fpu softvfp
 215              	TIM2_IRQHandler:
 216              	.LFB75:
 206:Src/stm32f1xx_it.c **** 
 207:Src/stm32f1xx_it.c **** /******************************************************************************/
 208:Src/stm32f1xx_it.c **** /* STM32F1xx Peripheral Interrupt Handlers                                    */
 209:Src/stm32f1xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 210:Src/stm32f1xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 211:Src/stm32f1xx_it.c **** /* please refer to the startup file (startup_stm32f1xx.s).                    */
 212:Src/stm32f1xx_it.c **** /******************************************************************************/
 213:Src/stm32f1xx_it.c **** 
 214:Src/stm32f1xx_it.c **** /**
 215:Src/stm32f1xx_it.c ****   * @brief This function handles TIM2 global interrupt.
 216:Src/stm32f1xx_it.c ****   */
 217:Src/stm32f1xx_it.c **** void TIM2_IRQHandler(void)
 218:Src/stm32f1xx_it.c **** {
 217              		.loc 1 218 0
 218              		.cfi_startproc
 219              		@ args = 0, pretend = 0, frame = 0
 220              		@ frame_needed = 0, uses_anonymous_args = 0
 221 0000 08B5     		push	{r3, lr}
 222              	.LCFI1:
 223              		.cfi_def_cfa_offset 8
 224              		.cfi_offset 3, -8
 225              		.cfi_offset 14, -4
 219:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN TIM2_IRQn 0 */
 220:Src/stm32f1xx_it.c **** 
 221:Src/stm32f1xx_it.c ****   /* USER CODE END TIM2_IRQn 0 */
 222:Src/stm32f1xx_it.c ****   HAL_TIM_IRQHandler(&htim2);
 226              		.loc 1 222 0
 227 0002 0248     		ldr	r0, .L17
 228 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 229              	.LVL1:
 223:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN TIM2_IRQn 1 */
 224:Src/stm32f1xx_it.c **** 
 225:Src/stm32f1xx_it.c ****   /* USER CODE END TIM2_IRQn 1 */
 226:Src/stm32f1xx_it.c **** }
 230              		.loc 1 226 0
 231 0008 08BD     		pop	{r3, pc}
 232              	.L18:
 233 000a 00BF     		.align	2
 234              	.L17:
 235 000c 00000000 		.word	htim2
 236              		.cfi_endproc
 237              	.LFE75:
 239              		.section	.text.TIM3_IRQHandler,"ax",%progbits
 240              		.align	1
 241              		.global	TIM3_IRQHandler
 242              		.syntax unified
 243              		.thumb
 244              		.thumb_func
 245              		.fpu softvfp
 247              	TIM3_IRQHandler:
 248              	.LFB76:
 227:Src/stm32f1xx_it.c **** 
 228:Src/stm32f1xx_it.c **** /**
 229:Src/stm32f1xx_it.c ****   * @brief This function handles TIM3 global interrupt.
ARM GAS  /tmp/cchEN5h1.s 			page 9


 230:Src/stm32f1xx_it.c ****   */
 231:Src/stm32f1xx_it.c **** void TIM3_IRQHandler(void)
 232:Src/stm32f1xx_it.c **** {
 249              		.loc 1 232 0
 250              		.cfi_startproc
 251              		@ args = 0, pretend = 0, frame = 64
 252              		@ frame_needed = 0, uses_anonymous_args = 0
 253 0000 70B5     		push	{r4, r5, r6, lr}
 254              	.LCFI2:
 255              		.cfi_def_cfa_offset 16
 256              		.cfi_offset 4, -16
 257              		.cfi_offset 5, -12
 258              		.cfi_offset 6, -8
 259              		.cfi_offset 14, -4
 260 0002 9CB0     		sub	sp, sp, #112
 261              	.LCFI3:
 262              		.cfi_def_cfa_offset 128
 233:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN TIM3_IRQn 0 */
 234:Src/stm32f1xx_it.c **** 
 235:Src/stm32f1xx_it.c ****   /* USER CODE END TIM3_IRQn 0 */
 236:Src/stm32f1xx_it.c ****   HAL_TIM_IRQHandler(&htim3);
 263              		.loc 1 236 0
 264 0004 0E48     		ldr	r0, .L23
 265 0006 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 266              	.LVL2:
 237:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN TIM3_IRQn 1 */
 238:Src/stm32f1xx_it.c ****   if(evaluatePrinter_Gcode())
 267              		.loc 1 238 0
 268 000a FFF7FEFF 		bl	evaluatePrinter_Gcode
 269              	.LVL3:
 270 000e 08B9     		cbnz	r0, .L22
 271              	.L19:
 239:Src/stm32f1xx_it.c ****   {
 240:Src/stm32f1xx_it.c ****     sendCommandToPrinter_Gcode(firstOutCommandBuffer_Gcode());
 241:Src/stm32f1xx_it.c ****     eraseFirstCommandBuffer_Gcode();
 242:Src/stm32f1xx_it.c ****   }
 243:Src/stm32f1xx_it.c **** 
 244:Src/stm32f1xx_it.c **** 
 245:Src/stm32f1xx_it.c ****   /* USER CODE END TIM3_IRQn 1 */
 246:Src/stm32f1xx_it.c **** }
 272              		.loc 1 246 0
 273 0010 1CB0     		add	sp, sp, #112
 274              	.LCFI4:
 275              		.cfi_remember_state
 276              		.cfi_def_cfa_offset 16
 277              		@ sp needed
 278 0012 70BD     		pop	{r4, r5, r6, pc}
 279              	.L22:
 280              	.LCFI5:
 281              		.cfi_restore_state
 240:Src/stm32f1xx_it.c ****     eraseFirstCommandBuffer_Gcode();
 282              		.loc 1 240 0
 283 0014 0DAE     		add	r6, sp, #52
 284 0016 3046     		mov	r0, r6
 285 0018 FFF7FEFF 		bl	firstOutCommandBuffer_Gcode
 286              	.LVL4:
 287 001c 6C46     		mov	r4, sp
ARM GAS  /tmp/cchEN5h1.s 			page 10


 288 001e 11AD     		add	r5, sp, #68
 289 0020 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 290 0022 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 291 0024 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 292 0026 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 293 0028 95E80700 		ldm	r5, {r0, r1, r2}
 294 002c 84E80700 		stm	r4, {r0, r1, r2}
 295 0030 96E80F00 		ldm	r6, {r0, r1, r2, r3}
 296 0034 FFF7FEFF 		bl	sendCommandToPrinter_Gcode
 297              	.LVL5:
 241:Src/stm32f1xx_it.c ****   }
 298              		.loc 1 241 0
 299 0038 FFF7FEFF 		bl	eraseFirstCommandBuffer_Gcode
 300              	.LVL6:
 301              		.loc 1 246 0
 302 003c E8E7     		b	.L19
 303              	.L24:
 304 003e 00BF     		.align	2
 305              	.L23:
 306 0040 00000000 		.word	htim3
 307              		.cfi_endproc
 308              	.LFE76:
 310              		.section	.text.TIM4_IRQHandler,"ax",%progbits
 311              		.align	1
 312              		.global	TIM4_IRQHandler
 313              		.syntax unified
 314              		.thumb
 315              		.thumb_func
 316              		.fpu softvfp
 318              	TIM4_IRQHandler:
 319              	.LFB77:
 247:Src/stm32f1xx_it.c **** 
 248:Src/stm32f1xx_it.c **** /**
 249:Src/stm32f1xx_it.c ****   * @brief This function handles TIM4 global interrupt.
 250:Src/stm32f1xx_it.c ****   */
 251:Src/stm32f1xx_it.c **** void TIM4_IRQHandler(void)
 252:Src/stm32f1xx_it.c **** {
 320              		.loc 1 252 0
 321              		.cfi_startproc
 322              		@ args = 0, pretend = 0, frame = 0
 323              		@ frame_needed = 0, uses_anonymous_args = 0
 324 0000 08B5     		push	{r3, lr}
 325              	.LCFI6:
 326              		.cfi_def_cfa_offset 8
 327              		.cfi_offset 3, -8
 328              		.cfi_offset 14, -4
 253:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN TIM4_IRQn 0 */
 254:Src/stm32f1xx_it.c **** 
 255:Src/stm32f1xx_it.c ****   /* USER CODE END TIM4_IRQn 0 */
 256:Src/stm32f1xx_it.c ****   HAL_TIM_IRQHandler(&htim4);
 329              		.loc 1 256 0
 330 0002 0348     		ldr	r0, .L27
 331 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 332              	.LVL7:
 257:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN TIM4_IRQn 1 */
 258:Src/stm32f1xx_it.c ****   evaluate_Motors();
 333              		.loc 1 258 0
ARM GAS  /tmp/cchEN5h1.s 			page 11


 334 0008 FFF7FEFF 		bl	evaluate_Motors
 335              	.LVL8:
 259:Src/stm32f1xx_it.c ****   /* USER CODE END TIM4_IRQn 1 */
 260:Src/stm32f1xx_it.c **** }
 336              		.loc 1 260 0
 337 000c 08BD     		pop	{r3, pc}
 338              	.L28:
 339 000e 00BF     		.align	2
 340              	.L27:
 341 0010 00000000 		.word	htim4
 342              		.cfi_endproc
 343              	.LFE77:
 345              		.section	.text.TIM5_IRQHandler,"ax",%progbits
 346              		.align	1
 347              		.global	TIM5_IRQHandler
 348              		.syntax unified
 349              		.thumb
 350              		.thumb_func
 351              		.fpu softvfp
 353              	TIM5_IRQHandler:
 354              	.LFB78:
 261:Src/stm32f1xx_it.c **** 
 262:Src/stm32f1xx_it.c **** /**
 263:Src/stm32f1xx_it.c ****   * @brief This function handles TIM5 global interrupt.
 264:Src/stm32f1xx_it.c ****   */
 265:Src/stm32f1xx_it.c **** void TIM5_IRQHandler(void)
 266:Src/stm32f1xx_it.c **** {
 355              		.loc 1 266 0
 356              		.cfi_startproc
 357              		@ args = 0, pretend = 0, frame = 0
 358              		@ frame_needed = 0, uses_anonymous_args = 0
 359 0000 70B5     		push	{r4, r5, r6, lr}
 360              	.LCFI7:
 361              		.cfi_def_cfa_offset 16
 362              		.cfi_offset 4, -16
 363              		.cfi_offset 5, -12
 364              		.cfi_offset 6, -8
 365              		.cfi_offset 14, -4
 366 0002 82B0     		sub	sp, sp, #8
 367              	.LCFI8:
 368              		.cfi_def_cfa_offset 24
 267:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN TIM5_IRQn 0 */
 268:Src/stm32f1xx_it.c **** 
 269:Src/stm32f1xx_it.c ****   /* USER CODE END TIM5_IRQn 0 */
 270:Src/stm32f1xx_it.c ****   HAL_TIM_IRQHandler(&htim5);
 369              		.loc 1 270 0
 370 0004 0B48     		ldr	r0, .L31
 371 0006 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 372              	.LVL9:
 271:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN TIM5_IRQn 1 */
 272:Src/stm32f1xx_it.c ****   printf("%d, %d, %d, %d\n", getX_coordinates(), getY_coordinates(), getZ_coordinates(), getE_coord
 373              		.loc 1 272 0
 374 000a FFF7FEFF 		bl	getX_coordinates
 375              	.LVL10:
 376 000e 0446     		mov	r4, r0
 377 0010 FFF7FEFF 		bl	getY_coordinates
 378              	.LVL11:
ARM GAS  /tmp/cchEN5h1.s 			page 12


 379 0014 0546     		mov	r5, r0
 380 0016 FFF7FEFF 		bl	getZ_coordinates
 381              	.LVL12:
 382 001a 0646     		mov	r6, r0
 383 001c FFF7FEFF 		bl	getE_coordinates
 384              	.LVL13:
 385 0020 0090     		str	r0, [sp]
 386 0022 3346     		mov	r3, r6
 387 0024 2A46     		mov	r2, r5
 388 0026 2146     		mov	r1, r4
 389 0028 0348     		ldr	r0, .L31+4
 390 002a FFF7FEFF 		bl	printf
 391              	.LVL14:
 273:Src/stm32f1xx_it.c ****   /* USER CODE END TIM5_IRQn 1 */
 274:Src/stm32f1xx_it.c **** }
 392              		.loc 1 274 0
 393 002e 02B0     		add	sp, sp, #8
 394              	.LCFI9:
 395              		.cfi_def_cfa_offset 16
 396              		@ sp needed
 397 0030 70BD     		pop	{r4, r5, r6, pc}
 398              	.L32:
 399 0032 00BF     		.align	2
 400              	.L31:
 401 0034 00000000 		.word	htim5
 402 0038 00000000 		.word	.LC0
 403              		.cfi_endproc
 404              	.LFE78:
 406              		.section	.text.OTG_FS_IRQHandler,"ax",%progbits
 407              		.align	1
 408              		.global	OTG_FS_IRQHandler
 409              		.syntax unified
 410              		.thumb
 411              		.thumb_func
 412              		.fpu softvfp
 414              	OTG_FS_IRQHandler:
 415              	.LFB79:
 275:Src/stm32f1xx_it.c **** 
 276:Src/stm32f1xx_it.c **** /**
 277:Src/stm32f1xx_it.c ****   * @brief This function handles USB OTG FS global interrupt.
 278:Src/stm32f1xx_it.c ****   */
 279:Src/stm32f1xx_it.c **** void OTG_FS_IRQHandler(void)
 280:Src/stm32f1xx_it.c **** {
 416              		.loc 1 280 0
 417              		.cfi_startproc
 418              		@ args = 0, pretend = 0, frame = 0
 419              		@ frame_needed = 0, uses_anonymous_args = 0
 420 0000 08B5     		push	{r3, lr}
 421              	.LCFI10:
 422              		.cfi_def_cfa_offset 8
 423              		.cfi_offset 3, -8
 424              		.cfi_offset 14, -4
 281:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN OTG_FS_IRQn 0 */
 282:Src/stm32f1xx_it.c **** 
 283:Src/stm32f1xx_it.c ****   /* USER CODE END OTG_FS_IRQn 0 */
 284:Src/stm32f1xx_it.c ****   HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 425              		.loc 1 284 0
ARM GAS  /tmp/cchEN5h1.s 			page 13


 426 0002 0248     		ldr	r0, .L35
 427 0004 FFF7FEFF 		bl	HAL_HCD_IRQHandler
 428              	.LVL15:
 285:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN OTG_FS_IRQn 1 */
 286:Src/stm32f1xx_it.c **** 
 287:Src/stm32f1xx_it.c ****   /* USER CODE END OTG_FS_IRQn 1 */
 288:Src/stm32f1xx_it.c **** }
 429              		.loc 1 288 0
 430 0008 08BD     		pop	{r3, pc}
 431              	.L36:
 432 000a 00BF     		.align	2
 433              	.L35:
 434 000c 00000000 		.word	hhcd_USB_OTG_FS
 435              		.cfi_endproc
 436              	.LFE79:
 438              		.section	.rodata.TIM5_IRQHandler.str1.4,"aMS",%progbits,1
 439              		.align	2
 440              	.LC0:
 441 0000 25642C20 		.ascii	"%d, %d, %d, %d\012\000"
 441      25642C20 
 441      25642C20 
 441      25640A00 
 442              		.text
 443              	.Letext0:
 444              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 445              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 446              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 447              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 448              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f105xc.h"
 449              		.file 7 "/usr/arm-none-eabi/include/sys/lock.h"
 450              		.file 8 "/usr/arm-none-eabi/include/sys/_types.h"
 451              		.file 9 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 452              		.file 10 "/usr/arm-none-eabi/include/sys/reent.h"
 453              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 454              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 455              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 456              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 457              		.file 15 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usb.h"
 458              		.file 16 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_hcd.h"
 459              		.file 17 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 460              		.file 18 "Inc/Gcode/GcodeConverter_Gcode.h"
 461              		.file 19 "Inc/Gcode/Descritization_Gcode.h"
 462              		.file 20 "Inc/Gcode/Buffer_Gcode.h"
 463              		.file 21 "Inc/Gcode/VirtualPrinters_Gcode.h"
 464              		.file 22 "Inc/usart.h"
 465              		.file 23 "Inc/coordinates.h"
 466              		.file 24 "/usr/arm-none-eabi/include/stdio.h"
 467              		.file 25 "Inc/Motors/Driver_Motors.h"
ARM GAS  /tmp/cchEN5h1.s 			page 14


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_it.c
     /tmp/cchEN5h1.s:16     .text.NMI_Handler:0000000000000000 $t
     /tmp/cchEN5h1.s:23     .text.NMI_Handler:0000000000000000 NMI_Handler
     /tmp/cchEN5h1.s:37     .text.HardFault_Handler:0000000000000000 $t
     /tmp/cchEN5h1.s:44     .text.HardFault_Handler:0000000000000000 HardFault_Handler
     /tmp/cchEN5h1.s:58     .text.MemManage_Handler:0000000000000000 $t
     /tmp/cchEN5h1.s:65     .text.MemManage_Handler:0000000000000000 MemManage_Handler
     /tmp/cchEN5h1.s:79     .text.BusFault_Handler:0000000000000000 $t
     /tmp/cchEN5h1.s:86     .text.BusFault_Handler:0000000000000000 BusFault_Handler
     /tmp/cchEN5h1.s:100    .text.UsageFault_Handler:0000000000000000 $t
     /tmp/cchEN5h1.s:107    .text.UsageFault_Handler:0000000000000000 UsageFault_Handler
     /tmp/cchEN5h1.s:121    .text.SVC_Handler:0000000000000000 $t
     /tmp/cchEN5h1.s:128    .text.SVC_Handler:0000000000000000 SVC_Handler
     /tmp/cchEN5h1.s:141    .text.DebugMon_Handler:0000000000000000 $t
     /tmp/cchEN5h1.s:148    .text.DebugMon_Handler:0000000000000000 DebugMon_Handler
     /tmp/cchEN5h1.s:161    .text.PendSV_Handler:0000000000000000 $t
     /tmp/cchEN5h1.s:168    .text.PendSV_Handler:0000000000000000 PendSV_Handler
     /tmp/cchEN5h1.s:181    .text.SysTick_Handler:0000000000000000 $t
     /tmp/cchEN5h1.s:188    .text.SysTick_Handler:0000000000000000 SysTick_Handler
     /tmp/cchEN5h1.s:208    .text.TIM2_IRQHandler:0000000000000000 $t
     /tmp/cchEN5h1.s:215    .text.TIM2_IRQHandler:0000000000000000 TIM2_IRQHandler
     /tmp/cchEN5h1.s:235    .text.TIM2_IRQHandler:000000000000000c $d
     /tmp/cchEN5h1.s:240    .text.TIM3_IRQHandler:0000000000000000 $t
     /tmp/cchEN5h1.s:247    .text.TIM3_IRQHandler:0000000000000000 TIM3_IRQHandler
     /tmp/cchEN5h1.s:306    .text.TIM3_IRQHandler:0000000000000040 $d
     /tmp/cchEN5h1.s:311    .text.TIM4_IRQHandler:0000000000000000 $t
     /tmp/cchEN5h1.s:318    .text.TIM4_IRQHandler:0000000000000000 TIM4_IRQHandler
     /tmp/cchEN5h1.s:341    .text.TIM4_IRQHandler:0000000000000010 $d
     /tmp/cchEN5h1.s:346    .text.TIM5_IRQHandler:0000000000000000 $t
     /tmp/cchEN5h1.s:353    .text.TIM5_IRQHandler:0000000000000000 TIM5_IRQHandler
     /tmp/cchEN5h1.s:401    .text.TIM5_IRQHandler:0000000000000034 $d
     /tmp/cchEN5h1.s:407    .text.OTG_FS_IRQHandler:0000000000000000 $t
     /tmp/cchEN5h1.s:414    .text.OTG_FS_IRQHandler:0000000000000000 OTG_FS_IRQHandler
     /tmp/cchEN5h1.s:434    .text.OTG_FS_IRQHandler:000000000000000c $d
     /tmp/cchEN5h1.s:439    .rodata.TIM5_IRQHandler.str1.4:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_IncTick
HAL_TIM_IRQHandler
htim2
evaluatePrinter_Gcode
firstOutCommandBuffer_Gcode
sendCommandToPrinter_Gcode
eraseFirstCommandBuffer_Gcode
htim3
evaluate_Motors
htim4
getX_coordinates
getY_coordinates
getZ_coordinates
getE_coordinates
printf
htim5
HAL_HCD_IRQHandler
hhcd_USB_OTG_FS
